{
	"name": "RFS_PRODUCTDB_DATAFLOW",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "RFS_PRODUCTDB",
						"type": "DatasetReference"
					},
					"name": "XMLFileSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "RFS_DATAWAREHOUSE_AzIR",
						"type": "DatasetReference"
					},
					"name": "WriteProductDB"
				},
				{
					"dataset": {
						"referenceName": "RFS_DATAWAREHOUSE_AzIR",
						"type": "DatasetReference"
					},
					"name": "WriteProductCanAdds"
				},
				{
					"dataset": {
						"referenceName": "RFS_DATAWAREHOUSE_AzIR",
						"type": "DatasetReference"
					},
					"name": "WriteProductCategories"
				},
				{
					"dataset": {
						"referenceName": "RFS_DATAWAREHOUSE_AzIR",
						"type": "DatasetReference"
					},
					"name": "WriteCategoryMenus"
				},
				{
					"dataset": {
						"referenceName": "RFS_DATAWAREHOUSE_AzIR",
						"type": "DatasetReference"
					},
					"name": "WriteProductChoices"
				},
				{
					"dataset": {
						"referenceName": "RFS_DATAWAREHOUSE_AzIR",
						"type": "DatasetReference"
					},
					"name": "WriteProductComments"
				},
				{
					"dataset": {
						"referenceName": "RFS_DATAWAREHOUSE_AzIR",
						"type": "DatasetReference"
					},
					"name": "WriteProductComposition"
				},
				{
					"dataset": {
						"referenceName": "RFS_DATAWAREHOUSE_AzIR",
						"type": "DatasetReference"
					},
					"name": "WriteProductCustomParameters"
				},
				{
					"dataset": {
						"referenceName": "RFS_DATAWAREHOUSE_AzIR",
						"type": "DatasetReference"
					},
					"name": "WriteProductDistribution"
				},
				{
					"dataset": {
						"referenceName": "RFS_DATAWAREHOUSE_AzIR",
						"type": "DatasetReference"
					},
					"name": "WriteProductPriceList"
				},
				{
					"dataset": {
						"referenceName": "RFS_DATAWAREHOUSE_AzIR",
						"type": "DatasetReference"
					},
					"name": "WriteProductProductionKVSRoute"
				},
				{
					"dataset": {
						"referenceName": "RFS_DATAWAREHOUSE_AzIR",
						"type": "DatasetReference"
					},
					"name": "WriteProductSizeSelection"
				},
				{
					"dataset": {
						"referenceName": "RFS_DATAWAREHOUSE_AzIR",
						"type": "DatasetReference"
					},
					"name": "WriteSubstitutionList"
				},
				{
					"dataset": {
						"referenceName": "RFS_DATAWAREHOUSE_AzIR",
						"type": "DatasetReference"
					},
					"name": "WriteProduct"
				}
			],
			"transformations": [
				{
					"name": "FlattenProductDB"
				},
				{
					"name": "FlattenProductCanAdds"
				},
				{
					"name": "FlattenProductCategories"
				},
				{
					"name": "FlattenCategoryMenus"
				},
				{
					"name": "FlattenProductChoices"
				},
				{
					"name": "FlattenProductComments"
				},
				{
					"name": "FlattenProductComposition"
				},
				{
					"name": "FlattenProductCustomParameters"
				},
				{
					"name": "FlattenProductDistribution"
				},
				{
					"name": "FlattenProductPriceList"
				},
				{
					"name": "FlattenProductProductionKVSRoute"
				},
				{
					"name": "FlattenProductSizeSelection"
				},
				{
					"name": "FlattenSubstitutionList"
				},
				{
					"name": "FlattenProduct"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ProductDb as ({@version} as double, Product as ({@grillGroup} as string, {@modified} as boolean, {@productCategory} as string, {@productClass} as string, {@salable} as boolean, {@statusCode} as string, AutoCondimentDisplay as (DisplayPOS as boolean, DisplayPOSEvent as string, DisplayPickList as boolean, DisplayReceipt as boolean), CSOHasLimitedTimeDiscount as boolean, CanAdds as (Component as (ChargeThreshold as short, CostInclusive as boolean, DefaultQuantity as boolean, DisplayOnCSO as boolean, MaxQuantity as short, MinQuantity as boolean, ProductCode as short, ProductCodeImpactedOnRTM as short, RefundThreshold as boolean, setParentProductOutage as boolean)[]), Categories as (Category as ({@categoryID} as integer, {@displaySizeSelection} as boolean, {@sequence} as short)[]), CategoryMenus as (CategoryMenu as ({@categoryID} as short)[]), ChoiceGroup as string, Choices as (Component as (Anchor as boolean, ChargeThreshold as short, CostInclusive as boolean, DefaultProduct as short, DefaultQuantity as short, FlexibleChoice as boolean, MaxQuantity as short, MinQuantity as short, PriceCalculationMode as string, ProductCode as integer, ReferenceProduct as short, RefundThreshold as boolean, setParentProductOutage as boolean)[]), Comments as (Component as (ChargeThreshold as boolean, CostInclusive as boolean, DefaultQuantity as boolean, DisplayOnCSO as boolean, MaxQuantity as boolean, MinQuantity as boolean, ProductCode as integer, ProductCodeImpactedOnRTM as short, RefundThreshold as boolean, setParentProductOutage as boolean)[]), Composition as (Component as (Anchor as boolean, ChargeThreshold as short, CostInclusive as boolean, DefaultQuantity as short, FlexibleChoice as boolean, ForceCompDisplay as string, MaxQuantity as short, MinQuantity as short, PlainGrill as boolean, PriceCalculationMode as string, ProductCode as short, ProductCodeImpactedOnRTM as short, RefundThreshold as boolean, SmartGrill as boolean, setParentProductOutage as boolean)[]), ContainerVM as boolean, CustomParameters as (Parameter as ({@name} as string, {@value} as string)[]), DayPartCode as string, Department as (ClassDepartment as (Id as string, SubClassDepartment as (Id as string)), Id as string), DisplayOrder as short, DisplayWaste as boolean, Distribution as (Point as string[]), DummyProduct as boolean, FamilyGroup as string, IsMutuallyExclusive as boolean, Presentation as (BGNormal as string, BGPressed as string, BitmapName as string, CSOCartImageName as string, CSOCircleImageName as string, CSODimensionImageName as string, CSOGrillImageName as string, CSOLargeImageName as string, CSOSmallImageName as string, CSOValueMealImage as string, CytPreviewImage as string, CytPreviewImageBottom as string, DisplayColor as string, FGNormal as string, FGPressed as string, GrillBitmapName as string, KVSColor as string, SmallBitmapName as string, {_value_} as string), PriceList as (PriceTag as (Pricing as ({@priceCode} as string, Price as double, Tax as ({@entry} as short, {@rule} as string, {@taxCode} as string))[])), ProductCode as integer, ProductUnit as string, Production as (AutoGrill as boolean, BunPrepTypeID as short, Grillable as ({@doNotPrint} as boolean, {@status} as boolean), KVSRoutes as (Route as ({@id} as short)[]), KVSdisplay as ({@displayGrillInstructions} as string, {@doNotDecompVM} as boolean, {@showOnMFY} as boolean, {@showOnMain} as boolean, {@showOnSummary} as boolean), PPG as string, RapidTurnoverMonitor as ({@autoBumpTimeout} as short, {@priority} as short, {@threshold} as short, {@type} as string), SubstitutionGrill as string, TriggerDisplayOnOrb as boolean, UseBufferEngine as ({@isBunBuffer} as boolean, {@status} as boolean), displayNumbersInsteadofModifiers as boolean), SalesType as ({@eatin} as boolean, {@other} as boolean, {@takeout} as boolean), Secondary as boolean, SizeSelection as (Size as ({@code} as short, {@entry} as short, {@showDimensionOnRCTLocalPromotion} as boolean, {@showDimensionToCustomer} as boolean)[]), SmartReminder as ({@group} as string, Priority as short), StationGroup as string, SubstitutionList as (Item as ({@id} as short, {@productCode} as short)[]), TimeRestrictions as (AllowedTime as ({@endTime} as string, {@startTime} as string)), Upsizable as boolean)[])",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     validationMode: 'none',",
				"     namespaces: true) ~> XMLFileSource",
				"XMLFileSource foldDown(unroll(ProductDb.Product),",
				"     mapColumn(",
				"          {@version} = ProductDb.{@version},",
				"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
				"          {@modified} = ProductDb.Product.{@modified},",
				"          {@productCategory} = ProductDb.Product.{@productCategory},",
				"          {@productClass} = ProductDb.Product.{@productClass},",
				"          {@salable} = ProductDb.Product.{@salable},",
				"          {@statusCode} = ProductDb.Product.{@statusCode},",
				"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
				"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
				"          CanAdds = ProductDb.Product.CanAdds,",
				"          Categories = ProductDb.Product.Categories,",
				"          CategoryMenus = ProductDb.Product.CategoryMenus,",
				"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
				"          Choices = ProductDb.Product.Choices,",
				"          Comments = ProductDb.Product.Comments,",
				"          Composition = ProductDb.Product.Composition,",
				"          ContainerVM = ProductDb.Product.ContainerVM,",
				"          CustomParameters = ProductDb.Product.CustomParameters,",
				"          DayPartCode = ProductDb.Product.DayPartCode,",
				"          Department = ProductDb.Product.Department,",
				"          DisplayOrder = ProductDb.Product.DisplayOrder,",
				"          DisplayWaste = ProductDb.Product.DisplayWaste,",
				"          Distribution = ProductDb.Product.Distribution,",
				"          DummyProduct = ProductDb.Product.DummyProduct,",
				"          FamilyGroup = ProductDb.Product.FamilyGroup,",
				"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
				"          Presentation = ProductDb.Product.Presentation,",
				"          PriceList = ProductDb.Product.PriceList,",
				"          ProductCode = ProductDb.Product.ProductCode,",
				"          ProductUnit = ProductDb.Product.ProductUnit,",
				"          Production = ProductDb.Product.Production,",
				"          SalesType = ProductDb.Product.SalesType,",
				"          Secondary = ProductDb.Product.Secondary,",
				"          SizeSelection = ProductDb.Product.SizeSelection,",
				"          SmartReminder = ProductDb.Product.SmartReminder,",
				"          StationGroup = ProductDb.Product.StationGroup,",
				"          SubstitutionList = ProductDb.Product.SubstitutionList,",
				"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
				"          Upsizable = ProductDb.Product.Upsizable",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenProductDB",
				"XMLFileSource foldDown(unroll(ProductDb.Product.CanAdds.Component, ProductDb.Product),",
				"     mapColumn(",
				"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
				"          {@modified} = ProductDb.Product.{@modified},",
				"          {@productCategory} = ProductDb.Product.{@productCategory},",
				"          {@productClass} = ProductDb.Product.{@productClass},",
				"          {@salable} = ProductDb.Product.{@salable},",
				"          {@statusCode} = ProductDb.Product.{@statusCode},",
				"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
				"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
				"          ChargeThreshold = ProductDb.Product.CanAdds.Component.ChargeThreshold,",
				"          CostInclusive = ProductDb.Product.CanAdds.Component.CostInclusive,",
				"          DefaultQuantity = ProductDb.Product.CanAdds.Component.DefaultQuantity,",
				"          DisplayOnCSO = ProductDb.Product.CanAdds.Component.DisplayOnCSO,",
				"          MaxQuantity = ProductDb.Product.CanAdds.Component.MaxQuantity,",
				"          MinQuantity = ProductDb.Product.CanAdds.Component.MinQuantity,",
				"          ProductCode2 = ProductDb.Product.CanAdds.Component.ProductCode,",
				"          ProductCodeImpactedOnRTM = ProductDb.Product.CanAdds.Component.ProductCodeImpactedOnRTM,",
				"          RefundThreshold = ProductDb.Product.CanAdds.Component.RefundThreshold,",
				"          setParentProductOutage = ProductDb.Product.CanAdds.Component.setParentProductOutage,",
				"          Categories = ProductDb.Product.Categories,",
				"          CategoryMenus = ProductDb.Product.CategoryMenus,",
				"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
				"          Choices = ProductDb.Product.Choices,",
				"          Comments = ProductDb.Product.Comments,",
				"          Composition = ProductDb.Product.Composition,",
				"          ContainerVM = ProductDb.Product.ContainerVM,",
				"          CustomParameters = ProductDb.Product.CustomParameters,",
				"          DayPartCode = ProductDb.Product.DayPartCode,",
				"          Department = ProductDb.Product.Department,",
				"          DisplayOrder = ProductDb.Product.DisplayOrder,",
				"          DisplayWaste = ProductDb.Product.DisplayWaste,",
				"          Distribution = ProductDb.Product.Distribution,",
				"          DummyProduct = ProductDb.Product.DummyProduct,",
				"          FamilyGroup = ProductDb.Product.FamilyGroup,",
				"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
				"          Presentation = ProductDb.Product.Presentation,",
				"          PriceList = ProductDb.Product.PriceList,",
				"          ProductCodem = ProductDb.Product.ProductCode,",
				"          ProductUnit = ProductDb.Product.ProductUnit,",
				"          Production = ProductDb.Product.Production,",
				"          SalesType = ProductDb.Product.SalesType,",
				"          Secondary = ProductDb.Product.Secondary,",
				"          SizeSelection = ProductDb.Product.SizeSelection,",
				"          SmartReminder = ProductDb.Product.SmartReminder,",
				"          StationGroup = ProductDb.Product.StationGroup,",
				"          SubstitutionList = ProductDb.Product.SubstitutionList,",
				"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
				"          Upsizable = ProductDb.Product.Upsizable",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenProductCanAdds",
				"XMLFileSource foldDown(unroll(ProductDb.Product.Categories.Category, ProductDb.Product),",
				"     mapColumn(",
				"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
				"          {@modified} = ProductDb.Product.{@modified},",
				"          {@productCategory} = ProductDb.Product.{@productCategory},",
				"          {@productClass} = ProductDb.Product.{@productClass},",
				"          {@salable} = ProductDb.Product.{@salable},",
				"          {@statusCode} = ProductDb.Product.{@statusCode},",
				"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
				"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
				"          CanAdds = ProductDb.Product.CanAdds,",
				"          {@categoryID} = ProductDb.Product.Categories.Category.{@categoryID},",
				"          {@displaySizeSelection} = ProductDb.Product.Categories.Category.{@displaySizeSelection},",
				"          {@sequence} = ProductDb.Product.Categories.Category.{@sequence},",
				"          CategoryMenus = ProductDb.Product.CategoryMenus,",
				"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
				"          Choices = ProductDb.Product.Choices,",
				"          Comments = ProductDb.Product.Comments,",
				"          Composition = ProductDb.Product.Composition,",
				"          ContainerVM = ProductDb.Product.ContainerVM,",
				"          CustomParameters = ProductDb.Product.CustomParameters,",
				"          DayPartCode = ProductDb.Product.DayPartCode,",
				"          Department = ProductDb.Product.Department,",
				"          DisplayOrder = ProductDb.Product.DisplayOrder,",
				"          DisplayWaste = ProductDb.Product.DisplayWaste,",
				"          Distribution = ProductDb.Product.Distribution,",
				"          DummyProduct = ProductDb.Product.DummyProduct,",
				"          FamilyGroup = ProductDb.Product.FamilyGroup,",
				"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
				"          Presentation = ProductDb.Product.Presentation,",
				"          PriceList = ProductDb.Product.PriceList,",
				"          ProductCode = ProductDb.Product.ProductCode,",
				"          ProductUnit = ProductDb.Product.ProductUnit,",
				"          Production = ProductDb.Product.Production,",
				"          SalesType = ProductDb.Product.SalesType,",
				"          Secondary = ProductDb.Product.Secondary,",
				"          SizeSelection = ProductDb.Product.SizeSelection,",
				"          SmartReminder = ProductDb.Product.SmartReminder,",
				"          StationGroup = ProductDb.Product.StationGroup,",
				"          SubstitutionList = ProductDb.Product.SubstitutionList,",
				"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
				"          Upsizable = ProductDb.Product.Upsizable",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenProductCategories",
				"XMLFileSource foldDown(unroll(ProductDb.Product.CategoryMenus.CategoryMenu, ProductDb.Product),",
				"     mapColumn(",
				"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
				"          {@modified} = ProductDb.Product.{@modified},",
				"          {@productCategory} = ProductDb.Product.{@productCategory},",
				"          {@productClass} = ProductDb.Product.{@productClass},",
				"          {@salable} = ProductDb.Product.{@salable},",
				"          {@statusCode} = ProductDb.Product.{@statusCode},",
				"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
				"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
				"          CanAdds = ProductDb.Product.CanAdds,",
				"          Categories = ProductDb.Product.Categories,",
				"          {@categoryID} = ProductDb.Product.CategoryMenus.CategoryMenu.{@categoryID},",
				"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
				"          Choices = ProductDb.Product.Choices,",
				"          Comments = ProductDb.Product.Comments,",
				"          Composition = ProductDb.Product.Composition,",
				"          ContainerVM = ProductDb.Product.ContainerVM,",
				"          CustomParameters = ProductDb.Product.CustomParameters,",
				"          DayPartCode = ProductDb.Product.DayPartCode,",
				"          Department = ProductDb.Product.Department,",
				"          DisplayOrder = ProductDb.Product.DisplayOrder,",
				"          DisplayWaste = ProductDb.Product.DisplayWaste,",
				"          Distribution = ProductDb.Product.Distribution,",
				"          DummyProduct = ProductDb.Product.DummyProduct,",
				"          FamilyGroup = ProductDb.Product.FamilyGroup,",
				"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
				"          Presentation = ProductDb.Product.Presentation,",
				"          PriceList = ProductDb.Product.PriceList,",
				"          ProductCode = ProductDb.Product.ProductCode,",
				"          ProductUnit = ProductDb.Product.ProductUnit,",
				"          Production = ProductDb.Product.Production,",
				"          SalesType = ProductDb.Product.SalesType,",
				"          Secondary = ProductDb.Product.Secondary,",
				"          SizeSelection = ProductDb.Product.SizeSelection,",
				"          SmartReminder = ProductDb.Product.SmartReminder,",
				"          StationGroup = ProductDb.Product.StationGroup,",
				"          SubstitutionList = ProductDb.Product.SubstitutionList,",
				"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
				"          Upsizable = ProductDb.Product.Upsizable",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenCategoryMenus",
				"XMLFileSource foldDown(unroll(ProductDb.Product.Choices.Component, ProductDb.Product),",
				"     mapColumn(",
				"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
				"          {@modified} = ProductDb.Product.{@modified},",
				"          {@productCategory} = ProductDb.Product.{@productCategory},",
				"          {@productClass} = ProductDb.Product.{@productClass},",
				"          {@salable} = ProductDb.Product.{@salable},",
				"          {@statusCode} = ProductDb.Product.{@statusCode},",
				"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
				"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
				"          CanAdds = ProductDb.Product.CanAdds,",
				"          Categories = ProductDb.Product.Categories,",
				"          CategoryMenus = ProductDb.Product.CategoryMenus,",
				"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
				"          Anchor = ProductDb.Product.Choices.Component.Anchor,",
				"          ChargeThreshold = ProductDb.Product.Choices.Component.ChargeThreshold,",
				"          CostInclusive = ProductDb.Product.Choices.Component.CostInclusive,",
				"          DefaultProduct = ProductDb.Product.Choices.Component.DefaultProduct,",
				"          DefaultQuantity = ProductDb.Product.Choices.Component.DefaultQuantity,",
				"          FlexibleChoice = ProductDb.Product.Choices.Component.FlexibleChoice,",
				"          MaxQuantity = ProductDb.Product.Choices.Component.MaxQuantity,",
				"          MinQuantity = ProductDb.Product.Choices.Component.MinQuantity,",
				"          PriceCalculationMode = ProductDb.Product.Choices.Component.PriceCalculationMode,",
				"          CHOICEproductcode = ProductDb.Product.Choices.Component.ProductCode,",
				"          ReferenceProduct = ProductDb.Product.Choices.Component.ReferenceProduct,",
				"          RefundThreshold = ProductDb.Product.Choices.Component.RefundThreshold,",
				"          setParentProductOutage = ProductDb.Product.Choices.Component.setParentProductOutage,",
				"          Comments = ProductDb.Product.Comments,",
				"          Composition = ProductDb.Product.Composition,",
				"          ContainerVM = ProductDb.Product.ContainerVM,",
				"          CustomParameters = ProductDb.Product.CustomParameters,",
				"          DayPartCode = ProductDb.Product.DayPartCode,",
				"          Department = ProductDb.Product.Department,",
				"          DisplayOrder = ProductDb.Product.DisplayOrder,",
				"          DisplayWaste = ProductDb.Product.DisplayWaste,",
				"          Distribution = ProductDb.Product.Distribution,",
				"          DummyProduct = ProductDb.Product.DummyProduct,",
				"          FamilyGroup = ProductDb.Product.FamilyGroup,",
				"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
				"          Presentation = ProductDb.Product.Presentation,",
				"          PriceList = ProductDb.Product.PriceList,",
				"          ProductCode = ProductDb.Product.ProductCode,",
				"          ProductUnit = ProductDb.Product.ProductUnit,",
				"          Production = ProductDb.Product.Production,",
				"          SalesType = ProductDb.Product.SalesType,",
				"          Secondary = ProductDb.Product.Secondary,",
				"          SizeSelection = ProductDb.Product.SizeSelection,",
				"          SmartReminder = ProductDb.Product.SmartReminder,",
				"          StationGroup = ProductDb.Product.StationGroup,",
				"          SubstitutionList = ProductDb.Product.SubstitutionList,",
				"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
				"          Upsizable = ProductDb.Product.Upsizable",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenProductChoices",
				"XMLFileSource foldDown(unroll(ProductDb.Product.Comments.Component, ProductDb.Product),",
				"     mapColumn(",
				"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
				"          {@modified} = ProductDb.Product.{@modified},",
				"          {@productCategory} = ProductDb.Product.{@productCategory},",
				"          {@productClass} = ProductDb.Product.{@productClass},",
				"          {@salable} = ProductDb.Product.{@salable},",
				"          {@statusCode} = ProductDb.Product.{@statusCode},",
				"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
				"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
				"          CanAdds = ProductDb.Product.CanAdds,",
				"          Categories = ProductDb.Product.Categories,",
				"          CategoryMenus = ProductDb.Product.CategoryMenus,",
				"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
				"          Choices = ProductDb.Product.Choices,",
				"          ChargeThreshold = ProductDb.Product.Comments.Component.ChargeThreshold,",
				"          CostInclusive = ProductDb.Product.Comments.Component.CostInclusive,",
				"          DefaultQuantity = ProductDb.Product.Comments.Component.DefaultQuantity,",
				"          DisplayOnCSO = ProductDb.Product.Comments.Component.DisplayOnCSO,",
				"          MaxQuantity = ProductDb.Product.Comments.Component.MaxQuantity,",
				"          MinQuantity = ProductDb.Product.Comments.Component.MinQuantity,",
				"          {comment.ProductCode} = ProductDb.Product.Comments.Component.ProductCode,",
				"          ProductCodeImpactedOnRTM = ProductDb.Product.Comments.Component.ProductCodeImpactedOnRTM,",
				"          RefundThreshold = ProductDb.Product.Comments.Component.RefundThreshold,",
				"          setParentProductOutage = ProductDb.Product.Comments.Component.setParentProductOutage,",
				"          Composition = ProductDb.Product.Composition,",
				"          ContainerVM = ProductDb.Product.ContainerVM,",
				"          CustomParameters = ProductDb.Product.CustomParameters,",
				"          DayPartCode = ProductDb.Product.DayPartCode,",
				"          Department = ProductDb.Product.Department,",
				"          DisplayOrder = ProductDb.Product.DisplayOrder,",
				"          DisplayWaste = ProductDb.Product.DisplayWaste,",
				"          Distribution = ProductDb.Product.Distribution,",
				"          DummyProduct = ProductDb.Product.DummyProduct,",
				"          FamilyGroup = ProductDb.Product.FamilyGroup,",
				"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
				"          Presentation = ProductDb.Product.Presentation,",
				"          PriceList = ProductDb.Product.PriceList,",
				"          ProductCode = ProductDb.Product.ProductCode,",
				"          ProductUnit = ProductDb.Product.ProductUnit,",
				"          Production = ProductDb.Product.Production,",
				"          SalesType = ProductDb.Product.SalesType,",
				"          Secondary = ProductDb.Product.Secondary,",
				"          SizeSelection = ProductDb.Product.SizeSelection,",
				"          SmartReminder = ProductDb.Product.SmartReminder,",
				"          StationGroup = ProductDb.Product.StationGroup,",
				"          SubstitutionList = ProductDb.Product.SubstitutionList,",
				"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
				"          Upsizable = ProductDb.Product.Upsizable",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenProductComments",
				"XMLFileSource foldDown(unroll(ProductDb.Product.Composition.Component, ProductDb.Product),",
				"     mapColumn(",
				"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
				"          {@modified} = ProductDb.Product.{@modified},",
				"          {@productCategory} = ProductDb.Product.{@productCategory},",
				"          {@productClass} = ProductDb.Product.{@productClass},",
				"          {@salable} = ProductDb.Product.{@salable},",
				"          {@statusCode} = ProductDb.Product.{@statusCode},",
				"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
				"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
				"          CanAdds = ProductDb.Product.CanAdds,",
				"          Categories = ProductDb.Product.Categories,",
				"          CategoryMenus = ProductDb.Product.CategoryMenus,",
				"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
				"          Choices = ProductDb.Product.Choices,",
				"          Comments = ProductDb.Product.Comments,",
				"          Anchor = ProductDb.Product.Composition.Component.Anchor,",
				"          ChargeThreshold = ProductDb.Product.Composition.Component.ChargeThreshold,",
				"          CostInclusive = ProductDb.Product.Composition.Component.CostInclusive,",
				"          DefaultQuantity = ProductDb.Product.Composition.Component.DefaultQuantity,",
				"          FlexibleChoice = ProductDb.Product.Composition.Component.FlexibleChoice,",
				"          ForceCompDisplay = ProductDb.Product.Composition.Component.ForceCompDisplay,",
				"          MaxQuantity = ProductDb.Product.Composition.Component.MaxQuantity,",
				"          MinQuantity = ProductDb.Product.Composition.Component.MinQuantity,",
				"          PlainGrill = ProductDb.Product.Composition.Component.PlainGrill,",
				"          PriceCalculationMode = ProductDb.Product.Composition.Component.PriceCalculationMode,",
				"          {composition.ProductCode} = ProductDb.Product.Composition.Component.ProductCode,",
				"          ProductCodeImpactedOnRTM = ProductDb.Product.Composition.Component.ProductCodeImpactedOnRTM,",
				"          RefundThreshold = ProductDb.Product.Composition.Component.RefundThreshold,",
				"          SmartGrill = ProductDb.Product.Composition.Component.SmartGrill,",
				"          setParentProductOutage = ProductDb.Product.Composition.Component.setParentProductOutage,",
				"          ContainerVM = ProductDb.Product.ContainerVM,",
				"          CustomParameters = ProductDb.Product.CustomParameters,",
				"          DayPartCode = ProductDb.Product.DayPartCode,",
				"          Department = ProductDb.Product.Department,",
				"          DisplayOrder = ProductDb.Product.DisplayOrder,",
				"          DisplayWaste = ProductDb.Product.DisplayWaste,",
				"          Distribution = ProductDb.Product.Distribution,",
				"          DummyProduct = ProductDb.Product.DummyProduct,",
				"          FamilyGroup = ProductDb.Product.FamilyGroup,",
				"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
				"          Presentation = ProductDb.Product.Presentation,",
				"          PriceList = ProductDb.Product.PriceList,",
				"          ProductCode = ProductDb.Product.ProductCode,",
				"          ProductUnit = ProductDb.Product.ProductUnit,",
				"          Production = ProductDb.Product.Production,",
				"          SalesType = ProductDb.Product.SalesType,",
				"          Secondary = ProductDb.Product.Secondary,",
				"          SizeSelection = ProductDb.Product.SizeSelection,",
				"          SmartReminder = ProductDb.Product.SmartReminder,",
				"          StationGroup = ProductDb.Product.StationGroup,",
				"          SubstitutionList = ProductDb.Product.SubstitutionList,",
				"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
				"          Upsizable = ProductDb.Product.Upsizable",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenProductComposition",
				"XMLFileSource foldDown(unroll(ProductDb.Product.CustomParameters.Parameter, ProductDb.Product),",
				"     mapColumn(",
				"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
				"          {@modified} = ProductDb.Product.{@modified},",
				"          {@productCategory} = ProductDb.Product.{@productCategory},",
				"          {@productClass} = ProductDb.Product.{@productClass},",
				"          {@salable} = ProductDb.Product.{@salable},",
				"          {@statusCode} = ProductDb.Product.{@statusCode},",
				"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
				"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
				"          CanAdds = ProductDb.Product.CanAdds,",
				"          Categories = ProductDb.Product.Categories,",
				"          CategoryMenus = ProductDb.Product.CategoryMenus,",
				"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
				"          Choices = ProductDb.Product.Choices,",
				"          Comments = ProductDb.Product.Comments,",
				"          Composition = ProductDb.Product.Composition,",
				"          ContainerVM = ProductDb.Product.ContainerVM,",
				"          {@name} = ProductDb.Product.CustomParameters.Parameter.{@name},",
				"          {@value} = ProductDb.Product.CustomParameters.Parameter.{@value},",
				"          DayPartCode = ProductDb.Product.DayPartCode,",
				"          Department = ProductDb.Product.Department,",
				"          DisplayOrder = ProductDb.Product.DisplayOrder,",
				"          DisplayWaste = ProductDb.Product.DisplayWaste,",
				"          Distribution = ProductDb.Product.Distribution,",
				"          DummyProduct = ProductDb.Product.DummyProduct,",
				"          FamilyGroup = ProductDb.Product.FamilyGroup,",
				"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
				"          Presentation = ProductDb.Product.Presentation,",
				"          PriceList = ProductDb.Product.PriceList,",
				"          ProductCode = ProductDb.Product.ProductCode,",
				"          ProductUnit = ProductDb.Product.ProductUnit,",
				"          Production = ProductDb.Product.Production,",
				"          SalesType = ProductDb.Product.SalesType,",
				"          Secondary = ProductDb.Product.Secondary,",
				"          SizeSelection = ProductDb.Product.SizeSelection,",
				"          SmartReminder = ProductDb.Product.SmartReminder,",
				"          StationGroup = ProductDb.Product.StationGroup,",
				"          SubstitutionList = ProductDb.Product.SubstitutionList,",
				"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
				"          Upsizable = ProductDb.Product.Upsizable",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenProductCustomParameters",
				"XMLFileSource foldDown(unroll(ProductDb.Product.Distribution.Point, ProductDb.Product),",
				"     mapColumn(",
				"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
				"          {@modified} = ProductDb.Product.{@modified},",
				"          {@productCategory} = ProductDb.Product.{@productCategory},",
				"          {@productClass} = ProductDb.Product.{@productClass},",
				"          {@salable} = ProductDb.Product.{@salable},",
				"          {@statusCode} = ProductDb.Product.{@statusCode},",
				"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
				"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
				"          CanAdds = ProductDb.Product.CanAdds,",
				"          Categories = ProductDb.Product.Categories,",
				"          CategoryMenus = ProductDb.Product.CategoryMenus,",
				"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
				"          Choices = ProductDb.Product.Choices,",
				"          Comments = ProductDb.Product.Comments,",
				"          Composition = ProductDb.Product.Composition,",
				"          ContainerVM = ProductDb.Product.ContainerVM,",
				"          CustomParameters = ProductDb.Product.CustomParameters,",
				"          DayPartCode = ProductDb.Product.DayPartCode,",
				"          Department = ProductDb.Product.Department,",
				"          DisplayOrder = ProductDb.Product.DisplayOrder,",
				"          DisplayWaste = ProductDb.Product.DisplayWaste,",
				"          Point = ProductDb.Product.Distribution.Point,",
				"          DummyProduct = ProductDb.Product.DummyProduct,",
				"          FamilyGroup = ProductDb.Product.FamilyGroup,",
				"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
				"          Presentation = ProductDb.Product.Presentation,",
				"          PriceList = ProductDb.Product.PriceList,",
				"          ProductCode = ProductDb.Product.ProductCode,",
				"          ProductUnit = ProductDb.Product.ProductUnit,",
				"          Production = ProductDb.Product.Production,",
				"          SalesType = ProductDb.Product.SalesType,",
				"          Secondary = ProductDb.Product.Secondary,",
				"          SizeSelection = ProductDb.Product.SizeSelection,",
				"          SmartReminder = ProductDb.Product.SmartReminder,",
				"          StationGroup = ProductDb.Product.StationGroup,",
				"          SubstitutionList = ProductDb.Product.SubstitutionList,",
				"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
				"          Upsizable = ProductDb.Product.Upsizable",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenProductDistribution",
				"XMLFileSource foldDown(unroll(ProductDb.Product.PriceList.PriceTag.Pricing, ProductDb.Product),",
				"     mapColumn(",
				"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
				"          {@modified} = ProductDb.Product.{@modified},",
				"          {@productCategory} = ProductDb.Product.{@productCategory},",
				"          {@productClass} = ProductDb.Product.{@productClass},",
				"          {@salable} = ProductDb.Product.{@salable},",
				"          {@statusCode} = ProductDb.Product.{@statusCode},",
				"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
				"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
				"          CanAdds = ProductDb.Product.CanAdds,",
				"          Categories = ProductDb.Product.Categories,",
				"          CategoryMenus = ProductDb.Product.CategoryMenus,",
				"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
				"          Choices = ProductDb.Product.Choices,",
				"          Comments = ProductDb.Product.Comments,",
				"          Composition = ProductDb.Product.Composition,",
				"          ContainerVM = ProductDb.Product.ContainerVM,",
				"          CustomParameters = ProductDb.Product.CustomParameters,",
				"          DayPartCode = ProductDb.Product.DayPartCode,",
				"          Department = ProductDb.Product.Department,",
				"          DisplayOrder = ProductDb.Product.DisplayOrder,",
				"          DisplayWaste = ProductDb.Product.DisplayWaste,",
				"          Distribution = ProductDb.Product.Distribution,",
				"          DummyProduct = ProductDb.Product.DummyProduct,",
				"          FamilyGroup = ProductDb.Product.FamilyGroup,",
				"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
				"          Presentation = ProductDb.Product.Presentation,",
				"          {@priceCode} = ProductDb.Product.PriceList.PriceTag.Pricing.{@priceCode},",
				"          Price = ProductDb.Product.PriceList.PriceTag.Pricing.Price,",
				"          {@entry} = ProductDb.Product.PriceList.PriceTag.Pricing.Tax.{@entry},",
				"          {@rule} = ProductDb.Product.PriceList.PriceTag.Pricing.Tax.{@rule},",
				"          {@taxCode} = ProductDb.Product.PriceList.PriceTag.Pricing.Tax.{@taxCode},",
				"          ProductCode = ProductDb.Product.ProductCode,",
				"          ProductUnit = ProductDb.Product.ProductUnit,",
				"          Production = ProductDb.Product.Production,",
				"          SalesType = ProductDb.Product.SalesType,",
				"          Secondary = ProductDb.Product.Secondary,",
				"          SizeSelection = ProductDb.Product.SizeSelection,",
				"          SmartReminder = ProductDb.Product.SmartReminder,",
				"          StationGroup = ProductDb.Product.StationGroup,",
				"          SubstitutionList = ProductDb.Product.SubstitutionList,",
				"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
				"          Upsizable = ProductDb.Product.Upsizable",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenProductPriceList",
				"XMLFileSource foldDown(unroll(ProductDb.Product.Production.KVSRoutes.Route, ProductDb.Product),",
				"     mapColumn(",
				"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
				"          {@modified} = ProductDb.Product.{@modified},",
				"          {@productCategory} = ProductDb.Product.{@productCategory},",
				"          {@productClass} = ProductDb.Product.{@productClass},",
				"          {@salable} = ProductDb.Product.{@salable},",
				"          {@statusCode} = ProductDb.Product.{@statusCode},",
				"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
				"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
				"          CanAdds = ProductDb.Product.CanAdds,",
				"          Categories = ProductDb.Product.Categories,",
				"          CategoryMenus = ProductDb.Product.CategoryMenus,",
				"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
				"          Choices = ProductDb.Product.Choices,",
				"          Comments = ProductDb.Product.Comments,",
				"          Composition = ProductDb.Product.Composition,",
				"          ContainerVM = ProductDb.Product.ContainerVM,",
				"          CustomParameters = ProductDb.Product.CustomParameters,",
				"          DayPartCode = ProductDb.Product.DayPartCode,",
				"          Department = ProductDb.Product.Department,",
				"          DisplayOrder = ProductDb.Product.DisplayOrder,",
				"          DisplayWaste = ProductDb.Product.DisplayWaste,",
				"          Distribution = ProductDb.Product.Distribution,",
				"          DummyProduct = ProductDb.Product.DummyProduct,",
				"          FamilyGroup = ProductDb.Product.FamilyGroup,",
				"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
				"          Presentation = ProductDb.Product.Presentation,",
				"          PriceList = ProductDb.Product.PriceList,",
				"          ProductCode = ProductDb.Product.ProductCode,",
				"          ProductUnit = ProductDb.Product.ProductUnit,",
				"          AutoGrill = ProductDb.Product.Production.AutoGrill,",
				"          BunPrepTypeID = ProductDb.Product.Production.BunPrepTypeID,",
				"          {@doNotPrint} = ProductDb.Product.Production.Grillable.{@doNotPrint},",
				"          status1 = ProductDb.Product.Production.Grillable.{@status},",
				"          routeid = ProductDb.Product.Production.KVSRoutes.Route.{@id},",
				"          {@displayGrillInstructions} = ProductDb.Product.Production.KVSdisplay.{@displayGrillInstructions},",
				"          {@doNotDecompVM} = ProductDb.Product.Production.KVSdisplay.{@doNotDecompVM},",
				"          {@showOnMFY} = ProductDb.Product.Production.KVSdisplay.{@showOnMFY},",
				"          {@showOnMain} = ProductDb.Product.Production.KVSdisplay.{@showOnMain},",
				"          {@showOnSummary} = ProductDb.Product.Production.KVSdisplay.{@showOnSummary},",
				"          PPG = ProductDb.Product.Production.PPG,",
				"          {@autoBumpTimeout} = ProductDb.Product.Production.RapidTurnoverMonitor.{@autoBumpTimeout},",
				"          {@priority} = ProductDb.Product.Production.RapidTurnoverMonitor.{@priority},",
				"          {@threshold} = ProductDb.Product.Production.RapidTurnoverMonitor.{@threshold},",
				"          {@type} = ProductDb.Product.Production.RapidTurnoverMonitor.{@type},",
				"          SubstitutionGrill = ProductDb.Product.Production.SubstitutionGrill,",
				"          TriggerDisplayOnOrb = ProductDb.Product.Production.TriggerDisplayOnOrb,",
				"          {@isBunBuffer} = ProductDb.Product.Production.UseBufferEngine.{@isBunBuffer},",
				"          status2 = ProductDb.Product.Production.UseBufferEngine.{@status},",
				"          displayNumbersInsteadofModifiers = ProductDb.Product.Production.displayNumbersInsteadofModifiers,",
				"          SalesType = ProductDb.Product.SalesType,",
				"          Secondary = ProductDb.Product.Secondary,",
				"          SizeSelection = ProductDb.Product.SizeSelection,",
				"          SmartReminder = ProductDb.Product.SmartReminder,",
				"          StationGroup = ProductDb.Product.StationGroup,",
				"          SubstitutionList = ProductDb.Product.SubstitutionList,",
				"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
				"          Upsizable = ProductDb.Product.Upsizable",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenProductProductionKVSRoute",
				"XMLFileSource foldDown(unroll(ProductDb.Product.SizeSelection.Size, ProductDb.Product),",
				"     mapColumn(",
				"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
				"          {@modified} = ProductDb.Product.{@modified},",
				"          {@productCategory} = ProductDb.Product.{@productCategory},",
				"          {@productClass} = ProductDb.Product.{@productClass},",
				"          {@salable} = ProductDb.Product.{@salable},",
				"          {@statusCode} = ProductDb.Product.{@statusCode},",
				"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
				"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
				"          CanAdds = ProductDb.Product.CanAdds,",
				"          Categories = ProductDb.Product.Categories,",
				"          CategoryMenus = ProductDb.Product.CategoryMenus,",
				"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
				"          Choices = ProductDb.Product.Choices,",
				"          Comments = ProductDb.Product.Comments,",
				"          Composition = ProductDb.Product.Composition,",
				"          ContainerVM = ProductDb.Product.ContainerVM,",
				"          CustomParameters = ProductDb.Product.CustomParameters,",
				"          DayPartCode = ProductDb.Product.DayPartCode,",
				"          Department = ProductDb.Product.Department,",
				"          DisplayOrder = ProductDb.Product.DisplayOrder,",
				"          DisplayWaste = ProductDb.Product.DisplayWaste,",
				"          Distribution = ProductDb.Product.Distribution,",
				"          DummyProduct = ProductDb.Product.DummyProduct,",
				"          FamilyGroup = ProductDb.Product.FamilyGroup,",
				"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
				"          Presentation = ProductDb.Product.Presentation,",
				"          PriceList = ProductDb.Product.PriceList,",
				"          ProductCode = ProductDb.Product.ProductCode,",
				"          ProductUnit = ProductDb.Product.ProductUnit,",
				"          Production = ProductDb.Product.Production,",
				"          SalesType = ProductDb.Product.SalesType,",
				"          Secondary = ProductDb.Product.Secondary,",
				"          {@code} = ProductDb.Product.SizeSelection.Size.{@code},",
				"          SIZEentry = ProductDb.Product.SizeSelection.Size.{@entry},",
				"          {@showDimensionOnRCTLocalPromotion} = ProductDb.Product.SizeSelection.Size.{@showDimensionOnRCTLocalPromotion},",
				"          {@showDimensionToCustomer} = ProductDb.Product.SizeSelection.Size.{@showDimensionToCustomer},",
				"          SmartReminder = ProductDb.Product.SmartReminder,",
				"          StationGroup = ProductDb.Product.StationGroup,",
				"          SubstitutionList = ProductDb.Product.SubstitutionList,",
				"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
				"          Upsizable = ProductDb.Product.Upsizable",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenProductSizeSelection",
				"XMLFileSource foldDown(unroll(ProductDb.Product.SubstitutionList.Item, ProductDb.Product),",
				"     mapColumn(",
				"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
				"          {@modified} = ProductDb.Product.{@modified},",
				"          {@productCategory} = ProductDb.Product.{@productCategory},",
				"          {@productClass} = ProductDb.Product.{@productClass},",
				"          {@salable} = ProductDb.Product.{@salable},",
				"          {@statusCode} = ProductDb.Product.{@statusCode},",
				"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
				"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
				"          CanAdds = ProductDb.Product.CanAdds,",
				"          Categories = ProductDb.Product.Categories,",
				"          CategoryMenus = ProductDb.Product.CategoryMenus,",
				"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
				"          Choices = ProductDb.Product.Choices,",
				"          Comments = ProductDb.Product.Comments,",
				"          Composition = ProductDb.Product.Composition,",
				"          ContainerVM = ProductDb.Product.ContainerVM,",
				"          CustomParameters = ProductDb.Product.CustomParameters,",
				"          DayPartCode = ProductDb.Product.DayPartCode,",
				"          Department = ProductDb.Product.Department,",
				"          DisplayOrder = ProductDb.Product.DisplayOrder,",
				"          DisplayWaste = ProductDb.Product.DisplayWaste,",
				"          Distribution = ProductDb.Product.Distribution,",
				"          DummyProduct = ProductDb.Product.DummyProduct,",
				"          FamilyGroup = ProductDb.Product.FamilyGroup,",
				"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
				"          Presentation = ProductDb.Product.Presentation,",
				"          PriceList = ProductDb.Product.PriceList,",
				"          ProductCode = ProductDb.Product.ProductCode,",
				"          ProductUnit = ProductDb.Product.ProductUnit,",
				"          Production = ProductDb.Product.Production,",
				"          SalesType = ProductDb.Product.SalesType,",
				"          Secondary = ProductDb.Product.Secondary,",
				"          SizeSelection = ProductDb.Product.SizeSelection,",
				"          SmartReminder = ProductDb.Product.SmartReminder,",
				"          StationGroup = ProductDb.Product.StationGroup,",
				"          Iitemid = ProductDb.Product.SubstitutionList.Item.{@id},",
				"          ItemproductCode = ProductDb.Product.SubstitutionList.Item.{@productCode},",
				"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
				"          Upsizable = ProductDb.Product.Upsizable",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenSubstitutionList",
				"XMLFileSource foldDown(unroll(ProductDb.Product),",
				"     mapColumn(",
				"          {@version} = ProductDb.{@version},",
				"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
				"          {@modified} = ProductDb.Product.{@modified},",
				"          {@productCategory} = ProductDb.Product.{@productCategory},",
				"          {@productClass} = ProductDb.Product.{@productClass},",
				"          {@salable} = ProductDb.Product.{@salable},",
				"          {@statusCode} = ProductDb.Product.{@statusCode},",
				"          DisplayPOS = ProductDb.Product.AutoCondimentDisplay.DisplayPOS,",
				"          DisplayPOSEvent = ProductDb.Product.AutoCondimentDisplay.DisplayPOSEvent,",
				"          DisplayPickList = ProductDb.Product.AutoCondimentDisplay.DisplayPickList,",
				"          DisplayReceipt = ProductDb.Product.AutoCondimentDisplay.DisplayReceipt,",
				"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
				"          CanAdds = ProductDb.Product.CanAdds,",
				"          Categories = ProductDb.Product.Categories,",
				"          CategoryMenus = ProductDb.Product.CategoryMenus,",
				"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
				"          Choices = ProductDb.Product.Choices,",
				"          Comments = ProductDb.Product.Comments,",
				"          Composition = ProductDb.Product.Composition,",
				"          ContainerVM = ProductDb.Product.ContainerVM,",
				"          CustomParameters = ProductDb.Product.CustomParameters,",
				"          DayPartCode = ProductDb.Product.DayPartCode,",
				"          Departmentid = ProductDb.Product.Department.Id,",
				"          Classdepartmentid = ProductDb.Product.Department.ClassDepartment.Id,",
				"          Subclassdepartmentid = ProductDb.Product.Department.ClassDepartment.SubClassDepartment.Id,",
				"          DisplayOrder = ProductDb.Product.DisplayOrder,",
				"          DisplayWaste = ProductDb.Product.DisplayWaste,",
				"          Distribution = ProductDb.Product.Distribution,",
				"          DummyProduct = ProductDb.Product.DummyProduct,",
				"          FamilyGroup = ProductDb.Product.FamilyGroup,",
				"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
				"          BGNormal = ProductDb.Product.Presentation.BGNormal,",
				"          BGPressed = ProductDb.Product.Presentation.BGPressed,",
				"          BitmapName = ProductDb.Product.Presentation.BitmapName,",
				"          CSOCartImageName = ProductDb.Product.Presentation.CSOCartImageName,",
				"          CSOCircleImageName = ProductDb.Product.Presentation.CSOCircleImageName,",
				"          CSODimensionImageName = ProductDb.Product.Presentation.CSODimensionImageName,",
				"          CSOGrillImageName = ProductDb.Product.Presentation.CSOGrillImageName,",
				"          CSOLargeImageName = ProductDb.Product.Presentation.CSOLargeImageName,",
				"          CSOSmallImageName = ProductDb.Product.Presentation.CSOSmallImageName,",
				"          CSOValueMealImage = ProductDb.Product.Presentation.CSOValueMealImage,",
				"          CytPreviewImage = ProductDb.Product.Presentation.CytPreviewImage,",
				"          CytPreviewImageBottom = ProductDb.Product.Presentation.CytPreviewImageBottom,",
				"          DisplayColor = ProductDb.Product.Presentation.DisplayColor,",
				"          FGNormal = ProductDb.Product.Presentation.FGNormal,",
				"          FGPressed = ProductDb.Product.Presentation.FGPressed,",
				"          GrillBitmapName = ProductDb.Product.Presentation.GrillBitmapName,",
				"          KVSColor = ProductDb.Product.Presentation.KVSColor,",
				"          SmallBitmapName = ProductDb.Product.Presentation.SmallBitmapName,",
				"          value = ProductDb.Product.Presentation.{_value_},",
				"          PriceList = ProductDb.Product.PriceList,",
				"          ProductCode = ProductDb.Product.ProductCode,",
				"          ProductUnit = ProductDb.Product.ProductUnit,",
				"          Production = ProductDb.Product.Production,",
				"          {@eatin} = ProductDb.Product.SalesType.{@eatin},",
				"          {@other} = ProductDb.Product.SalesType.{@other},",
				"          {@takeout} = ProductDb.Product.SalesType.{@takeout},",
				"          Secondary = ProductDb.Product.Secondary,",
				"          SizeSelection = ProductDb.Product.SizeSelection,",
				"          {smartreminder.group} = ProductDb.Product.SmartReminder.{@group},",
				"          {smartreminder.Priority} = ProductDb.Product.SmartReminder.Priority,",
				"          StationGroup = ProductDb.Product.StationGroup,",
				"          SubstitutionList = ProductDb.Product.SubstitutionList,",
				"          {@endTime} = ProductDb.Product.TimeRestrictions.AllowedTime.{@endTime},",
				"          {@startTime} = ProductDb.Product.TimeRestrictions.AllowedTime.{@startTime},",
				"          Upsizable = ProductDb.Product.Upsizable",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenProduct",
				"FlattenProductDB sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     mapColumn(",
				"          {@version},",
				"          {@grillGroup},",
				"          {@modified},",
				"          {@productCategory},",
				"          {@productClass},",
				"          {@salable},",
				"          {@statusCode},",
				"          CSOHasLimitedTimeDiscount,",
				"          ChoiceGroup,",
				"          ContainerVM,",
				"          DayPartCode,",
				"          DisplayOrder,",
				"          DisplayWaste,",
				"          DummyProduct,",
				"          FamilyGroup,",
				"          IsMutuallyExclusive,",
				"          ProductCode,",
				"          ProductUnit,",
				"          Secondary,",
				"          StationGroup,",
				"          Upsizable",
				"     )) ~> WriteProductDB",
				"FlattenProductCanAdds sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          {@grillGroup},",
				"          {@modified},",
				"          {@productCategory},",
				"          {@productClass},",
				"          {@salable},",
				"          {@statusCode},",
				"          CSOHasLimitedTimeDiscount,",
				"          ChargeThreshold,",
				"          CostInclusive,",
				"          DefaultQuantity,",
				"          DisplayOnCSO,",
				"          MaxQuantity,",
				"          MinQuantity,",
				"          ProductCode2,",
				"          ProductCodeImpactedOnRTM,",
				"          RefundThreshold,",
				"          setParentProductOutage,",
				"          ChoiceGroup,",
				"          ContainerVM,",
				"          DayPartCode,",
				"          DisplayOrder,",
				"          DisplayWaste,",
				"          DummyProduct,",
				"          FamilyGroup,",
				"          IsMutuallyExclusive,",
				"          ProductCodem,",
				"          ProductUnit,",
				"          Secondary,",
				"          StationGroup,",
				"          Upsizable",
				"     )) ~> WriteProductCanAdds",
				"FlattenProductCategories sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          {@grillGroup},",
				"          {@modified},",
				"          {@productCategory},",
				"          {@productClass},",
				"          {@salable},",
				"          {@statusCode},",
				"          CSOHasLimitedTimeDiscount,",
				"          {@categoryID},",
				"          {@displaySizeSelection},",
				"          {@sequence},",
				"          ChoiceGroup,",
				"          ContainerVM,",
				"          DayPartCode,",
				"          DisplayOrder,",
				"          DisplayWaste,",
				"          DummyProduct,",
				"          FamilyGroup,",
				"          IsMutuallyExclusive,",
				"          ProductCode,",
				"          ProductUnit,",
				"          Secondary,",
				"          StationGroup,",
				"          Upsizable",
				"     )) ~> WriteProductCategories",
				"FlattenCategoryMenus sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          {@grillGroup},",
				"          {@modified},",
				"          {@productCategory},",
				"          {@productClass},",
				"          {@salable},",
				"          {@statusCode},",
				"          CSOHasLimitedTimeDiscount,",
				"          {@categoryID},",
				"          ChoiceGroup,",
				"          ContainerVM,",
				"          DayPartCode,",
				"          DisplayOrder,",
				"          DisplayWaste,",
				"          DummyProduct,",
				"          FamilyGroup,",
				"          IsMutuallyExclusive,",
				"          ProductCode,",
				"          ProductUnit,",
				"          Secondary,",
				"          StationGroup,",
				"          Upsizable",
				"     )) ~> WriteCategoryMenus",
				"FlattenProductChoices sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          {@grillGroup},",
				"          {@modified},",
				"          {@productCategory},",
				"          {@productClass},",
				"          {@salable},",
				"          {@statusCode},",
				"          CSOHasLimitedTimeDiscount,",
				"          ChoiceGroup,",
				"          Anchor,",
				"          ChargeThreshold,",
				"          CostInclusive,",
				"          DefaultProduct,",
				"          DefaultQuantity,",
				"          FlexibleChoice,",
				"          MaxQuantity,",
				"          MinQuantity,",
				"          PriceCalculationMode,",
				"          choiceProductCode = CHOICEproductcode,",
				"          ReferenceProduct,",
				"          RefundThreshold,",
				"          setParentProductOutage,",
				"          ContainerVM,",
				"          DayPartCode,",
				"          DisplayOrder,",
				"          DisplayWaste,",
				"          DummyProduct,",
				"          FamilyGroup,",
				"          IsMutuallyExclusive,",
				"          ProductCode,",
				"          ProductUnit,",
				"          Secondary,",
				"          StationGroup,",
				"          Upsizable",
				"     )) ~> WriteProductChoices",
				"FlattenProductComments sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          {@grillGroup},",
				"          {@modified},",
				"          {@productCategory},",
				"          {@productClass},",
				"          {@salable},",
				"          {@statusCode},",
				"          CSOHasLimitedTimeDiscount,",
				"          ChoiceGroup,",
				"          ChargeThreshold,",
				"          CostInclusive,",
				"          DefaultQuantity,",
				"          DisplayOnCSO,",
				"          MaxQuantity,",
				"          MinQuantity,",
				"          {comment.ProductCode},",
				"          ProductCodeImpactedOnRTM,",
				"          RefundThreshold,",
				"          setParentProductOutage,",
				"          ContainerVM,",
				"          DayPartCode,",
				"          DisplayOrder,",
				"          DisplayWaste,",
				"          DummyProduct,",
				"          FamilyGroup,",
				"          IsMutuallyExclusive,",
				"          ProductCode,",
				"          ProductUnit,",
				"          Secondary,",
				"          StationGroup,",
				"          Upsizable",
				"     )) ~> WriteProductComments",
				"FlattenProductComposition sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          {@grillGroup},",
				"          {@modified},",
				"          {@productCategory},",
				"          {@productClass},",
				"          {@salable},",
				"          {@statusCode},",
				"          CSOHasLimitedTimeDiscount,",
				"          ChoiceGroup,",
				"          Anchor,",
				"          ChargeThreshold,",
				"          CostInclusive,",
				"          DefaultQuantity,",
				"          FlexibleChoice,",
				"          ForceCompDisplay,",
				"          MaxQuantity,",
				"          MinQuantity,",
				"          PlainGrill,",
				"          PriceCalculationMode,",
				"          {composition.ProductCode},",
				"          ProductCodeImpactedOnRTM,",
				"          RefundThreshold,",
				"          SmartGrill,",
				"          setParentProductOutage,",
				"          ContainerVM,",
				"          DayPartCode,",
				"          DisplayOrder,",
				"          DisplayWaste,",
				"          DummyProduct,",
				"          FamilyGroup,",
				"          IsMutuallyExclusive,",
				"          ProductCode,",
				"          ProductUnit,",
				"          Secondary,",
				"          StationGroup,",
				"          Upsizable",
				"     )) ~> WriteProductComposition",
				"FlattenProductCustomParameters sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          {@grillGroup},",
				"          {@modified},",
				"          {@productCategory},",
				"          {@productClass},",
				"          {@salable},",
				"          {@statusCode},",
				"          CSOHasLimitedTimeDiscount,",
				"          ChoiceGroup,",
				"          ContainerVM,",
				"          {@name},",
				"          {@value},",
				"          DayPartCode,",
				"          DisplayOrder,",
				"          DisplayWaste,",
				"          DummyProduct,",
				"          FamilyGroup,",
				"          IsMutuallyExclusive,",
				"          ProductCode,",
				"          ProductUnit,",
				"          Secondary,",
				"          StationGroup,",
				"          Upsizable",
				"     )) ~> WriteProductCustomParameters",
				"FlattenProductDistribution sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          {@grillGroup},",
				"          {@modified},",
				"          {@productCategory},",
				"          {@productClass},",
				"          {@salable},",
				"          {@statusCode},",
				"          CSOHasLimitedTimeDiscount,",
				"          ChoiceGroup,",
				"          ContainerVM,",
				"          DayPartCode,",
				"          DisplayOrder,",
				"          DisplayWaste,",
				"          Point,",
				"          DummyProduct,",
				"          FamilyGroup,",
				"          IsMutuallyExclusive,",
				"          ProductCode,",
				"          ProductUnit,",
				"          Secondary,",
				"          StationGroup,",
				"          Upsizable",
				"     )) ~> WriteProductDistribution",
				"FlattenProductPriceList sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          {@grillGroup},",
				"          {@modified},",
				"          {@productCategory},",
				"          {@productClass},",
				"          {@salable},",
				"          {@statusCode},",
				"          CSOHasLimitedTimeDiscount,",
				"          ChoiceGroup,",
				"          ContainerVM,",
				"          DayPartCode,",
				"          DisplayOrder,",
				"          DisplayWaste,",
				"          DummyProduct,",
				"          FamilyGroup,",
				"          IsMutuallyExclusive,",
				"          {@priceCode},",
				"          Price,",
				"          {@entry},",
				"          {@rule},",
				"          {@taxCode},",
				"          ProductCode,",
				"          ProductUnit,",
				"          Secondary,",
				"          StationGroup,",
				"          Upsizable",
				"     )) ~> WriteProductPriceList",
				"FlattenProductProductionKVSRoute sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          {@grillGroup},",
				"          {@modified},",
				"          {@productCategory},",
				"          {@productClass},",
				"          {@salable},",
				"          {@statusCode},",
				"          CSOHasLimitedTimeDiscount,",
				"          ChoiceGroup,",
				"          ContainerVM,",
				"          DayPartCode,",
				"          DisplayOrder,",
				"          DisplayWaste,",
				"          DummyProduct,",
				"          FamilyGroup,",
				"          IsMutuallyExclusive,",
				"          ProductCode,",
				"          ProductUnit,",
				"          AutoGrill,",
				"          BunPrepTypeID,",
				"          {@doNotPrint},",
				"          status1,",
				"          routeid,",
				"          {@displayGrillInstructions},",
				"          {@doNotDecompVM},",
				"          {@showOnMFY},",
				"          {@showOnMain},",
				"          {@showOnSummary},",
				"          PPG,",
				"          {@autoBumpTimeout},",
				"          {@priority},",
				"          {@threshold},",
				"          {@type},",
				"          SubstitutionGrill,",
				"          TriggerDisplayOnOrb,",
				"          {@isBunBuffer},",
				"          status2,",
				"          displayNumbersInsteadofModifiers,",
				"          Secondary,",
				"          StationGroup,",
				"          Upsizable",
				"     )) ~> WriteProductProductionKVSRoute",
				"FlattenProductSizeSelection sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          {@grillGroup},",
				"          {@modified},",
				"          {@productCategory},",
				"          {@productClass},",
				"          {@salable},",
				"          {@statusCode},",
				"          CSOHasLimitedTimeDiscount,",
				"          ChoiceGroup,",
				"          ContainerVM,",
				"          DayPartCode,",
				"          DisplayOrder,",
				"          DisplayWaste,",
				"          DummyProduct,",
				"          FamilyGroup,",
				"          IsMutuallyExclusive,",
				"          ProductCode,",
				"          ProductUnit,",
				"          Secondary,",
				"          {@code},",
				"          sizeentry = SIZEentry,",
				"          {@showDimensionOnRCTLocalPromotion},",
				"          {@showDimensionToCustomer},",
				"          StationGroup,",
				"          Upsizable",
				"     )) ~> WriteProductSizeSelection",
				"FlattenSubstitutionList sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          {@grillGroup},",
				"          {@modified},",
				"          {@productCategory},",
				"          {@productClass},",
				"          {@salable},",
				"          {@statusCode},",
				"          CSOHasLimitedTimeDiscount,",
				"          ChoiceGroup,",
				"          ContainerVM,",
				"          DayPartCode,",
				"          DisplayOrder,",
				"          DisplayWaste,",
				"          DummyProduct,",
				"          FamilyGroup,",
				"          IsMutuallyExclusive,",
				"          ProductCode,",
				"          ProductUnit,",
				"          Secondary,",
				"          StationGroup,",
				"          Itemid = Iitemid,",
				"          ItemproductCode,",
				"          Upsizable",
				"     )) ~> WriteSubstitutionList",
				"FlattenProduct sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          {@version},",
				"          {@grillGroup},",
				"          {@modified},",
				"          {@productCategory},",
				"          {@productClass},",
				"          {@salable},",
				"          {@statusCode},",
				"          DisplayPOS,",
				"          DisplayPOSEvent,",
				"          DisplayPickList,",
				"          DisplayReceipt,",
				"          CSOHasLimitedTimeDiscount,",
				"          ChoiceGroup,",
				"          ContainerVM,",
				"          DayPartCode,",
				"          Departmentid,",
				"          Classdepartmentid,",
				"          Subclassdepartmentid,",
				"          DisplayOrder,",
				"          DisplayWaste,",
				"          DummyProduct,",
				"          FamilyGroup,",
				"          IsMutuallyExclusive,",
				"          BGNormal,",
				"          BGPressed,",
				"          BitmapName,",
				"          CSOCartImageName,",
				"          CSOCircleImageName,",
				"          CSODimensionImageName,",
				"          CSOGrillImageName,",
				"          CSOLargeImageName,",
				"          CSOSmallImageName,",
				"          CSOValueMealImage,",
				"          CytPreviewImage,",
				"          CytPreviewImageBottom,",
				"          DisplayColor,",
				"          FGNormal,",
				"          FGPressed,",
				"          GrillBitmapName,",
				"          KVSColor,",
				"          SmallBitmapName,",
				"          value,",
				"          ProductCode,",
				"          ProductUnit,",
				"          {@eatin},",
				"          {@other},",
				"          {@takeout},",
				"          Secondary,",
				"          group = {smartreminder.group},",
				"          Priority = {smartreminder.Priority},",
				"          StationGroup,",
				"          {@endTime},",
				"          {@startTime},",
				"          Upsizable",
				"     )) ~> WriteProduct"
			]
		}
	}
}