{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "RFSADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/RFS_COGS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ReadCOGSSource",
						"description": "Using This activity, you will get total count of zip files are present at source location.\nTotal count will be output result of this activity & input for foreach activity.\n\n",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "CheckServerStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RFS_COGS_SOURCE_FILE",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@variables('source_container')",
										"type": "Expression"
									},
									"filename": {
										"value": "@string('')",
										"type": "Expression"
									},
									"folder": "@string('')"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ProcessFiles",
						"description": "This activity has multiple inner activity inside.\nNumber of Runs of this activity equal to total count of input files.\nIt will process each file parallelly. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "TruncateTempTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ReadCOGSSource').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ExtractZIPFiles",
									"description": "This activity use to extract zip files.\nAfter extraction Daily sales, Food paper cost & Inventory cost control these three csv files will generate in temp container(cogstemp).",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "RFS_COGS_EXTRACTZIP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"source_container": {
												"value": "@variables('source_container')",
												"type": "Expression"
											},
											"temp_container": {
												"value": "@variables('temp_container')",
												"type": "Expression"
											},
											"source_file": {
												"value": "@item().name",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "ProcessCSVFiles",
									"description": "Process each csv file.\nDaily Sales files data map to Daily Sales table in database.\nsame process with Food Paper Cost and Inventory Cost Control.\nEach csv file data map to their respected database tables.",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ExtractZIPFiles",
											"dependencyConditions": [
												"Succeeded",
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "RFS_COGS_PROCESS_CSV",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"temp_container": {
												"value": "@variables('temp_container')",
												"type": "Expression"
											},
											"temp_folder": {
												"value": "@item().name",
												"type": "Expression"
											},
											"dailysales_file": {
												"value": "@variables('DailySales_File')",
												"type": "Expression"
											},
											"foodpaper_file": {
												"value": "@variables('FoodPaper_File')",
												"type": "Expression"
											},
											"inventory_file": {
												"value": "@variables('Inventory_File')",
												"type": "Expression"
											},
											"db_name": {
												"value": "@variables('cogs_dbName')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "MoveFilestoSuccess",
									"description": "If previous all activity gets succussed move file to cogsarch container. ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ProcessCSVFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "RFS_COGS_SOURCE_ZIP",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('source_container')",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												},
												"folder": {
													"value": "@string('')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "RFS_COGS_CONTAINER",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('arch_container')",
													"type": "Expression"
												},
												"folder": {
													"value": "@string('')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "MoveFilestoFailure",
									"description": "If  any previous activity gets failed then move file to cogserr container. ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ProcessCSVFiles",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "RFS_COGS_SOURCE_ZIP",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('source_container')",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												},
												"folder": {
													"value": "@string('')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "RFS_COGS_CONTAINER",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('err_container')",
													"type": "Expression"
												},
												"folder": {
													"value": "@string('')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "DeleteTempFiles",
						"description": "This activity performs deletion of all files from cogs temp container.",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "ExecuteCOGSScripts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RFS_COGS_CONTAINER",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@variables('temp_container')",
										"type": "Expression"
									},
									"folder": {
										"value": "@string('')",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "TruncateTempTables",
						"description": "Run [SP_TRUNCATE_TEMP_TABLES] stored procedure to truncate all COGS staging tables.",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ReadCOGSSource",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_TRUNCATE_TEMP_TABLES]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('cogs_dbName')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteCOGSScripts",
						"description": "Execute [SP_COGS_ETL_POST] stored procedure.\nThis stored procedure has multiple store procedure inside.\nTo move staging tables data to their respected main tables.\n",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ProcessFiles",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_COGS_ETL_POST]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('cogs_dbName')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "CheckServerStatus",
						"description": "This activity check server status to proceed ahead. If server status is online activity will succeed, if server is offline activity will Faile & throw an error message.",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SERVER_CHECK]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('cogs_dbName')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"source_container": {
						"type": "String",
						"defaultValue": "cogsetl"
					},
					"temp_container": {
						"type": "String",
						"defaultValue": "cogstemp"
					},
					"arch_container": {
						"type": "String",
						"defaultValue": "cogsarch"
					},
					"err_container": {
						"type": "String",
						"defaultValue": "cogserr"
					},
					"DailySales_File": {
						"type": "String",
						"defaultValue": "DailySales.csv"
					},
					"FoodPaper_File": {
						"type": "String",
						"defaultValue": "FoodPaperCost.csv"
					},
					"Inventory_File": {
						"type": "String",
						"defaultValue": "InventoryControl.csv"
					},
					"cogs_dbName": {
						"type": "String",
						"defaultValue": "RFS_COGS_ETL"
					}
				},
				"folder": {
					"name": "Master Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-19T07:14:50Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_COGS_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ReadCOGSSource",
						"description": "Using This activity, you will get total count of zip files are present at source location.\nTotal count will be output result of this activity & input for foreach activity.\n\n",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "CheckServerStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RFS_COGS_SOURCE_FILE",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@variables('source_container')",
										"type": "Expression"
									},
									"filename": {
										"value": "@string('')",
										"type": "Expression"
									},
									"folder": "@string('')"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ProcessFiles",
						"description": "This activity has multiple inner activity inside.\nNumber of Runs of this activity equal to total count of input files.\nIt will process each file parallelly. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "TruncateTempTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ReadCOGSSource').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ExtractZIPFiles",
									"description": "This activity use to extract zip files.\nAfter extraction Daily sales, Food paper cost & Inventory cost control these three csv files will generate in temp container(cogstemp).",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "RFS_COGS_EXTRACTZIP_copy1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"source_container": {
												"value": "@variables('source_container')",
												"type": "Expression"
											},
											"temp_container": {
												"value": "@variables('temp_container')",
												"type": "Expression"
											},
											"source_file": {
												"value": "@item().name",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "ProcessCSVFiles",
									"description": "Process each csv file.\nDaily Sales files data map to Daily Sales table in database.\nsame process with Food Paper Cost and Inventory Cost Control.\nEach csv file data map to their respected database tables.",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ExtractZIPFiles",
											"dependencyConditions": [
												"Succeeded",
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "RFS_COGS_PROCESS_CSV_copy1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"temp_container": {
												"value": "@variables('temp_container')",
												"type": "Expression"
											},
											"temp_folder": {
												"value": "@item().name",
												"type": "Expression"
											},
											"dailysales_file": {
												"value": "@variables('DailySales_File')",
												"type": "Expression"
											},
											"foodpaper_file": {
												"value": "@variables('FoodPaper_File')",
												"type": "Expression"
											},
											"inventory_file": {
												"value": "@variables('Inventory_File')",
												"type": "Expression"
											},
											"db_name": {
												"value": "@variables('cogs_dbName')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "MoveFilestoSuccess",
									"description": "If previous all activity gets succussed move file to cogsarch container. ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ProcessCSVFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "RFS_COGS_SOURCE_ZIP",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('source_container')",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												},
												"folder": {
													"value": "@string('')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "RFS_COGS_CONTAINER",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('arch_container')",
													"type": "Expression"
												},
												"folder": {
													"value": "@string('')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "MoveFilestoFailure",
									"description": "If  any previous activity gets failed then move file to cogserr container. ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ProcessCSVFiles",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "RFS_COGS_SOURCE_ZIP",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('source_container')",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												},
												"folder": {
													"value": "@string('')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "RFS_COGS_CONTAINER",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('err_container')",
													"type": "Expression"
												},
												"folder": {
													"value": "@string('')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "DeleteTempFiles",
						"description": "This activity performs deletion of all files from cogs temp container.",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "ExecuteCOGSScripts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RFS_COGS_CONTAINER",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@variables('temp_container')",
										"type": "Expression"
									},
									"folder": {
										"value": "@string('')",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "TruncateTempTables",
						"description": "Run [SP_TRUNCATE_TEMP_TABLES] stored procedure to truncate all COGS staging tables.",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ReadCOGSSource",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_TRUNCATE_TEMP_TABLES]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('cogs_dbName')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteCOGSScripts",
						"description": "Execute [SP_COGS_ETL_POST] stored procedure.\nThis stored procedure has multiple store procedure inside.\nTo move staging tables data to their respected main tables.\n",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ProcessFiles",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_COGS_ETL_POST]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('cogs_dbName')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "CheckServerStatus",
						"description": "This activity check server status to proceed ahead. If server status is online activity will succeed, if server is offline activity will Faile & throw an error message.",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SERVER_CHECK]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('cogs_dbName')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"source_container": {
						"type": "String",
						"defaultValue": "cogsetltest"
					},
					"temp_container": {
						"type": "String",
						"defaultValue": "cogstemptest"
					},
					"arch_container": {
						"type": "String",
						"defaultValue": "cogsarchtest"
					},
					"err_container": {
						"type": "String",
						"defaultValue": "cogserrtest"
					},
					"DailySales_File": {
						"type": "String",
						"defaultValue": "DailySales.csv"
					},
					"FoodPaper_File": {
						"type": "String",
						"defaultValue": "FoodPaperCost.csv"
					},
					"Inventory_File": {
						"type": "String",
						"defaultValue": "InventoryControl.csv"
					},
					"cogs_dbName": {
						"type": "String",
						"defaultValue": "RFS_COGS_ETL_Test"
					}
				},
				"folder": {
					"name": "MASTER_TEST_PIPELINES"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-02T06:45:34Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_NAMESDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "checknamedbexist",
						"description": "It will first check the namedb file is exist in namedb container or not.\nIf name db file exist, it will process\n if not then it will not process ahead.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RFS_CONTAINER_FILE_INPUT",
								"type": "DatasetReference",
								"parameters": {
									"xml_filename": {
										"value": "@variables('namedbfilename')",
										"type": "Expression"
									},
									"containername": {
										"value": "@variables('namedbcontainer')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Ifnamedbexist",
						"description": "This activity has multiple inner activities.\nIt checks condition of namedb file exist or not. \nIf condition is true then inner activities will run.\nIf condition is false then false inner activities run\nas of now no activity for false condition. ",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "checknamedbexist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('checknamedbexist').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Run NamesDB Dataflow",
									"description": "This task will execute NAMESDB_DATAFLOW.\nThis dataflow has mapping of namedb XML to namedb staging table.\nSo it will directly transfer data in name db staging table from namedb XML",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "RFS_NAMESDB_DATAFLOW",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"XMLFileSource": {
													"xml_filename": {
														"value": "@variables('namedbfilename')",
														"type": "Expression"
													},
													"containername": {
														"value": "@variables('namedbcontainer')",
														"type": "Expression"
													}
												},
												"WriteToDB": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_NAMES_DB"
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "RFSAzure-IR",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "Exec Stored Procedure",
									"description": "Execute [SP_NAMES_DB] stored procedure.\nThis stored procedure use to send data from staging table to main table.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Run NamesDB Dataflow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[SP_NAMES_DB]"
									},
									"linkedServiceName": {
										"referenceName": "BIIntegrationSQL_AzureIR",
										"type": "LinkedServiceReference",
										"parameters": {
											"DBName": {
												"value": "@variables('dbName')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "DeleteContainerFiles",
									"description": "After successful execution of previous task namedb file gets delete from namedb container.",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Exec Stored Procedure",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "RFS_SALES_CONTAINER",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('namedbcontainer')",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"dbName": {
						"type": "String",
						"defaultValue": "RFS_COGS_ETL"
					},
					"namedbfilename": {
						"type": "String",
						"defaultValue": "names-db.xml"
					},
					"namedbcontainer": {
						"type": "String",
						"defaultValue": "namedb"
					}
				},
				"folder": {
					"name": "Master Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-19T06:41:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_NAMESDB_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "checknamedbexist",
						"description": "It will first check the namedb file is exist in namedb container or not.\nIf name db file exist, it will process\n if not then it will not process ahead.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RFS_CONTAINER_FILE_INPUT",
								"type": "DatasetReference",
								"parameters": {
									"xml_filename": {
										"value": "@variables('namedbfilename')",
										"type": "Expression"
									},
									"containername": {
										"value": "@variables('namedbcontainer')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Ifnamedbexist",
						"description": "This activity has multiple inner activities.\nIt checks condition of namedb file exist or not. \nIf condition is true then inner activities will run.\nIf condition is false then false inner activities run\nas of now no activity for false condition. ",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "checknamedbexist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('checknamedbexist').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Run NamesDB Dataflow",
									"description": "This task will execute NAMESDB_DATAFLOW.\nThis dataflow has mapping of namedb XML to namedb staging table.\nSo it will directly transfer data in name db staging table from namedb XML",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "RFS_NAMESDB_DATAFLOW",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"XMLFileSource": {
													"xml_filename": {
														"value": "@variables('namedbfilename')",
														"type": "Expression"
													},
													"containername": {
														"value": "@variables('namedbcontainer')",
														"type": "Expression"
													}
												},
												"WriteToDB": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_NAMES_DB"
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "RFSAzure-IR",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "Exec Stored Procedure",
									"description": "Execute [SP_NAMES_DB] stored procedure.\nThis stored procedure use to send data from staging table to main table.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Run NamesDB Dataflow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[SP_NAMES_DB]"
									},
									"linkedServiceName": {
										"referenceName": "BIIntegrationSQL_AzureIR",
										"type": "LinkedServiceReference",
										"parameters": {
											"DBName": {
												"value": "@variables('dbName')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "DeleteContainerFiles",
									"description": "After successful execution of previous task namedb file gets delete from namedb container.",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Exec Stored Procedure",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "RFS_SALES_CONTAINER",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('namedbcontainer')",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"dbName": {
						"type": "String",
						"defaultValue": "RFS_COGS_ETL_Test"
					},
					"namedbfilename": {
						"type": "String",
						"defaultValue": "names-db.xml"
					},
					"namedbcontainer": {
						"type": "String",
						"defaultValue": "namedbtest"
					}
				},
				"folder": {
					"name": "MASTER_TEST_PIPELINES"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-02T06:33:23Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_PRODUCTDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetProductDBFiles",
						"description": "It will first check the productdb file is exist in productdb container or not.\nIf productdb file exist, it will process ahed with true condition.\n if not then it will not process ahead but with false condition.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RFS_CONTAINER_FILE_INPUT",
								"type": "DatasetReference",
								"parameters": {
									"xml_filename": {
										"value": "@variables('productdbfilename')",
										"type": "Expression"
									},
									"containername": {
										"value": "@variables('productdbcontainer')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "CheckifProductDBExist",
						"description": "This activity has multiple inner activities.\nIt checks condition of productdb file exist or not. \nIf condition is true then inner activities will run.\nIf condition is false then false inner activities run\nas of now no activity for false condition. ",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetProductDBFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('GetProductDBFiles').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Run ProductDB Dataflow",
									"description": "This task will execute PRODUCTDB_DATAFLOW.\nThis dataflow has mapping of productdb XML to all productdb staging tables.\nSo it will directly transfer data in all productdb staging table from productdb XML",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "RFS_PRODUCTDB_DATAFLOW",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"XMLFileSource": {
													"filename": {
														"value": "@variables('productdbfilename')",
														"type": "Expression"
													},
													"containername": {
														"value": "@variables('productdbcontainer')",
														"type": "Expression"
													}
												},
												"WriteProductDB": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_EXTRAS"
												},
												"WriteProductCanAdds": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_CANADDS"
												},
												"WriteProductCategories": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_CATEGORIES"
												},
												"WriteCategoryMenus": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_CATEGORYMENU"
												},
												"WriteProductChoices": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_CHOICE"
												},
												"WriteProductComments": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_COMMENTS"
												},
												"WriteProductComposition": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_COMPOSITION"
												},
												"WriteProductCustomParameters": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_PARAMETER"
												},
												"WriteProductDistribution": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_DISTRIBUTION"
												},
												"WriteProductPriceList": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_PRICELIST"
												},
												"WriteProductProductionKVSRoute": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_PRODUCTION"
												},
												"WriteProductSizeSelection": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_SIZESELECTION"
												},
												"WriteSubstitutionList": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_SUBSTITUTION"
												},
												"WriteProduct": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_WRITEPRODUCT"
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "RFSAzure-IR",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "None",
										"continueOnError": true,
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "RFM Product Tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Run ProductDB Dataflow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[SP_RFM_PRODUCT_TABLE]"
									},
									"linkedServiceName": {
										"referenceName": "BIIntegrationSQL_AzureIR",
										"type": "LinkedServiceReference",
										"parameters": {
											"DBName": {
												"value": "@variables('dbName')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "DeleteNamesdbContainer",
									"description": "After successful execution of previous task productdb file gets delete from productdb container.",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "RFM Product Tables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "RFS_SALES_CONTAINER",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('productdbcontainer')",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"dbName": {
						"type": "String",
						"defaultValue": "RFS_COGS_ETL"
					},
					"productdbfilename": {
						"type": "String",
						"defaultValue": "product-db.xml"
					},
					"productdbcontainer": {
						"type": "String",
						"defaultValue": "productdb"
					}
				},
				"folder": {
					"name": "Master Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-19T07:34:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_PRODUCTDB_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetProductDBFiles",
						"description": "It will first check the productdb file is exist in productdb container or not.\nIf productdb file exist, it will process ahed with true condition.\n if not then it will not process ahead but with false condition.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RFS_CONTAINER_FILE_INPUT",
								"type": "DatasetReference",
								"parameters": {
									"xml_filename": {
										"value": "@variables('productdbfilename')",
										"type": "Expression"
									},
									"containername": {
										"value": "@variables('productdbcontainer')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "CheckifProductDBExist",
						"description": "This activity has multiple inner activities.\nIt checks condition of productdb file exist or not. \nIf condition is true then inner activities will run.\nIf condition is false then false inner activities run\nas of now no activity for false condition. ",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetProductDBFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('GetProductDBFiles').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Run ProductDB Dataflow",
									"description": "This task will execute PRODUCTDB_DATAFLOW.\nThis dataflow has mapping of productdb XML to all productdb staging tables.\nSo it will directly transfer data in all productdb staging table from productdb XML",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "RFS_PRODUCTDB_DATAFLOW",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"XMLFileSource": {
													"filename": {
														"value": "@variables('productdbfilename')",
														"type": "Expression"
													},
													"containername": {
														"value": "@variables('productdbcontainer')",
														"type": "Expression"
													}
												},
												"WriteProductDB": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_EXTRAS"
												},
												"WriteProductCanAdds": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_CANADDS"
												},
												"WriteProductCategories": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_CATEGORIES"
												},
												"WriteCategoryMenus": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_CATEGORYMENU"
												},
												"WriteProductChoices": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_CHOICE"
												},
												"WriteProductComments": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_COMMENTS"
												},
												"WriteProductComposition": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_COMPOSITION"
												},
												"WriteProductCustomParameters": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_PARAMETER"
												},
												"WriteProductDistribution": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_DISTRIBUTION"
												},
												"WriteProductPriceList": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_PRICELIST"
												},
												"WriteProductProductionKVSRoute": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_PRODUCTION"
												},
												"WriteProductSizeSelection": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_SIZESELECTION"
												},
												"WriteSubstitutionList": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_SUBSTITUTION"
												},
												"WriteProduct": {
													"dbName": {
														"value": "@variables('dbName')",
														"type": "Expression"
													},
													"tableName": "TEMP_PRODUCT_WRITEPRODUCT"
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "RFSAzure-IR",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "None",
										"continueOnError": true,
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "RFM Product Tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Run ProductDB Dataflow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[SP_RFM_PRODUCT_TABLE]"
									},
									"linkedServiceName": {
										"referenceName": "BIIntegrationSQL_AzureIR",
										"type": "LinkedServiceReference",
										"parameters": {
											"DBName": {
												"value": "@variables('dbName')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "DeleteNamesdbContainer",
									"description": "After successful execution of previous task productdb file gets delete from productdb container.",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "RFM Product Tables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "RFS_SALES_CONTAINER",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('productdbcontainer')",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"dbName": {
						"type": "String",
						"defaultValue": "RFS_COGS_ETL_Test"
					},
					"productdbfilename": {
						"type": "String",
						"defaultValue": "product-db.xml"
					},
					"productdbcontainer": {
						"type": "String",
						"defaultValue": "productdbtest"
					}
				},
				"folder": {
					"name": "MASTER_TEST_PIPELINES"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-02T06:33:23Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_SALES_PROCESS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecuteSalesDataflow_copy1",
						"description": "At this point we are triggering RFS_SALES_DATAFLOW to run for process each xml file parallelly.\nSo XML to all sql staging tables mapping process done here.\n",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy_SP_Variables_Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RFS_SALES_DATAFLOW",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"XMLSourceFile": {
										"container": {
											"value": "@pipeline().parameters.source_container",
											"type": "Expression"
										},
										"files": {
											"value": "@pipeline().parameters.file_name",
											"type": "Expression"
										}
									},
									"RecTLDProductionStatus": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TLD Production Status"
									},
									"RecNode": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Node Status"
									},
									"RecEvent": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Event"
									},
									"RecTRXInitGTotal": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_InitGTotal"
									},
									"RecTRXSetSMState": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_SetSMState"
									},
									"RecTRXBaseConfig": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_BaseConfig_Config"
									},
									"RecTRXBaseConfigposconfig": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_BaseConfig_POSConfig"
									},
									"RecTRXDayParts": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_DayParts"
									},
									"RecTrxTendertableTenderflag": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_TenderTable_TenderFlags"
									},
									"RecTRXTaxTabletype": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_TaxTable_Type"
									},
									"RecTRXDayOpen": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_DayOpen"
									},
									"TRXGetAuthorization": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_GetAuthorization"
									},
									"TRXOperLogin": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_OperLogin"
									},
									"RecEvDrawerclosee": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Ev_DrawerClose"
									},
									"RecRXRegTransfers": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_RegTransfers"
									},
									"SalesCustomInfoDetail": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Sales Custom Info Detail"
									},
									"TRXOrderPromotions": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Order_Promotions"
									},
									"TRXOrderCustOffers": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Order_Cst_Offers"
									},
									"RecTRXReduction": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Reduction"
									},
									"EVSaleStart": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleStart"
									},
									"EVSaleChoice": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleChoice"
									},
									"EVChangeSizeSelection": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_ChangeSizeSe"
									},
									"EVSetsaleType": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SetSaleType"
									},
									"EVSaleTotal": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleTotal"
									},
									"EVAddTender": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_AddTender"
									},
									"RecTRXTenderTableType": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_TenderTable_Type"
									},
									"CustomInfo": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Cashless POS"
									},
									"RecEVCustom": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_EV_Custom"
									},
									"RecTRXSaleOrder": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Order"
									},
									"EVSaleItem": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleItem"
									},
									"SaleTenderMain": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Tenders"
									},
									"SalesTAXRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Order(refund)"
									},
									"SalesCustomInfoRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Sales Custom Info Detail(Refund)"
									},
									"SaleTendersRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Tenders(Refund)"
									},
									"EVSaleStartRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleStart(Refund)"
									},
									"EVSaleItemRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleItem(Refund)"
									},
									"EVSaleChoiceRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleChoice(Refund)"
									},
									"EvSetSaleTypeRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SetSaleType(Refund)"
									},
									"EVSaleTotalRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleTotal(Refund)"
									},
									"EVAddTenderRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_AddTender(Refund)"
									},
									"EVSaleEndRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleEnd(Refund)"
									},
									"EVSaleEnd": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleEnd"
									},
									"SaleItem1": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Item1"
									},
									"SaleItem2": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Item2"
									},
									"SaleItem3": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Item3"
									},
									"refund1final": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Item_Refund1"
									},
									"refund2final": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Item_Refund2"
									},
									"refund3check": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Item_Refund3"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "RFSAzure-IR",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "None",
							"runConcurrently": true,
							"cacheSinks": {}
						}
					},
					{
						"name": "ExecuteSucessSPOnSuccess001",
						"description": "Executes [SP001_EXECUTE_STLD_PROCESS] stored procedure.\nThis procedure use to insert records from sales staging tables to sales main tables with specific data transformations.\nThis procedure runs only when dataflow succussed and for that same file stored procedure will execute.",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExecuteProcedureSTLDprocess00",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP001_EXECUTE_STLD_PROCESS]",
							"storedProcedureParameters": {
								"filename": {
									"value": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('databasename')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteSPOnFailure",
						"description": "Executes [SP_ETL_LOAD_FAILURE] stored procedure.\nIf data flow fails at any point this procedure use to delete records of that particular file from sales staging tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExecuteProcedureSTLDprocess00",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_ETL_LOAD_FAILURE]",
							"storedProcedureParameters": {
								"filename": {
									"value": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "BIIntegration_SQL",
							"type": "LinkedServiceReference",
							"parameters": {
								"link_ser_db_name": {
									"value": "@variables('dbName')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "MoveFiletoSuccess",
						"description": "At this stage we are capturing succussed files. \nThose files moving to stldarch container using this activity.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ExecuteSucessSPOnSuccess001",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RFS_SALES_SOURCE_ZIP",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.stld_source_container",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.stld_filename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_SALES_CONTAINER",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.arc_container",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy_SP_Variables_Data",
						"description": "Using this activity, we are capturing processed filename through variable with it's storeid and businessdate and mapping it to [temp_RFS_Run_Filesdata] named sql staging table.\nUsing this process we monitoring which file processed and for which business date and storeid.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "check server status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "XmlSource",
								"additionalColumns": [
									{
										"name": "Filename",
										"value": {
											"value": "@string(pipeline().parameters.file_name)",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "XmlReadSettings",
									"validationMode": "none",
									"namespaces": true
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['TLD']['@businessDate']"
										},
										"sink": {
											"name": "businessdate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['TLD']['@storeId']"
										},
										"sink": {
											"name": "storeid",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Filename']"
										},
										"sink": {
											"name": "Run_File",
											"type": "String"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_SALES_STLD_XML",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.source_container",
										"type": "Expression"
									},
									"files": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@variables('dbName')",
										"type": "Expression"
									},
									"tableName": "temp_RFS_Run_Filesdata"
								}
							}
						]
					},
					{
						"name": "MoveFiletoErrorOnSPFailure",
						"description": "At this stage we are capturing error file who fails to execute previous activity.\nThose files moving to stlderr container using this activity.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ExecuteProcedureSTLDprocess00",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RFS_SALES_SOURCE_ZIP",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.stld_source_container",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.stld_filename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_SALES_CONTAINER",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.err_container",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sales logs",
						"description": "This activity maintains logs.\nAll details maintained in sales pipeline logs table.\nColum's mapping is present in mapping section ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "MoveFiletoSuccess",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{string(pipeline().parameters.file_name)}' as Process,\n'@{pipeline().parameters.stld_filename}'as File_Name,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{utcnow()}' as CopyActivity_End_Time,\n'@{pipeline().parameters.A}' as status\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "File_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FileName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Process",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Process",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Execution_Status",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CopyActivity_End_Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CopyActivity_End_Time",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": "RFS_COGS_ETL",
									"tableName": "TEMP"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@variables('saleslogdb')",
										"type": "Expression"
									},
									"tableName": {
										"value": "@variables('logtablename')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "check server status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SERVER_CHECK]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('databasename')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "sales logs write",
						"description": "This activity maintains logs.\nAll details maintained in sales pipeline logs table.\nColum's mapping is present in mapping section ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "MoveFiletoErrorOnSPFailure",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{string(pipeline().parameters.file_name)}' as Process,\n'@{pipeline().parameters.stld_filename}'as File_Name,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{utcnow()}' as CopyActivity_End_Time,\n'@{pipeline().parameters.B}' as status\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "File_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FileName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Process",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Process",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Execution_Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CopyActivity_End_Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CopyActivity_End_Time",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": "RFS_COGS_ETL",
									"tableName": "TEMP"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@variables('saleslogdb')",
										"type": "Expression"
									},
									"tableName": {
										"value": "@variables('logtablename')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ExecuteProcedureSTLDprocess00",
						"description": "[[SP00_EXECUTE_STLD_PROCESS]",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExecuteSalesDataflow_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP00_EXECUTE_STLD_PROCESS]",
							"storedProcedureParameters": {
								"filename": {
									"value": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('databasename')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "MoveFiletoErrorOnSPFailure_copy1",
						"description": "At this stage we are capturing error file who fails to execute previous activity.\nThose files moving to stlderr container using this activity.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ExecuteSalesDataflow_copy1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RFS_SALES_SOURCE_ZIP",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.stld_source_container",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.stld_filename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_SALES_CONTAINER",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.err_container",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "MoveFiletoErrorOnSPFailure_copy2",
						"description": "At this stage we are capturing error file who fails to execute previous activity.\nThose files moving to stlderr container using this activity.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ExecuteSucessSPOnSuccess001",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RFS_SALES_SOURCE_ZIP",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.stld_source_container",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.stld_filename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_SALES_CONTAINER",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.err_container",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sales logs write_copy1",
						"description": "This activity maintains logs.\nAll details maintained in sales pipeline logs table.\nColum's mapping is present in mapping section ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "MoveFiletoErrorOnSPFailure_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{string(pipeline().parameters.file_name)}' as Process,\n'@{pipeline().parameters.stld_filename}'as File_Name,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{utcnow()}' as CopyActivity_End_Time,\n'@{pipeline().parameters.B}' as status\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "File_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FileName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Process",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Process",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Execution_Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CopyActivity_End_Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CopyActivity_End_Time",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": "RFS_COGS_ETL",
									"tableName": "TEMP"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@variables('saleslogdb')",
										"type": "Expression"
									},
									"tableName": {
										"value": "@variables('logtablename')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sales logs write_copy2",
						"description": "This activity maintains logs.\nAll details maintained in sales pipeline logs table.\nColum's mapping is present in mapping section ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "MoveFiletoErrorOnSPFailure_copy2",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{string(pipeline().parameters.file_name)}' as Process,\n'@{pipeline().parameters.stld_filename}'as File_Name,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{utcnow()}' as CopyActivity_End_Time,\n'@{pipeline().parameters.B}' as status\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "File_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FileName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Process",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Process",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Execution_Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CopyActivity_End_Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CopyActivity_End_Time",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": "RFS_COGS_ETL",
									"tableName": "TEMP"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@variables('saleslogdb')",
										"type": "Expression"
									},
									"tableName": {
										"value": "@variables('logtablename')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"source_container": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					},
					"stld_source_container": {
						"type": "string"
					},
					"stld_filename": {
						"type": "string"
					},
					"err_container": {
						"type": "string"
					},
					"arc_container": {
						"type": "string"
					},
					"A": {
						"type": "string"
					},
					"B": {
						"type": "string"
					}
				},
				"variables": {
					"dbName": {
						"type": "String",
						"defaultValue": "RFS_SALES_STAGING"
					},
					"BusinessDateOnSuccess": {
						"type": "String"
					},
					"StoreidOnSuccess": {
						"type": "String"
					},
					"BusinessDateOnFailure": {
						"type": "String"
					},
					"StoreidOnFailure": {
						"type": "String"
					},
					"setbusinessdate": {
						"type": "Array"
					},
					"saleslogdb": {
						"type": "String",
						"defaultValue": "RFS_PIPELINE_LOGS"
					},
					"logtablename": {
						"type": "String",
						"defaultValue": "sales_pipeline_log"
					},
					"databasename": {
						"type": "String",
						"defaultValue": "RFS_SALES_ETL"
					},
					"check": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SALES Child Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-17T11:13:22Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_SALES_PROCESS_check')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecuteSalesDataflow_copy1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy_SP_Variables_Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RFS_SALES_DATAFLOW",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"XMLSourceFile": {
										"container": {
											"value": "@pipeline().parameters.source_container",
											"type": "Expression"
										},
										"files": {
											"value": "@pipeline().parameters.file_name",
											"type": "Expression"
										}
									},
									"RecTLDProductionStatus": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TLD Production Status"
									},
									"RecNode": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Node Status"
									},
									"RecEvent": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Event"
									},
									"RecTRXInitGTotal": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_InitGTotal"
									},
									"RecTRXSetSMState": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_SetSMState"
									},
									"RecTRXBaseConfig": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_BaseConfig_Config"
									},
									"RecTRXBaseConfigposconfig": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_BaseConfig_POSConfig"
									},
									"RecTRXDayParts": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_DayParts"
									},
									"RecTrxTendertableTenderflag": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_TenderTable_TenderFlags"
									},
									"RecTRXTaxTabletype": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_TaxTable_Type"
									},
									"RecTRXDayOpen": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_DayOpen"
									},
									"TRXGetAuthorization": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_GetAuthorization"
									},
									"TRXOperLogin": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_OperLogin"
									},
									"RecEvDrawerclosee": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Ev_DrawerClose"
									},
									"RecRXRegTransfers": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_RegTransfers"
									},
									"SalesCustomInfoDetail": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Sales Custom Info Detail"
									},
									"TRXOrderPromotions": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Order_Promotions"
									},
									"TRXOrderCustOffers": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Order_Cst_Offers"
									},
									"RecTRXReduction": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Reduction"
									},
									"EVSaleStart": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleStart"
									},
									"EVSaleChoice": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleChoice"
									},
									"EVChangeSizeSelection": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_ChangeSizeSe"
									},
									"EVSetsaleType": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SetSaleType"
									},
									"EVSaleTotal": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleTotal"
									},
									"EVAddTender": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_AddTender"
									},
									"RecTRXTenderTableType": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_TenderTable_Type"
									},
									"CustomInfo": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Cashless POS"
									},
									"RecEVCustom": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_EV_Custom"
									},
									"RecTRXSaleOrder": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Order"
									},
									"EVSaleItem": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleItem"
									},
									"SaleTenderMain": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Tenders"
									},
									"SalesTAXRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Order(refund)"
									},
									"SalesCustomInfoRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Sales Custom Info Detail(Refund)"
									},
									"SaleTendersRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Tenders(Refund)"
									},
									"EVSaleStartRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleStart(Refund)"
									},
									"EVSaleItemRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleItem(Refund)"
									},
									"EVSaleChoiceRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleChoice(Refund)"
									},
									"EvSetSaleTypeRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SetSaleType(Refund)"
									},
									"EVSaleTotalRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleTotal(Refund)"
									},
									"EVAddTenderRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_AddTender(Refund)"
									},
									"EVSaleEndRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleEnd(Refund)"
									},
									"EVSaleEnd": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleEnd"
									},
									"SaleItem1": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Item1"
									},
									"SaleItem2": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Item2"
									},
									"SaleItem3": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Item3"
									},
									"refund1final": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "hjsbj"
									},
									"refund2final": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "njsna"
									},
									"refund3check": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "hah"
									}
								},
								"linkedServiceParameters": {
									"refund2final": {
										"schemaLinkedService": {
											"dbName": {
												"value": "@variables('dbName')",
												"type": "Expression"
											},
											"tableName": "sh"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "RFSAzure-IR",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "None",
							"runConcurrently": true,
							"cacheSinks": {}
						}
					},
					{
						"name": "ExecuteSucessSPOnSuccess",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExecuteSalesDataflow_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_ETL_LOAD_SUCCESS]",
							"storedProcedureParameters": {
								"filename": {
									"value": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": "RFS_SALES_STAGING"
							}
						}
					},
					{
						"name": "ExecuteSPOnFailure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExecuteSalesDataflow_copy1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_ETL_LOAD_FAILURE]",
							"storedProcedureParameters": {
								"filename": {
									"value": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": "RFS_SALES_STAGING"
							}
						}
					},
					{
						"name": "MoveFiletoSuccess",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ExecuteSucessSPOnSuccess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RFS_SALES_SOURCE_ZIP",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.stld_source_container",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.stld_filename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_SALES_CONTAINER",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.arc_container",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "MoveFiletoError",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ExecuteSPOnFailure",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RFS_SALES_SOURCE_ZIP",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.stld_source_container",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.stld_filename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_SALES_CONTAINER",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.err_container",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy_SP_Variables_Data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "XmlSource",
								"additionalColumns": [
									{
										"name": "Filename",
										"value": {
											"value": "@string(pipeline().parameters.file_name)",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "XmlReadSettings",
									"validationMode": "none",
									"namespaces": true
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['TLD']['@businessDate']"
										},
										"sink": {
											"name": "businessdate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['TLD']['@storeId']"
										},
										"sink": {
											"name": "storeid",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Filename']"
										},
										"sink": {
											"name": "Run_File",
											"type": "String"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_SALES_STLD_XML",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.source_container",
										"type": "Expression"
									},
									"files": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": "RFS_SALES_STAGING",
									"tableName": "temp_RFS_Run_Filesdata"
								}
							}
						]
					},
					{
						"name": "MoveFiletoErrorOnSPFailure",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ExecuteSucessSPOnSuccess",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RFS_SALES_SOURCE_ZIP",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.stld_source_container",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.stld_filename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_SALES_CONTAINER",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.err_container",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sales logs",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ExecuteSucessSPOnSuccess",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "ExecuteSPOnFailure",
								"dependencyConditions": [
									"Skipped",
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{string(pipeline().parameters.file_name)}' as Process,\n'@{pipeline().parameters.stld_filename}'as File_Name,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{utcnow()}' as CopyActivity_End_Time,\n'@{activity('ExecuteSalesDataflow_copy1').output.reportLineageToPurview.status} ' as status\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "File_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FileName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Process",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Process",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Execution_Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CopyActivity_End_Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CopyActivity_End_Time",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": "RFS_COGS_ETL",
									"tableName": "TEMP"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@variables('saleslogdb')",
										"type": "Expression"
									},
									"tableName": {
										"value": "@variables('logtablename')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"source_container": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					},
					"stld_source_container": {
						"type": "string"
					},
					"stld_filename": {
						"type": "string"
					},
					"err_container": {
						"type": "string"
					},
					"arc_container": {
						"type": "string"
					}
				},
				"variables": {
					"dbName": {
						"type": "String",
						"defaultValue": "RFS_SALES_STAGING"
					},
					"BusinessDateOnSuccess": {
						"type": "String"
					},
					"StoreidOnSuccess": {
						"type": "String"
					},
					"BusinessDateOnFailure": {
						"type": "String"
					},
					"StoreidOnFailure": {
						"type": "String"
					},
					"setbusinessdate": {
						"type": "Array"
					},
					"saleslogdb": {
						"type": "String",
						"defaultValue": "RFS_PIPELINE_LOGS"
					},
					"logtablename": {
						"type": "String",
						"defaultValue": "sales_pipeline_log"
					}
				},
				"folder": {
					"name": "SALES Child Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-13T09:32:55Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_SALES_PROCESS_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecuteSalesDataflow_copy1",
						"description": "At this point we are triggering RFS_SALES_DATAFLOW to run for process each xml file parallelly.\nSo XML to all sql staging tables mapping process done here.\n",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RFS_SALES_DATAFLOW_copy1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"XMLSourceFile": {
										"container": "democheck",
										"files": "POS_STLD_344_00003_20230106.20230107061000.xml"
									},
									"RecTLDProductionStatus": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TLD Production Status"
									},
									"RecNode": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Node Status"
									},
									"RecEvent": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Event"
									},
									"RecTRXInitGTotal": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_InitGTotal"
									},
									"RecTRXSetSMState": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_SetSMState"
									},
									"RecTRXBaseConfig": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_BaseConfig_Config"
									},
									"RecTRXBaseConfigposconfig": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_BaseConfig_POSConfig"
									},
									"RecTRXDayParts": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_DayParts"
									},
									"RecTrxTendertableTenderflag": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_TenderTable_TenderFlags"
									},
									"RecTRXTaxTabletype": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_TaxTable_Type"
									},
									"RecTRXDayOpen": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_DayOpen"
									},
									"TRXGetAuthorization": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_GetAuthorization"
									},
									"TRXOperLogin": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_OperLogin"
									},
									"RecEvDrawerclosee": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Ev_DrawerClose"
									},
									"RecRXRegTransfers": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_RegTransfers"
									},
									"RECTRXsale": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale"
									},
									"SalesCustomInfoDetail": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Sales Custom Info Detail"
									},
									"TRXOrderPromotions": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Order_Promotions"
									},
									"TRXOrderCustOffers": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Order_Cst_Offers"
									},
									"RecTRXReduction": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Reduction"
									},
									"EVSaleStart": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleStart"
									},
									"EVSaleChoice": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleChoice"
									},
									"EVChangeSizeSelection": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_ChangeSizeSe"
									},
									"EVSetsaleType": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SetSaleType"
									},
									"EVSaleTotal": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleTotal"
									},
									"EVAddTender": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_AddTender"
									},
									"RecTRXTenderTableType": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_TenderTable_Type"
									},
									"CustomInfo": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Cashless POS"
									},
									"RecEVCustom": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_EV_Custom"
									},
									"RecTRXSaleOrder": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Order"
									},
									"EVSaleItem": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleItem"
									},
									"SaleTenderMain": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Tenders"
									},
									"SalesTAXRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Order(refund)"
									},
									"SalesCustomInfoRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Sales Custom Info Detail(Refund)"
									},
									"SaleTendersRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Tenders(Refund)"
									},
									"EVSaleStartRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleStart(Refund)"
									},
									"EVSaleItemRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleItem(Refund)"
									},
									"EVSaleChoiceRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleChoice(Refund)"
									},
									"EvSetSaleTypeRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SetSaleType(Refund)"
									},
									"EVSaleTotalRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleTotal(Refund)"
									},
									"EVAddTenderRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_AddTender(Refund)"
									},
									"EVSaleEndRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleEnd(Refund)"
									},
									"EVSaleEnd": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleEnd"
									},
									"SaleItem1": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Item1"
									},
									"SaleItem2": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Item2"
									},
									"SaleItem3": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Item3"
									},
									"refund1final": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Item_Refund1"
									},
									"refund2final": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Item_Refund2"
									},
									"refund3check": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Item_Refund3"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "RFSAzure-IR",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "None",
							"runConcurrently": true,
							"cacheSinks": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"source_container": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					},
					"stld_source_container": {
						"type": "string"
					},
					"stld_filename": {
						"type": "string"
					},
					"err_container": {
						"type": "string"
					},
					"arc_container": {
						"type": "string"
					},
					"spsuccess": {
						"type": "string",
						"defaultValue": "Succeeded"
					},
					"spfail": {
						"type": "string",
						"defaultValue": "Failed"
					}
				},
				"variables": {
					"dbName": {
						"type": "String",
						"defaultValue": "RFS_SALES_STAGING"
					},
					"BusinessDateOnSuccess": {
						"type": "String"
					},
					"StoreidOnSuccess": {
						"type": "String"
					},
					"BusinessDateOnFailure": {
						"type": "String"
					},
					"StoreidOnFailure": {
						"type": "String"
					},
					"setbusinessdate": {
						"type": "Array"
					},
					"saleslogdb": {
						"type": "String",
						"defaultValue": "RFS_PIPELINE_LOGS_Test"
					},
					"logtablename": {
						"type": "String",
						"defaultValue": "sales_pipeline_log"
					},
					"databasename": {
						"type": "String",
						"defaultValue": "RFS_SALES_ETL_Test"
					},
					"A": {
						"type": "String"
					},
					"B": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SALES_TEST_CHILD_PIPELINES"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-17T11:13:21Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/temp2_update_cashless')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecuteSalesDataflow_copy1",
						"description": "At this point we are triggering RFS_SALES_DATAFLOW to run for process each xml file parallelly.\nSo XML to all sql staging tables mapping process done here.\n",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy_SP_Variables_Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RFS_SALES_DATAFLOW",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"XMLSourceFile": {
										"container": {
											"value": "@pipeline().parameters.source_container",
											"type": "Expression"
										},
										"files": {
											"value": "@pipeline().parameters.file_name",
											"type": "Expression"
										}
									},
									"RecTLDProductionStatus": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TLD Production Status"
									},
									"RecNode": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Node Status"
									},
									"RecEvent": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Event"
									},
									"RecTRXInitGTotal": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_InitGTotal"
									},
									"RecTRXSetSMState": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_SetSMState"
									},
									"RecTRXBaseConfig": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_BaseConfig_Config"
									},
									"RecTRXBaseConfigposconfig": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_BaseConfig_POSConfig"
									},
									"RecTRXDayParts": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_DayParts"
									},
									"RecTrxTendertableTenderflag": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_TenderTable_TenderFlags"
									},
									"RecTRXTaxTabletype": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_TaxTable_Type"
									},
									"RecTRXDayOpen": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_DayOpen"
									},
									"TRXGetAuthorization": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_GetAuthorization"
									},
									"TRXOperLogin": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_OperLogin"
									},
									"RecEvDrawerclosee": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Ev_DrawerClose"
									},
									"RecRXRegTransfers": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_RegTransfers"
									},
									"SalesCustomInfoDetail": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Sales Custom Info Detail"
									},
									"TRXOrderPromotions": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Order_Promotions"
									},
									"TRXOrderCustOffers": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Order_Cst_Offers"
									},
									"RecTRXReduction": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Reduction"
									},
									"EVSaleStart": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleStart"
									},
									"EVSaleChoice": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleChoice"
									},
									"EVChangeSizeSelection": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_ChangeSizeSe"
									},
									"EVSetsaleType": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SetSaleType"
									},
									"EVSaleTotal": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleTotal"
									},
									"EVAddTender": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_AddTender"
									},
									"RecTRXTenderTableType": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_TenderTable_Type"
									},
									"CustomInfo": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Cashless POS"
									},
									"RecEVCustom": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_EV_Custom"
									},
									"RecTRXSaleOrder": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Order"
									},
									"EVSaleItem": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleItem"
									},
									"SaleTenderMain": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Tenders"
									},
									"SalesTAXRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Order(refund)"
									},
									"SalesCustomInfoRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$Sales Custom Info Detail(Refund)"
									},
									"SaleTendersRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Tenders(Refund)"
									},
									"EVSaleStartRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleStart(Refund)"
									},
									"EVSaleItemRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleItem(Refund)"
									},
									"EVSaleChoiceRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleChoice(Refund)"
									},
									"EvSetSaleTypeRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SetSaleType(Refund)"
									},
									"EVSaleTotalRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleTotal(Refund)"
									},
									"EVAddTenderRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_AddTender(Refund)"
									},
									"EVSaleEndRefund": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleEnd(Refund)"
									},
									"EVSaleEnd": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Event_Ev_SaleEnd"
									},
									"SaleItem1": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Item1"
									},
									"SaleItem2": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Item2"
									},
									"SaleItem3": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Item3"
									},
									"refund1final": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Item_Refund1"
									},
									"refund2final": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Item_Refund2"
									},
									"refund3check": {
										"dbName": {
											"value": "@variables('dbName')",
											"type": "Expression"
										},
										"tableName": "temp_Reza Food Services Co_ Ltd$TRX_Sale_Item_Refund3"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "RFSAzure-IR",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "None",
							"runConcurrently": true,
							"cacheSinks": {}
						}
					},
					{
						"name": "MoveFiletoSuccess",
						"description": "At this stage we are capturing succussed files. \nThose files moving to stldarch container using this activity.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RFS_SALES_SOURCE_ZIP",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.stld_source_container",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.stld_filename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_SALES_CONTAINER",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.arc_container",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy_SP_Variables_Data",
						"description": "Using this activity, we are capturing processed filename through variable with it's storeid and businessdate and mapping it to [temp_RFS_Run_Filesdata] named sql staging table.\nUsing this process we monitoring which file processed and for which business date and storeid.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "check server status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "XmlSource",
								"additionalColumns": [
									{
										"name": "Filename",
										"value": {
											"value": "@string(pipeline().parameters.file_name)",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "XmlReadSettings",
									"validationMode": "none",
									"namespaces": true
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['TLD']['@businessDate']"
										},
										"sink": {
											"name": "businessdate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['TLD']['@storeId']"
										},
										"sink": {
											"name": "storeid",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Filename']"
										},
										"sink": {
											"name": "Run_File",
											"type": "String"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_SALES_STLD_XML",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.source_container",
										"type": "Expression"
									},
									"files": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@variables('dbName')",
										"type": "Expression"
									},
									"tableName": "temp_RFS_Run_Filesdata"
								}
							}
						]
					},
					{
						"name": "MoveFiletoErrorOnSPFailure",
						"description": "At this stage we are capturing error file who fails to execute previous activity.\nThose files moving to stlderr container using this activity.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RFS_SALES_SOURCE_ZIP",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.stld_source_container",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.stld_filename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_SALES_CONTAINER",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.err_container",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sales logs",
						"description": "This activity maintains logs.\nAll details maintained in sales pipeline logs table.\nColum's mapping is present in mapping section ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "MoveFiletoSuccess",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{string(pipeline().parameters.file_name)}' as Process,\n'@{pipeline().parameters.stld_filename}'as File_Name,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{utcnow()}' as CopyActivity_End_Time,\n'@{pipeline().parameters.A}' as status\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "File_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FileName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Process",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Process",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Execution_Status",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CopyActivity_End_Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CopyActivity_End_Time",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": "RFS_COGS_ETL",
									"tableName": "TEMP"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@variables('saleslogdb')",
										"type": "Expression"
									},
									"tableName": {
										"value": "@variables('logtablename')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "check server status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SERVER_CHECK]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('databasename')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "sales logs write",
						"description": "This activity maintains logs.\nAll details maintained in sales pipeline logs table.\nColum's mapping is present in mapping section ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "MoveFiletoErrorOnSPFailure",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{string(pipeline().parameters.file_name)}' as Process,\n'@{pipeline().parameters.stld_filename}'as File_Name,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{utcnow()}' as CopyActivity_End_Time,\n'@{pipeline().parameters.B}' as status\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "File_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FileName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Process",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Process",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Execution_Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CopyActivity_End_Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CopyActivity_End_Time",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": "RFS_COGS_ETL",
									"tableName": "TEMP"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@variables('saleslogdb')",
										"type": "Expression"
									},
									"tableName": {
										"value": "@variables('logtablename')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "MoveFiletoErrorOnSPFailure_copy1",
						"description": "At this stage we are capturing error file who fails to execute previous activity.\nThose files moving to stlderr container using this activity.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ExecuteSalesDataflow_copy1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RFS_SALES_SOURCE_ZIP",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.stld_source_container",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.stld_filename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_SALES_CONTAINER",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.err_container",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sales logs write_copy1",
						"description": "This activity maintains logs.\nAll details maintained in sales pipeline logs table.\nColum's mapping is present in mapping section ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "MoveFiletoErrorOnSPFailure_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{string(pipeline().parameters.file_name)}' as Process,\n'@{pipeline().parameters.stld_filename}'as File_Name,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{utcnow()}' as CopyActivity_End_Time,\n'@{pipeline().parameters.B}' as status\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "File_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FileName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Process",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Process",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Execution_Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CopyActivity_End_Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CopyActivity_End_Time",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": "RFS_COGS_ETL",
									"tableName": "TEMP"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@variables('saleslogdb')",
										"type": "Expression"
									},
									"tableName": {
										"value": "@variables('logtablename')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExecuteSalesDataflow_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[PROCESSCASHLESSTEMP]",
							"storedProcedureParameters": {
								"filename": {
									"value": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": "RFS_SALES_ETL"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"source_container": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					},
					"stld_source_container": {
						"type": "string"
					},
					"stld_filename": {
						"type": "string"
					},
					"err_container": {
						"type": "string"
					},
					"arc_container": {
						"type": "string"
					},
					"A": {
						"type": "string"
					},
					"B": {
						"type": "string"
					}
				},
				"variables": {
					"dbName": {
						"type": "String",
						"defaultValue": "RFS_SALES_STAGING"
					},
					"BusinessDateOnSuccess": {
						"type": "String"
					},
					"StoreidOnSuccess": {
						"type": "String"
					},
					"BusinessDateOnFailure": {
						"type": "String"
					},
					"StoreidOnFailure": {
						"type": "String"
					},
					"setbusinessdate": {
						"type": "Array"
					},
					"saleslogdb": {
						"type": "String",
						"defaultValue": "RFS_PIPELINE_LOGS"
					},
					"logtablename": {
						"type": "String",
						"defaultValue": "sales_pipeline_log"
					},
					"databasename": {
						"type": "String",
						"defaultValue": "RFS_SALES_ETL"
					},
					"check": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SALES Child Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-17T11:13:22Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_SALES')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get List of Files",
						"description": "Using This activity, you will get total count of zip files are present at source location.\nTotal count will be output result of this activity & input for foreach activity.\n\n",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Truncate_Sales_Temp_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RFS_SALES_SOURCE",
								"type": "DatasetReference",
								"parameters": {
									"container_name": {
										"value": "@variables('source_container')",
										"type": "Expression"
									},
									"filename": "*.zip"
								}
							},
							"fieldList": [
								"itemName",
								"itemType",
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ProcessEachFile",
						"description": "This activity has multiple inner activity inside.\nNumber of Runs of this activity equal to total count of input files.\nIt will process each file parallelly. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get List of Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get List of Files').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 15,
							"activities": [
								{
									"name": "SetFileName",
									"description": "This activity will set file name variable value as a processed item name.\n",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "filename",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CopyPOSSTLDtoStaging",
									"description": "This activity performs copy task.\nIt copies all files to stldtemp2 location which includes STLD in their name. ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ExtractZipFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@concat(item().name,'*')",
													"type": "Expression"
												},
												"wildcardFileName": "*STLD*",
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"copyBehavior": "FlattenHierarchy"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 8
									},
									"inputs": [
										{
											"referenceName": "RFS_SALES_CONTAINER",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('destination_container')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "RFS_SALES_CONTAINER",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('temp_container')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "ExtractZipFiles",
									"description": "Extract zip file into stldtemp container.\nSo each zip file from stldetl container will extract to stldtemp container.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings",
												"compressionProperties": {
													"type": "ZipDeflateReadSettings"
												}
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 8
									},
									"inputs": [
										{
											"referenceName": "RFS_SALES_SOURCE",
											"type": "DatasetReference",
											"parameters": {
												"container_name": {
													"value": "@variables('source_container')",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "RFS_SALES_CONTAINER",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('destination_container')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "ExecuteSalesXML",
									"description": "This is inner activity inside foreach activity. which Executes RFS_SALES_PROCESS named child pipeline for each file.",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "GetSTLDXMLName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "RFS_SALES_PROCESS",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"source_container": {
												"value": "@variables('temp_container')",
												"type": "Expression"
											},
											"file_name": {
												"value": "@activity('GetSTLDXMLName').output.childItems[0].name",
												"type": "Expression"
											},
											"stld_source_container": {
												"value": "@variables('source_container')",
												"type": "Expression"
											},
											"stld_filename": {
												"value": "@item().name",
												"type": "Expression"
											},
											"err_container": {
												"value": "@variables('err_container')",
												"type": "Expression"
											},
											"arc_container": {
												"value": "@variables('arch_container')",
												"type": "Expression"
											},
											"A": {
												"value": "@variables('checksp')",
												"type": "Expression"
											},
											"B": {
												"value": "@variables('checkspp')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "GetSTLDXMLName",
									"description": "This activity use to get processed stld file and pass same file to child pipeline for next process.",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "CopyPOSSTLDtoStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "RFS_SALES_SOURCE",
											"type": "DatasetReference",
											"parameters": {
												"container_name": {
													"value": "@variables('temp_container')",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('data_',activity('CopyPOSSTLDtoStaging').ActivityRunId,'*')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"childItems",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								}
							]
						}
					},
					{
						"name": "DeleteandMoveTemp",
						"description": "Using this activity deleting all files from stldtemp and stldtemp2 containers.",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ProcessEachFile",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RFS_SALES_DELETE_TEMP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"temp1": {
									"value": "@variables('destination_container')",
									"type": "Expression"
								},
								"temp2": {
									"value": "@variables('temp_container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "CheckServerStatus",
						"description": "This activity check server status to proceed ahead. If server status is online activity will succeed, if server is offline activity will Faile & throw an error message.",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SERVER_CHECK]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('dbname')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Truncate_Sales_Temp_Tables",
						"description": "This activity runs [SP_TRUNCATE_ALL_SALES_TEMP_TABLES] Stored procedure.\nThis stored procedure going to truncates all sales staging table. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CheckServerStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_TRUNCATE_ALL_SALES_TEMP_TABLES]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('databasename')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteNamesDB",
						"description": "Executes RFS_NAMESDB pipeline.\nWhich process if namedb file exist in namedb container.",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CheckServerStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RFS_NAMESDB",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecuteProductDB",
						"description": "Executes RFS_PRODUCTDB pipeline.\nWhich process if productdb file exist in productdb container.",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CheckServerStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RFS_PRODUCTDB",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Executesalessp",
						"description": "Executes [SP_Sales_Main] stored procedure.\nThis stored procedure includes \nSP_TRX_ItemQTY_Update\nSP_Update_TotalTax_Manualy\nstored procedure to update quantity and tax of sales main tables.",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ProcessEachFile",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_Sales_Main]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": "RFS_SALES_ETL"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"source_container": {
						"type": "String",
						"defaultValue": "stldetl"
					},
					"filename": {
						"type": "String"
					},
					"destination_container": {
						"type": "String",
						"defaultValue": "stldtemp"
					},
					"temp_container": {
						"type": "String",
						"defaultValue": "stldtemp2"
					},
					"arch_container": {
						"type": "String",
						"defaultValue": "stldarch"
					},
					"err_container": {
						"type": "String",
						"defaultValue": "stlderr"
					},
					"businessdate": {
						"type": "String"
					},
					"storeid": {
						"type": "String"
					},
					"BusinessDateOnSuccess": {
						"type": "String"
					},
					"StoreidOnSuccess": {
						"type": "String"
					},
					"stldfilename": {
						"type": "String"
					},
					"dbname": {
						"type": "String",
						"defaultValue": "RFS_SALES_ETL"
					},
					"databasename": {
						"type": "String",
						"defaultValue": "RFS_SALES_STAGING"
					},
					"checksp": {
						"type": "String",
						"defaultValue": "Success"
					},
					"checkspp": {
						"type": "String",
						"defaultValue": "Fail"
					}
				},
				"folder": {
					"name": "Master Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-15T05:44:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/RFS_NAMESDB')]",
				"[concat(variables('factoryId'), '/pipelines/RFS_PRODUCTDB')]",
				"[concat(variables('factoryId'), '/pipelines/RFS_SALES_PROCESS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_SALES_ADHOC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GETLISTOFXMLFILES",
						"description": "Using This activity, you will get total count of xml files are present at source location.\nTotal count will be output result of this activity & input for foreach activity.\n\n",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Truncate_Sales_Temp_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RFS_SALES_SOURCE",
								"type": "DatasetReference",
								"parameters": {
									"container_name": {
										"value": "@variables('tempcontainer')",
										"type": "Expression"
									},
									"filename": "*.xml"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "PROCESSALLXMLFILES",
						"description": "This activity has inner activity inside.\nNumber of Runs of this activity equal to total count of input files.\nIt will process each file parallelly. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GETLISTOFXMLFILES",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GETLISTOFXMLFILES').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "ExecuteXMLFile",
									"description": "This is inner activity inside foreach activity. which Executes RFS_SALES_PROCESS named child pipeline for each file.",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "RFS_SALES_PROCESS",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"source_container": {
												"value": "@variables('tempcontainer')",
												"type": "Expression"
											},
											"file_name": {
												"value": "@item().name",
												"type": "Expression"
											},
											"stld_source_container": {
												"value": "@variables('tempcontainer')",
												"type": "Expression"
											},
											"stld_filename": {
												"value": "@item().name",
												"type": "Expression"
											},
											"err_container": {
												"value": "@variables('errorcontainer')",
												"type": "Expression"
											},
											"arc_container": {
												"value": "@variables('successcontainer')",
												"type": "Expression"
											},
											"A": {
												"value": "@variables('check')",
												"type": "Expression"
											},
											"B": {
												"value": "@variables('checkk')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Truncate_Sales_Temp_Tables",
						"description": "This activity runs [SP_TRUNCATE_ALL_SALES_TEMP_TABLES] Stored procedure.\nThis stored procedure going to truncates all sales staging table. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "check server status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_TRUNCATE_ALL_SALES_TEMP_TABLES]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('dbname')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Executesalessp",
						"description": "Executes [SP_Sales_Main] stored procedure.\nThis stored procedure includes \nSP_TRX_ItemQTY_Update\nSP_Update_TotalTax_Manualy\nstored procedure to update quantity and tax of sales main tables.",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PROCESSALLXMLFILES",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_Sales_Main]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('databasename')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "check server status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SERVER_CHECK]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('databasename')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"tempcontainer": {
						"type": "String",
						"defaultValue": "stldtemp2"
					},
					"dbname": {
						"type": "String",
						"defaultValue": "RFS_SALES_STAGING"
					},
					"successcontainer": {
						"type": "String",
						"defaultValue": "stldarch"
					},
					"errorcontainer": {
						"type": "String",
						"defaultValue": "stlderr"
					},
					"databasename": {
						"type": "String",
						"defaultValue": "RFS_SALES_ETL"
					},
					"destinationcontainer": {
						"type": "String",
						"defaultValue": "stldtemp"
					},
					"arch_container": {
						"type": "String",
						"defaultValue": "stldarch"
					},
					"check": {
						"type": "String",
						"defaultValue": "Success"
					},
					"checkk": {
						"type": "String",
						"defaultValue": "Fail"
					}
				},
				"folder": {
					"name": "Master Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-07T15:07:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/RFS_SALES_PROCESS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_SALES_ADHOC_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GETLISTOFXMLFILES",
						"description": "Using This activity, you will get total count of xml files are present at source location.\nTotal count will be output result of this activity & input for foreach activity.\n\n",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Truncate_Sales_Temp_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RFS_SALES_SOURCE",
								"type": "DatasetReference",
								"parameters": {
									"container_name": {
										"value": "@variables('tempcontainer')",
										"type": "Expression"
									},
									"filename": "*.xml"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "PROCESSALLXMLFILES",
						"description": "This activity has inner activity inside.\nNumber of Runs of this activity equal to total count of input files.\nIt will process each file parallelly. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GETLISTOFXMLFILES",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GETLISTOFXMLFILES').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "ExecuteXMLFile",
									"description": "This is inner activity inside foreach activity. which Executes RFS_SALES_PROCESS named child pipeline for each file.",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "RFS_SALES_PROCESS_copy1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"source_container": {
												"value": "@variables('tempcontainer')",
												"type": "Expression"
											},
											"file_name": {
												"value": "@item().name",
												"type": "Expression"
											},
											"stld_source_container": {
												"value": "@variables('tempcontainer')",
												"type": "Expression"
											},
											"stld_filename": {
												"value": "@item().name",
												"type": "Expression"
											},
											"err_container": {
												"value": "@variables('errorcontainer')",
												"type": "Expression"
											},
											"arc_container": {
												"value": "@variables('successcontainer')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Truncate_Sales_Temp_Tables",
						"description": "This activity runs [SP_TRUNCATE_ALL_SALES_TEMP_TABLES] Stored procedure.\nThis stored procedure going to truncates all sales staging table. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "check server status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_TRUNCATE_ALL_SALES_TEMP_TABLES]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('dbname')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Executesalessp",
						"description": "Executes [SP_Sales_Main] stored procedure.\nThis stored procedure includes \nSP_TRX_ItemQTY_Update\nSP_Update_TotalTax_Manualy\nstored procedure to update quantity and tax of sales main tables.",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PROCESSALLXMLFILES",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_Sales_Main]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('databasename')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "check server status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SERVER_CHECK]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('databasename')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"tempcontainer": {
						"type": "String",
						"defaultValue": "stldtemp2test"
					},
					"dbname": {
						"type": "String",
						"defaultValue": "RFS_SALES_STAGING_Test"
					},
					"successcontainer": {
						"type": "String",
						"defaultValue": "stldarchtest"
					},
					"errorcontainer": {
						"type": "String",
						"defaultValue": "stlderrtest"
					},
					"databasename": {
						"type": "String",
						"defaultValue": "RFS_SALES_ETL_Test"
					},
					"destinationcontainer": {
						"type": "String",
						"defaultValue": "stldtemptest"
					},
					"arch_container": {
						"type": "String",
						"defaultValue": "stldarchtest"
					}
				},
				"folder": {
					"name": "MASTER_TEST_PIPELINES"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-04T13:55:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/RFS_SALES_PROCESS_copy1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_SALES_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get List of Files",
						"description": "Using This activity, you will get total count of zip files are present at source location.\nTotal count will be output result of this activity & input for foreach activity.\n\n",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Truncate_Sales_Temp_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RFS_SALES_SOURCE",
								"type": "DatasetReference",
								"parameters": {
									"container_name": {
										"value": "@variables('source_container')",
										"type": "Expression"
									},
									"filename": "*.zip"
								}
							},
							"fieldList": [
								"itemName",
								"itemType",
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ProcessEachFile",
						"description": "This activity has multiple inner activity inside.\nNumber of Runs of this activity equal to total count of input files.\nIt will process each file parallelly. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get List of Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get List of Files').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "SetFileName",
									"description": "This activity will set file name variable value as a processed item name.\n",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "filename",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CopyPOSSTLDtoStaging",
									"description": "This activity performs copy task.\nIt copies all files to stldtemp2 location which includes STLD in their name. ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ExtractZipFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@concat(item().name,'*')",
													"type": "Expression"
												},
												"wildcardFileName": "*STLD*",
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"copyBehavior": "FlattenHierarchy"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 8
									},
									"inputs": [
										{
											"referenceName": "RFS_SALES_CONTAINER",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('destination_container')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "RFS_SALES_CONTAINER",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('temp_container')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "ExtractZipFiles",
									"description": "Extract zip file into stldtemp container.\nSo each zip file from stldetl container will extract to stldtemp container.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings",
												"compressionProperties": {
													"type": "ZipDeflateReadSettings"
												}
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 8
									},
									"inputs": [
										{
											"referenceName": "RFS_SALES_SOURCE",
											"type": "DatasetReference",
											"parameters": {
												"container_name": {
													"value": "@variables('source_container')",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "RFS_SALES_CONTAINER",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('destination_container')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "ExecuteSalesXML",
									"description": "This is inner activity inside foreach activity. which Executes RFS_SALES_PROCESS named child pipeline for each file.",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "GetSTLDXMLName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "RFS_SALES_PROCESS_copy1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"source_container": {
												"value": "@variables('temp_container')",
												"type": "Expression"
											},
											"file_name": {
												"value": "@activity('GetSTLDXMLName').output.childItems[0].name",
												"type": "Expression"
											},
											"stld_source_container": {
												"value": "@variables('source_container')",
												"type": "Expression"
											},
											"stld_filename": {
												"value": "@item().name",
												"type": "Expression"
											},
											"err_container": {
												"value": "@variables('err_container')",
												"type": "Expression"
											},
											"arc_container": {
												"value": "@variables('arch_container')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "GetSTLDXMLName",
									"description": "This activity use to get processed stld file and pass same file to child pipeline for next process.",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "CopyPOSSTLDtoStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "RFS_SALES_SOURCE",
											"type": "DatasetReference",
											"parameters": {
												"container_name": {
													"value": "@variables('temp_container')",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('data_',activity('CopyPOSSTLDtoStaging').ActivityRunId,'*')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"childItems",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								}
							]
						}
					},
					{
						"name": "DeleteandMoveTemp",
						"description": "Using this activity deleting all files from stldtemp and stldtemp2 containers.",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ProcessEachFile",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RFS_SALES_DELETE_TEMP_copy1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"temp1": {
									"value": "@variables('destination_container')",
									"type": "Expression"
								},
								"temp2": {
									"value": "@variables('temp_container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "CheckServerStatus",
						"description": "This activity check server status to proceed ahead. If server status is online activity will succeed, if server is offline activity will Faile & throw an error message.",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SERVER_CHECK]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('dbname')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Truncate_Sales_Temp_Tables",
						"description": "This activity runs [SP_TRUNCATE_ALL_SALES_TEMP_TABLES] Stored procedure.\nThis stored procedure going to truncates all sales staging table. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CheckServerStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_TRUNCATE_ALL_SALES_TEMP_TABLES]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('databasename')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteNamesDB",
						"description": "Executes RFS_NAMESDB pipeline.\nWhich process if namedb file exist in namedb container.",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CheckServerStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RFS_NAMESDB_copy1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecuteProductDB",
						"description": "Executes RFS_PRODUCTDB pipeline.\nWhich process if productdb file exist in productdb container.",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CheckServerStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RFS_PRODUCTDB_copy1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Executesalessp",
						"description": "Executes [SP_Sales_Main] stored procedure.\nThis stored procedure includes \nSP_TRX_ItemQTY_Update\nSP_Update_TotalTax_Manualy\nstored procedure to update quantity and tax of sales main tables.",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ProcessEachFile",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_Sales_Main]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('dbname')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"source_container": {
						"type": "String",
						"defaultValue": "stldetltest"
					},
					"filename": {
						"type": "String"
					},
					"destination_container": {
						"type": "String",
						"defaultValue": "stldtemptest"
					},
					"temp_container": {
						"type": "String",
						"defaultValue": "stldtemp2test"
					},
					"arch_container": {
						"type": "String",
						"defaultValue": "stldarchtest"
					},
					"err_container": {
						"type": "String",
						"defaultValue": "stlderrtest"
					},
					"businessdate": {
						"type": "String"
					},
					"storeid": {
						"type": "String"
					},
					"BusinessDateOnSuccess": {
						"type": "String"
					},
					"StoreidOnSuccess": {
						"type": "String"
					},
					"stldfilename": {
						"type": "String"
					},
					"dbname": {
						"type": "String",
						"defaultValue": "RFS_SALES_ETL_Test"
					},
					"databasename": {
						"type": "String",
						"defaultValue": "RFS_SALES_STAGING_Test"
					}
				},
				"folder": {
					"name": "MASTER_TEST_PIPELINES"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-03T03:44:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/RFS_NAMESDB_copy1')]",
				"[concat(variables('factoryId'), '/pipelines/RFS_PRODUCTDB_copy1')]",
				"[concat(variables('factoryId'), '/pipelines/RFS_SALES_PROCESS_copy1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TEMP_PIPELINE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get List of Files",
						"description": "Using This activity, you will get total count of zip files are present at source location.\nTotal count will be output result of this activity & input for foreach activity.\n\n",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Truncate_Sales_Temp_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RFS_SALES_SOURCE",
								"type": "DatasetReference",
								"parameters": {
									"container_name": {
										"value": "@variables('source_container')",
										"type": "Expression"
									},
									"filename": "*.zip"
								}
							},
							"fieldList": [
								"itemName",
								"itemType",
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ProcessEachFile",
						"description": "This activity has multiple inner activity inside.\nNumber of Runs of this activity equal to total count of input files.\nIt will process each file parallelly. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get List of Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get List of Files').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 15,
							"activities": [
								{
									"name": "SetFileName",
									"description": "This activity will set file name variable value as a processed item name.\n",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "filename",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CopyPOSSTLDtoStaging",
									"description": "This activity performs copy task.\nIt copies all files to stldtemp2 location which includes STLD in their name. ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ExtractZipFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@concat(item().name,'*')",
													"type": "Expression"
												},
												"wildcardFileName": "*STLD*",
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"copyBehavior": "FlattenHierarchy"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 8
									},
									"inputs": [
										{
											"referenceName": "RFS_SALES_CONTAINER",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('destination_container')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "RFS_SALES_CONTAINER",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('temp_container')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "ExtractZipFiles",
									"description": "Extract zip file into stldtemp container.\nSo each zip file from stldetl container will extract to stldtemp container.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings",
												"compressionProperties": {
													"type": "ZipDeflateReadSettings"
												}
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 8
									},
									"inputs": [
										{
											"referenceName": "RFS_SALES_SOURCE",
											"type": "DatasetReference",
											"parameters": {
												"container_name": {
													"value": "@variables('source_container')",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "RFS_SALES_CONTAINER",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('destination_container')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "ExecuteSalesXML",
									"description": "This is inner activity inside foreach activity. which Executes RFS_SALES_PROCESS named child pipeline for each file.",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "GetSTLDXMLName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "temp2_update_cashless",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"source_container": {
												"value": "@variables('temp_container')",
												"type": "Expression"
											},
											"file_name": {
												"value": "@activity('GetSTLDXMLName').output.childItems[0].name",
												"type": "Expression"
											},
											"stld_source_container": {
												"value": "@variables('source_container')",
												"type": "Expression"
											},
											"stld_filename": {
												"value": "@item().name",
												"type": "Expression"
											},
											"err_container": {
												"value": "@variables('err_container')",
												"type": "Expression"
											},
											"arc_container": {
												"value": "@variables('arch_container')",
												"type": "Expression"
											},
											"A": {
												"value": "@variables('checksp')",
												"type": "Expression"
											},
											"B": {
												"value": "@variables('checkspp')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "GetSTLDXMLName",
									"description": "This activity use to get processed stld file and pass same file to child pipeline for next process.",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "CopyPOSSTLDtoStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "RFS_SALES_SOURCE",
											"type": "DatasetReference",
											"parameters": {
												"container_name": {
													"value": "@variables('temp_container')",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('data_',activity('CopyPOSSTLDtoStaging').ActivityRunId,'*')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"childItems",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								}
							]
						}
					},
					{
						"name": "DeleteandMoveTemp",
						"description": "Using this activity deleting all files from stldtemp and stldtemp2 containers.",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ProcessEachFile",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RFS_SALES_DELETE_TEMP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"temp1": {
									"value": "@variables('destination_container')",
									"type": "Expression"
								},
								"temp2": {
									"value": "@variables('temp_container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "CheckServerStatus",
						"description": "This activity check server status to proceed ahead. If server status is online activity will succeed, if server is offline activity will Faile & throw an error message.",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SERVER_CHECK]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('dbname')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Truncate_Sales_Temp_Tables",
						"description": "This activity runs [SP_TRUNCATE_ALL_SALES_TEMP_TABLES] Stored procedure.\nThis stored procedure going to truncates all sales staging table. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CheckServerStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_TRUNCATE_ALL_SALES_TEMP_TABLES]"
						},
						"linkedServiceName": {
							"referenceName": "BIIntegrationSQL_AzureIR",
							"type": "LinkedServiceReference",
							"parameters": {
								"DBName": {
									"value": "@variables('databasename')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteNamesDB",
						"description": "Executes RFS_NAMESDB pipeline.\nWhich process if namedb file exist in namedb container.",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CheckServerStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RFS_NAMESDB",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecuteProductDB",
						"description": "Executes RFS_PRODUCTDB pipeline.\nWhich process if productdb file exist in productdb container.",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CheckServerStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RFS_PRODUCTDB",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"source_container": {
						"type": "String",
						"defaultValue": "stldetl"
					},
					"filename": {
						"type": "String"
					},
					"destination_container": {
						"type": "String",
						"defaultValue": "stldtemp"
					},
					"temp_container": {
						"type": "String",
						"defaultValue": "stldtemp2"
					},
					"arch_container": {
						"type": "String",
						"defaultValue": "stldarch"
					},
					"err_container": {
						"type": "String",
						"defaultValue": "stlderr"
					},
					"businessdate": {
						"type": "String"
					},
					"storeid": {
						"type": "String"
					},
					"BusinessDateOnSuccess": {
						"type": "String"
					},
					"StoreidOnSuccess": {
						"type": "String"
					},
					"stldfilename": {
						"type": "String"
					},
					"dbname": {
						"type": "String",
						"defaultValue": "RFS_SALES_ETL"
					},
					"databasename": {
						"type": "String",
						"defaultValue": "RFS_SALES_STAGING"
					},
					"checksp": {
						"type": "String",
						"defaultValue": "Success"
					},
					"checkspp": {
						"type": "String",
						"defaultValue": "Fail"
					}
				},
				"folder": {
					"name": "Master Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-15T05:44:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/RFS_NAMESDB')]",
				"[concat(variables('factoryId'), '/pipelines/RFS_PRODUCTDB')]",
				"[concat(variables('factoryId'), '/pipelines/temp2_update_cashless')]"
			]
		}
	]
}