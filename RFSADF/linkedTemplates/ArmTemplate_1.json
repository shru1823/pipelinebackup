{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "RFSADF"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.businesscentral.dynamics.com/myapi?$format=application/json;odata.metadata=none"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/RFS_SALES_SOURCE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RFS_BLOB_ETL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container_name": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sales Dataset"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container_name",
							"type": "Expression"
						}
					},
					"compression": {
						"type": "ZipDeflate",
						"level": "Fastest"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_SALES_SOURCE_ZIP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RFS_BLOB_ETL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sales Dataset"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_SALES_STLD_XML')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RFS_BLOB_ETL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "sales"
					},
					"files": {
						"type": "string",
						"defaultValue": "POS_STLD_344_00060_20221105.20221106061001"
					}
				},
				"folder": {
					"name": "Sales Dataset"
				},
				"annotations": [],
				"type": "Xml",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().files",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_SALES_STLD_XML_copy1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RFS_BLOB_ETL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "sales"
					},
					"files": {
						"type": "string",
						"defaultValue": "POS_STLD_344_00060_20221105.2022110606100.xml"
					}
				},
				"folder": {
					"name": "Sales Dataset"
				},
				"annotations": [],
				"type": "Xml",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().files",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SALES_RFS_CHECK')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BIIntegrationSQL_AzureIR",
					"type": "LinkedServiceReference",
					"parameters": {
						"DBName": "TEMP_RFS_SALES_CHECK"
					}
				},
				"parameters": {
					"tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sales Dataset"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLServer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BIIntegration_SQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "StoreId",
						"type": "varchar"
					},
					{
						"name": "BusinessDate",
						"type": "date"
					},
					{
						"name": "ItemId",
						"type": "varchar"
					},
					{
						"name": "ItemName",
						"type": "varchar"
					},
					{
						"name": "RecipeContainedFlag",
						"type": "varchar"
					},
					{
						"name": "GroupName",
						"type": "varchar"
					},
					{
						"name": "UOM",
						"type": "varchar"
					},
					{
						"name": "OpeningStock",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "OpeningStockAmount",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "DeliveryCount",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "DeliveryAmount",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "TransferInCount",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "TransferInAmt",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "TransferOutCount",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "TransferOutAmt",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "TransferAmount",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "RProRWasQTY",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "RProRWasAmt",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "UsageSaleQTY",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "UsageSaleAmt",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "MDSSaleQTY",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "MDSSaleAmt",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "ManagerMealQTY",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "ManagerMealAmt",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "Employee_MealQTY",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "EmployeeMealAmt",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "PromoUsageQTY",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "PromoUsageAmt",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "FullWasteQTY",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "FullWasteAmt",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "ExpStock",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "InventoryCountQTY",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "InventoryCountAmt",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "UsagePreQTY",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "UsagePreAmt",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "UsagePostQTY",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "UsagePostAmt",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "PricePerCase",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "UnitsPerCase",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "unitPrice",
						"type": "decimal",
						"precision": 22,
						"scale": 10
					},
					{
						"name": "ModifedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "INVENTORYCONTROL_backup"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sales_xml_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RFS_BLOB_ETL",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Sales Dataset"
				},
				"annotations": [],
				"type": "Xml",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "POS_STLD_344_00110_20220222.20220223061003.xml",
						"container": "sales"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_COGS_EXTRACTZIP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExtractZipFiles",
						"description": "This activity performs extraction of ZIP.\nAfter extraction generated daily sales, food paper cost and inventory cost control csv save in one folder.\nFolder will autogenerate, and name of folder is same as processed zip file name.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RFS_COGS_SOURCE_FILE",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.source_container",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.source_file",
										"type": "Expression"
									},
									"folder": "@string('')"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_COGS_CONTAINER",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.temp_container",
										"type": "Expression"
									},
									"folder": "@string('')"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"source_container": {
						"type": "string"
					},
					"temp_container": {
						"type": "string"
					},
					"source_file": {
						"type": "string"
					}
				},
				"folder": {
					"name": "COGS Child Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-19T06:35:50Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_COGS_EXTRACTZIP_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExtractZipFiles",
						"description": "This activity performs extraction of ZIP.\nAfter extraction generated daily sales, food paper cost and inventory cost control csv save in one folder.\nFolder will autogenerate, and name of folder is same as processed zip file name.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RFS_COGS_SOURCE_FILE",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.source_container",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.source_file",
										"type": "Expression"
									},
									"folder": "@string('')"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_COGS_CONTAINER",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.temp_container",
										"type": "Expression"
									},
									"folder": "@string('')"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"source_container": {
						"type": "string"
					},
					"temp_container": {
						"type": "string"
					},
					"source_file": {
						"type": "string"
					}
				},
				"folder": {
					"name": "COGS_TEST_CHILD_PIPELINES"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-02T06:36:30Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_COGS_PROCESS_CSV')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDailySalesData",
						"description": "Daily Sales csv data map to Daily Sales staging table in database.\nAll columns mapping is present in mapping section. \nSource data collected from the pipeline runs.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Store",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "store_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BusinessDay",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "business_day",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PMixSales",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PMixSales",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 22
										}
									},
									{
										"source": {
											"name": "DailyGSales",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DailyGSales",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_COGS_CSV_SOURCE",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.temp_container",
										"type": "Expression"
									},
									"folder": {
										"value": "@pipeline().parameters.temp_folder",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.dailysales_file",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"tableName": "TEMP_DAILY_SALES"
								}
							}
						]
					},
					{
						"name": "CopyFoodPaperCostData",
						"description": "Food Paper Cost csv data map to food Paper Cost staging table in database.\nAll columns mapping is present in mapping section. \nSource data collected from the pipeline runs.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Store",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "store_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MIC",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ItemCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Tag",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Business_Date",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Food",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Food_Cost",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 22
										}
									},
									{
										"source": {
											"name": "PaperIn",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PaperIn",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 22
										}
									},
									{
										"source": {
											"name": "PaperOut",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PaperOut",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 22
										}
									},
									{
										"source": {
											"name": "TypeCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TypeCode",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_COGS_CSV_SOURCE",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.temp_container",
										"type": "Expression"
									},
									"folder": {
										"value": "@pipeline().parameters.temp_folder",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.foodpaper_file",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"tableName": "TEMP_FOODPAPER_COST"
								}
							}
						]
					},
					{
						"name": "CopyInventoryData",
						"description": "Inventory Cost Control csv data map to Inventory Cost Control staging table in database.\nAll columns mapping is present in mapping section. \nSource data collected from the pipeline runs.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Store",
											"type": "String"
										},
										"sink": {
											"name": "store_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "BusinessDate",
											"type": "String"
										},
										"sink": {
											"name": "business_date",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ItemID",
											"type": "String"
										},
										"sink": {
											"name": "Item_Id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String"
										},
										"sink": {
											"name": "Food_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "RecipeContainedFlag",
											"type": "String"
										},
										"sink": {
											"name": "RecipeContainedFlag",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Group",
											"type": "String"
										},
										"sink": {
											"name": "Group_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UOM",
											"type": "String"
										},
										"sink": {
											"name": "UOM",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "OpeningStock",
											"type": "String"
										},
										"sink": {
											"name": "Opening_Stock",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "OpeningStockAmount",
											"type": "String"
										},
										"sink": {
											"name": "Opening_Stock_Amount",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DeliveryCount",
											"type": "String"
										},
										"sink": {
											"name": "Delivery_Count",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DeliveryAmount",
											"type": "String"
										},
										"sink": {
											"name": "Delivery_Amount",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TransferInCount",
											"type": "String"
										},
										"sink": {
											"name": "TransferIn_Count",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TransferInAmt",
											"type": "String"
										},
										"sink": {
											"name": "TransferIn_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TransferOutCount",
											"type": "String"
										},
										"sink": {
											"name": "Transfer_Out_Count",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TransferOutAmt",
											"type": "String"
										},
										"sink": {
											"name": "Transfer_Out_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TransferAmount",
											"type": "String"
										},
										"sink": {
											"name": "Transfer_Amount",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "RProRWasQTY",
											"type": "String"
										},
										"sink": {
											"name": "R_Pro_R_Was_QTY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "RProRWasAmt",
											"type": "String"
										},
										"sink": {
											"name": "R_Pro_R_Was_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Usage_saleQTY",
											"type": "String"
										},
										"sink": {
											"name": "Usage_sale_QTY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Usage_saleAmt",
											"type": "String"
										},
										"sink": {
											"name": "Usage_sale_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MDSSaleQTY",
											"type": "String"
										},
										"sink": {
											"name": "MDS_Sale_QTY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MDSSaleAmt",
											"type": "String"
										},
										"sink": {
											"name": "MDS_Sale_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ManagerMealQTY",
											"type": "String"
										},
										"sink": {
											"name": "ManagerMeal_QTY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ManagerMealAmt",
											"type": "String"
										},
										"sink": {
											"name": "ManagerMeal_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "EmployeeMealQTY",
											"type": "String"
										},
										"sink": {
											"name": "Employee_Meal_QTY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "EmployeeMealAmt",
											"type": "String"
										},
										"sink": {
											"name": "EmployeeMeal_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PromoUsageQTY",
											"type": "String"
										},
										"sink": {
											"name": "PromoUsage_QTY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PromoUsageAmt",
											"type": "String"
										},
										"sink": {
											"name": "PromoUsage_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FullWasteQTY",
											"type": "String"
										},
										"sink": {
											"name": "FullWaste_QTY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FullWasteAmt",
											"type": "String"
										},
										"sink": {
											"name": "FullWaste_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ExpStock",
											"type": "String"
										},
										"sink": {
											"name": "ExpStock",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "InventoryCountQTY",
											"type": "String"
										},
										"sink": {
											"name": "InventoryCount_QTY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "InventoryCountAmt",
											"type": "String"
										},
										"sink": {
											"name": "InventoryCount_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UsagePreQTY",
											"type": "String"
										},
										"sink": {
											"name": "Usage_Pre_QTY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UsagePreAmt",
											"type": "String"
										},
										"sink": {
											"name": "Usage_Pre_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UsagePostQTY",
											"type": "String"
										},
										"sink": {
											"name": "Usage_Post_QTY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UsagePostAmt",
											"type": "String"
										},
										"sink": {
											"name": "Usage_Post_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PricePerCase",
											"type": "String"
										},
										"sink": {
											"name": "PricePerCase",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UnitsPerCase",
											"type": "String"
										},
										"sink": {
											"name": "UnitsPerCase",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "unitPrice",
											"type": "String"
										},
										"sink": {
											"name": "unitPrice",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_COGS_CSV_SOURCE",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.temp_container",
										"type": "Expression"
									},
									"folder": {
										"value": "@pipeline().parameters.temp_folder",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.inventory_file",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"tableName": "TEMP_INVENTORY_CONTROL"
								}
							}
						]
					},
					{
						"name": "LogDailySalesOutput",
						"description": "This activity maintains logs.\nAll details maintained in cogs pipeline logs table.\nColum's mapping is present in mapping section ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyDailySalesData",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{pipeline().parameters.temp_folder}' as File_Name,\n'@{pipeline().parameters.dailysales_file}' as Process,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{activity('CopyDailySalesData').output.rowsCopied}' as rowsCopied,\n'@{activity('CopyDailySalesData').output.rowsRead}' as RowsRead,\n'@{activity('CopyDailySalesData').output.usedParallelCopies}' as No_ParallelCopies,\n'@{activity('CopyDailySalesData').output.copyDuration}' as copyDuration_in_secs,\n'@{activity('CopyDailySalesData').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\n'@{utcnow()}' as CopyActivity_End_Time,\n'@{activity('CopyDailySalesData').output.executionDetails[0].status}' as Status",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "File_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FileName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Process",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Process",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "rowsCopied",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "rowsCopied",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RowsRead",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RowsRead",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "No_ParallelCopies",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "No_ParallelCopies",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "copyDuration_in_secs",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "copyDuration_in_secs",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "effectiveIntegrationRuntime",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "effectiveIntegrationRuntime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Execution_Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CopyActivity_End_Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CopyActivity_End_Time",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"tableName": "temp"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@variables('log_db')",
										"type": "Expression"
									},
									"tableName": {
										"value": "@variables('log_table')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LogFoodPaperCost",
						"description": "This activity maintains logs.\nAll details maintained in cogs pipeline logs table.\nColum's mapping is present in mapping section ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyFoodPaperCostData",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT '@{pipeline().DataFactory}' as DataFactory_Name,\r\n'@{pipeline().Pipeline}' as Pipeline_Name,\r\n'@{pipeline().parameters.temp_folder}' as File_Name,\r\n'@{pipeline().parameters.foodpaper_file}' as Process,\r\n'@{pipeline().TriggerType}' as TriggerType,\r\n'@{pipeline().TriggerId}' as TriggerId,\r\n'@{pipeline().TriggerName}' as TriggerName,\r\n'@{pipeline().TriggerTime}' as TriggerTime,\r\n'@{activity('CopyFoodPaperCostData').output.rowsCopied}' as rowsCopied,\r\n'@{activity('CopyFoodPaperCostData').output.rowsRead}' as RowsRead,\r\n'@{activity('CopyFoodPaperCostData').output.usedParallelCopies}' as No_ParallelCopies,\r\n'@{activity('CopyFoodPaperCostData').output.copyDuration}' as copyDuration_in_secs,\r\n'@{activity('CopyFoodPaperCostData').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\r\n'@{utcnow()}' as CopyActivity_End_Time,\r\n'@{activity('CopyFoodPaperCostData').output.executionDetails[0].status}' as Status",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "File_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FileName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Process",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Process",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "rowsCopied",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "rowsCopied",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RowsRead",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RowsRead",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "No_ParallelCopies",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "No_ParallelCopies",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "copyDuration_in_secs",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "copyDuration_in_secs",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "effectiveIntegrationRuntime",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "effectiveIntegrationRuntime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Execution_Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CopyActivity_End_Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CopyActivity_End_Time",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"tableName": "temp"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@variables('log_db')",
										"type": "Expression"
									},
									"tableName": {
										"value": "@variables('log_table')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LogInventoryControl",
						"description": "This activity maintains logs.\nAll details maintained in cogs pipeline logs table.\nColum's mapping is present in mapping section ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyInventoryData",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT '@{pipeline().DataFactory}' as DataFactory_Name,\r\n'@{pipeline().Pipeline}' as Pipeline_Name,\r\n'@{pipeline().parameters.temp_folder}' as File_Name,\r\n'@{pipeline().parameters.inventory_file}' as Process,\r\n'@{pipeline().TriggerType}' as TriggerType,\r\n'@{pipeline().TriggerId}' as TriggerId,\r\n'@{pipeline().TriggerName}' as TriggerName,\r\n'@{pipeline().TriggerTime}' as TriggerTime,\r\n'@{activity('CopyInventoryData').output.rowsCopied}' as rowsCopied,\r\n'@{activity('CopyInventoryData').output.rowsRead}' as RowsRead,\r\n'@{activity('CopyInventoryData').output.usedParallelCopies}' as No_ParallelCopies,\r\n'@{activity('CopyInventoryData').output.copyDuration}' as copyDuration_in_secs,\r\n'@{activity('CopyInventoryData').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\r\n'@{utcnow()}' as CopyActivity_End_Time,\r\n'@{activity('CopyInventoryData').output.executionDetails[0].status}' as Status",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "File_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FileName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Process",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Process",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "rowsCopied",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "rowsCopied",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RowsRead",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RowsRead",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "No_ParallelCopies",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "No_ParallelCopies",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "copyDuration_in_secs",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "copyDuration_in_secs",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "effectiveIntegrationRuntime",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "effectiveIntegrationRuntime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Execution_Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CopyActivity_End_Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CopyActivity_End_Time",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"tableName": "temp"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@variables('log_db')",
										"type": "Expression"
									},
									"tableName": {
										"value": "@variables('log_table')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "RaiseErrorDailySales",
						"description": "Use to throw an error if previous activity gets failed.",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "CopyDailySalesData",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "error_variable",
							"value": {
								"value": "@div(1, 0)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RaiseErrorFoodPaperCost",
						"description": "Use to throw an error if previous activity gets failed.",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "CopyFoodPaperCostData",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "error_variable",
							"value": {
								"value": "@div(1, 0)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RaiseErrorInventoryControl",
						"description": "Use to throw an error if previous activity gets failed.",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "CopyInventoryData",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "error_variable",
							"value": {
								"value": "@div(1, 0)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"temp_container": {
						"type": "string"
					},
					"temp_folder": {
						"type": "string"
					},
					"dailysales_file": {
						"type": "string"
					},
					"foodpaper_file": {
						"type": "string"
					},
					"inventory_file": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					}
				},
				"variables": {
					"log_db": {
						"type": "String",
						"defaultValue": "RFS_PIPELINE_LOGS"
					},
					"log_table": {
						"type": "String",
						"defaultValue": "cogs_pipeline_log"
					},
					"error_variable": {
						"type": "String"
					}
				},
				"folder": {
					"name": "COGS Child Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-07T09:28:44Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_COGS_PROCESS_CSV_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDailySalesData",
						"description": "Daily Sales csv data map to Daily Sales staging table in database.\nAll columns mapping is present in mapping section. \nSource data collected from the pipeline runs.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Store",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "store_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BusinessDay",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "business_day",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PMixSales",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PMixSales",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 22
										}
									},
									{
										"source": {
											"name": "DailyGSales",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DailyGSales",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_COGS_CSV_SOURCE",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.temp_container",
										"type": "Expression"
									},
									"folder": {
										"value": "@pipeline().parameters.temp_folder",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.dailysales_file",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"tableName": "TEMP_DAILY_SALES"
								}
							}
						]
					},
					{
						"name": "CopyFoodPaperCostData",
						"description": "Food Paper Cost csv data map to food Paper Cost staging table in database.\nAll columns mapping is present in mapping section. \nSource data collected from the pipeline runs.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Store",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "store_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MIC",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ItemCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Tag",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Business_Date",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Food",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Food_Cost",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 22
										}
									},
									{
										"source": {
											"name": "PaperIn",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PaperIn",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 22
										}
									},
									{
										"source": {
											"name": "PaperOut",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PaperOut",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 22
										}
									},
									{
										"source": {
											"name": "TypeCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TypeCode",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_COGS_CSV_SOURCE",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.temp_container",
										"type": "Expression"
									},
									"folder": {
										"value": "@pipeline().parameters.temp_folder",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.foodpaper_file",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"tableName": "TEMP_FOODPAPER_COST"
								}
							}
						]
					},
					{
						"name": "CopyInventoryData",
						"description": "Inventory Cost Control csv data map to Inventory Cost Control staging table in database.\nAll columns mapping is present in mapping section. \nSource data collected from the pipeline runs.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Store",
											"type": "String"
										},
										"sink": {
											"name": "store_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "BusinessDate",
											"type": "String"
										},
										"sink": {
											"name": "business_date",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ItemID",
											"type": "String"
										},
										"sink": {
											"name": "Item_Id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String"
										},
										"sink": {
											"name": "Food_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "RecipeContainedFlag",
											"type": "String"
										},
										"sink": {
											"name": "RecipeContainedFlag",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Group",
											"type": "String"
										},
										"sink": {
											"name": "Group_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UOM",
											"type": "String"
										},
										"sink": {
											"name": "UOM",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "OpeningStock",
											"type": "String"
										},
										"sink": {
											"name": "Opening_Stock",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "OpeningStockAmount",
											"type": "String"
										},
										"sink": {
											"name": "Opening_Stock_Amount",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DeliveryCount",
											"type": "String"
										},
										"sink": {
											"name": "Delivery_Count",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DeliveryAmount",
											"type": "String"
										},
										"sink": {
											"name": "Delivery_Amount",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TransferInCount",
											"type": "String"
										},
										"sink": {
											"name": "TransferIn_Count",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TransferInAmt",
											"type": "String"
										},
										"sink": {
											"name": "TransferIn_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TransferOutCount",
											"type": "String"
										},
										"sink": {
											"name": "Transfer_Out_Count",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TransferOutAmt",
											"type": "String"
										},
										"sink": {
											"name": "Transfer_Out_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TransferAmount",
											"type": "String"
										},
										"sink": {
											"name": "Transfer_Amount",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "RProRWasQTY",
											"type": "String"
										},
										"sink": {
											"name": "R_Pro_R_Was_QTY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "RProRWasAmt",
											"type": "String"
										},
										"sink": {
											"name": "R_Pro_R_Was_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Usage_saleQTY",
											"type": "String"
										},
										"sink": {
											"name": "Usage_sale_QTY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Usage_saleAmt",
											"type": "String"
										},
										"sink": {
											"name": "Usage_sale_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MDSSaleQTY",
											"type": "String"
										},
										"sink": {
											"name": "MDS_Sale_QTY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MDSSaleAmt",
											"type": "String"
										},
										"sink": {
											"name": "MDS_Sale_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ManagerMealQTY",
											"type": "String"
										},
										"sink": {
											"name": "ManagerMeal_QTY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ManagerMealAmt",
											"type": "String"
										},
										"sink": {
											"name": "ManagerMeal_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "EmployeeMealQTY",
											"type": "String"
										},
										"sink": {
											"name": "Employee_Meal_QTY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "EmployeeMealAmt",
											"type": "String"
										},
										"sink": {
											"name": "EmployeeMeal_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PromoUsageQTY",
											"type": "String"
										},
										"sink": {
											"name": "PromoUsage_QTY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PromoUsageAmt",
											"type": "String"
										},
										"sink": {
											"name": "PromoUsage_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FullWasteQTY",
											"type": "String"
										},
										"sink": {
											"name": "FullWaste_QTY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FullWasteAmt",
											"type": "String"
										},
										"sink": {
											"name": "FullWaste_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ExpStock",
											"type": "String"
										},
										"sink": {
											"name": "ExpStock",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "InventoryCountQTY",
											"type": "String"
										},
										"sink": {
											"name": "InventoryCount_QTY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "InventoryCountAmt",
											"type": "String"
										},
										"sink": {
											"name": "InventoryCount_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UsagePreQTY",
											"type": "String"
										},
										"sink": {
											"name": "Usage_Pre_QTY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UsagePreAmt",
											"type": "String"
										},
										"sink": {
											"name": "Usage_Pre_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UsagePostQTY",
											"type": "String"
										},
										"sink": {
											"name": "Usage_Post_QTY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UsagePostAmt",
											"type": "String"
										},
										"sink": {
											"name": "Usage_Post_Amt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PricePerCase",
											"type": "String"
										},
										"sink": {
											"name": "PricePerCase",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UnitsPerCase",
											"type": "String"
										},
										"sink": {
											"name": "UnitsPerCase",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "unitPrice",
											"type": "String"
										},
										"sink": {
											"name": "unitPrice",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_COGS_CSV_SOURCE",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.temp_container",
										"type": "Expression"
									},
									"folder": {
										"value": "@pipeline().parameters.temp_folder",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.inventory_file",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"tableName": "TEMP_INVENTORY_CONTROL"
								}
							}
						]
					},
					{
						"name": "LogDailySalesOutput",
						"description": "This activity maintains logs.\nAll details maintained in cogs pipeline logs table.\nColum's mapping is present in mapping section ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyDailySalesData",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{pipeline().parameters.temp_folder}' as File_Name,\n'@{pipeline().parameters.dailysales_file}' as Process,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{activity('CopyDailySalesData').output.rowsCopied}' as rowsCopied,\n'@{activity('CopyDailySalesData').output.rowsRead}' as RowsRead,\n'@{activity('CopyDailySalesData').output.usedParallelCopies}' as No_ParallelCopies,\n'@{activity('CopyDailySalesData').output.copyDuration}' as copyDuration_in_secs,\n'@{activity('CopyDailySalesData').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\n'@{utcnow()}' as CopyActivity_End_Time,\n'@{activity('CopyDailySalesData').output.executionDetails[0].status}' as Status",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "File_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FileName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Process",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Process",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "rowsCopied",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "rowsCopied",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RowsRead",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RowsRead",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "No_ParallelCopies",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "No_ParallelCopies",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "copyDuration_in_secs",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "copyDuration_in_secs",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "effectiveIntegrationRuntime",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "effectiveIntegrationRuntime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Execution_Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CopyActivity_End_Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CopyActivity_End_Time",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"tableName": "temp"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@variables('log_db')",
										"type": "Expression"
									},
									"tableName": {
										"value": "@variables('log_table')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LogFoodPaperCost",
						"description": "This activity maintains logs.\nAll details maintained in cogs pipeline logs table.\nColum's mapping is present in mapping section ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyFoodPaperCostData",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT '@{pipeline().DataFactory}' as DataFactory_Name,\r\n'@{pipeline().Pipeline}' as Pipeline_Name,\r\n'@{pipeline().parameters.temp_folder}' as File_Name,\r\n'@{pipeline().parameters.foodpaper_file}' as Process,\r\n'@{pipeline().TriggerType}' as TriggerType,\r\n'@{pipeline().TriggerId}' as TriggerId,\r\n'@{pipeline().TriggerName}' as TriggerName,\r\n'@{pipeline().TriggerTime}' as TriggerTime,\r\n'@{activity('CopyFoodPaperCostData').output.rowsCopied}' as rowsCopied,\r\n'@{activity('CopyFoodPaperCostData').output.rowsRead}' as RowsRead,\r\n'@{activity('CopyFoodPaperCostData').output.usedParallelCopies}' as No_ParallelCopies,\r\n'@{activity('CopyFoodPaperCostData').output.copyDuration}' as copyDuration_in_secs,\r\n'@{activity('CopyFoodPaperCostData').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\r\n'@{utcnow()}' as CopyActivity_End_Time,\r\n'@{activity('CopyFoodPaperCostData').output.executionDetails[0].status}' as Status",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "File_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FileName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Process",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Process",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "rowsCopied",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "rowsCopied",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RowsRead",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RowsRead",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "No_ParallelCopies",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "No_ParallelCopies",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "copyDuration_in_secs",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "copyDuration_in_secs",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "effectiveIntegrationRuntime",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "effectiveIntegrationRuntime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Execution_Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CopyActivity_End_Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CopyActivity_End_Time",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"tableName": "temp"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@variables('log_db')",
										"type": "Expression"
									},
									"tableName": {
										"value": "@variables('log_table')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LogInventoryControl",
						"description": "This activity maintains logs.\nAll details maintained in cogs pipeline logs table.\nColum's mapping is present in mapping section ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyInventoryData",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT '@{pipeline().DataFactory}' as DataFactory_Name,\r\n'@{pipeline().Pipeline}' as Pipeline_Name,\r\n'@{pipeline().parameters.temp_folder}' as File_Name,\r\n'@{pipeline().parameters.inventory_file}' as Process,\r\n'@{pipeline().TriggerType}' as TriggerType,\r\n'@{pipeline().TriggerId}' as TriggerId,\r\n'@{pipeline().TriggerName}' as TriggerName,\r\n'@{pipeline().TriggerTime}' as TriggerTime,\r\n'@{activity('CopyInventoryData').output.rowsCopied}' as rowsCopied,\r\n'@{activity('CopyInventoryData').output.rowsRead}' as RowsRead,\r\n'@{activity('CopyInventoryData').output.usedParallelCopies}' as No_ParallelCopies,\r\n'@{activity('CopyInventoryData').output.copyDuration}' as copyDuration_in_secs,\r\n'@{activity('CopyInventoryData').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\r\n'@{utcnow()}' as CopyActivity_End_Time,\r\n'@{activity('CopyInventoryData').output.executionDetails[0].status}' as Status",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DataFactory_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Pipeline_Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "File_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FileName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Process",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Process",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerType",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TriggerTime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "rowsCopied",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "rowsCopied",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RowsRead",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RowsRead",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "No_ParallelCopies",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "No_ParallelCopies",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "copyDuration_in_secs",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "copyDuration_in_secs",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "effectiveIntegrationRuntime",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "effectiveIntegrationRuntime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Execution_Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CopyActivity_End_Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CopyActivity_End_Time",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"tableName": "temp"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference",
								"parameters": {
									"dbName": {
										"value": "@variables('log_db')",
										"type": "Expression"
									},
									"tableName": {
										"value": "@variables('log_table')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "RaiseErrorDailySales",
						"description": "Use to throw an error if previous activity gets failed.",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "CopyDailySalesData",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "error_variable",
							"value": {
								"value": "@div(1, 0)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RaiseErrorFoodPaperCost",
						"description": "Use to throw an error if previous activity gets failed.",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "CopyFoodPaperCostData",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "error_variable",
							"value": {
								"value": "@div(1, 0)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RaiseErrorInventoryControl",
						"description": "Use to throw an error if previous activity gets failed.",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "CopyInventoryData",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "error_variable",
							"value": {
								"value": "@div(1, 0)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"temp_container": {
						"type": "string"
					},
					"temp_folder": {
						"type": "string"
					},
					"dailysales_file": {
						"type": "string"
					},
					"foodpaper_file": {
						"type": "string"
					},
					"inventory_file": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					}
				},
				"variables": {
					"log_db": {
						"type": "String",
						"defaultValue": "RFS_PIPELINE_LOGS_Test"
					},
					"log_table": {
						"type": "String",
						"defaultValue": "cogs_pipeline_log"
					},
					"error_variable": {
						"type": "String"
					}
				},
				"folder": {
					"name": "COGS_TEST_CHILD_PIPELINES"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-07T05:11:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_SALES_DELETE_TEMP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DeleteTemp",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RFS_SALES_CONTAINER",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.temp1",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "DeleteTemp2",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteTemp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RFS_SALES_CONTAINER",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.temp2",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"temp1": {
						"type": "string"
					},
					"temp2": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SALES Child Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-06T10:07:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_SALES_DELETE_TEMP_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DeleteTemp",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RFS_SALES_CONTAINER",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.temp1",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "DeleteTemp2",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteTemp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RFS_SALES_CONTAINER",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.temp2",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"temp1": {
						"type": "string"
					},
					"temp2": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SALES_TEST_CHILD_PIPELINES"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-02T06:17:34Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_NAMESDB_DATAFLOW')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RFS_CONTAINER_FILE_INPUT",
								"type": "DatasetReference"
							},
							"name": "XMLFileSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "WriteToDB"
						}
					],
					"transformations": [
						{
							"name": "FlattenTask"
						}
					],
					"scriptLines": [
						"source(output(",
						"          NamesDb as ({@version} as double, Language as ({@code} as string, {@name} as string, {@parent} as string, ProductName as (AlternativeName as string, CODName as string, CSOGenericName as string, CSOName as string, CSOSizeName as string, DTName as string, LongName as string, ProductCode as integer, SR_Name as string, SR_Question as string, ShortMonitorName as string, ShortName as string, SummaryMonitorName as string)[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     validationMode: 'none',",
						"     namespaces: true) ~> XMLFileSource",
						"XMLFileSource foldDown(unroll(NamesDb.Language.ProductName),",
						"     mapColumn(",
						"          {@version} = NamesDb.{@version},",
						"          {@code} = NamesDb.Language.{@code},",
						"          {@name} = NamesDb.Language.{@name},",
						"          {@parent} = NamesDb.Language.{@parent},",
						"          AlternativeName = NamesDb.Language.ProductName.AlternativeName,",
						"          CODName = NamesDb.Language.ProductName.CODName,",
						"          CSOGenericName = NamesDb.Language.ProductName.CSOGenericName,",
						"          CSOName = NamesDb.Language.ProductName.CSOName,",
						"          CSOSizeName = NamesDb.Language.ProductName.CSOSizeName,",
						"          DTName = NamesDb.Language.ProductName.DTName,",
						"          LongName = NamesDb.Language.ProductName.LongName,",
						"          ProductCode = NamesDb.Language.ProductName.ProductCode,",
						"          SR_Name = NamesDb.Language.ProductName.SR_Name,",
						"          SR_Question = NamesDb.Language.ProductName.SR_Question,",
						"          ShortMonitorName = NamesDb.Language.ProductName.ShortMonitorName,",
						"          ShortName = NamesDb.Language.ProductName.ShortName,",
						"          SummaryMonitorName = NamesDb.Language.ProductName.SummaryMonitorName",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTask",
						"FlattenTask sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          Alternative_name = AlternativeName,",
						"          COD_Name = CODName,",
						"          COS_Generic_Name = CSOGenericName,",
						"          CSO_Name = CSOName,",
						"          CSO_Size_Name = CSOSizeName,",
						"          DT_Name = DTName,",
						"          Long_Name = LongName,",
						"          Product_Code = ProductCode,",
						"          SR_Name,",
						"          SR_Question,",
						"          Short_Monitor_Name = ShortMonitorName,",
						"          Short_Name = ShortName,",
						"          Summary_Monitor_Name = SummaryMonitorName,",
						"          Parent = {@parent}",
						"     )) ~> WriteToDB"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_PRODUCTDB_DATAFLOW')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RFS_PRODUCTDB",
								"type": "DatasetReference"
							},
							"name": "XMLFileSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "WriteProductDB"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "WriteProductCanAdds"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "WriteProductCategories"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "WriteCategoryMenus"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "WriteProductChoices"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "WriteProductComments"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "WriteProductComposition"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "WriteProductCustomParameters"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "WriteProductDistribution"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "WriteProductPriceList"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "WriteProductProductionKVSRoute"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "WriteProductSizeSelection"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "WriteSubstitutionList"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "WriteProduct"
						}
					],
					"transformations": [
						{
							"name": "FlattenProductDB"
						},
						{
							"name": "FlattenProductCanAdds"
						},
						{
							"name": "FlattenProductCategories"
						},
						{
							"name": "FlattenCategoryMenus"
						},
						{
							"name": "FlattenProductChoices"
						},
						{
							"name": "FlattenProductComments"
						},
						{
							"name": "FlattenProductComposition"
						},
						{
							"name": "FlattenProductCustomParameters"
						},
						{
							"name": "FlattenProductDistribution"
						},
						{
							"name": "FlattenProductPriceList"
						},
						{
							"name": "FlattenProductProductionKVSRoute"
						},
						{
							"name": "FlattenProductSizeSelection"
						},
						{
							"name": "FlattenSubstitutionList"
						},
						{
							"name": "FlattenProduct"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductDb as ({@version} as double, Product as ({@grillGroup} as string, {@modified} as boolean, {@productCategory} as string, {@productClass} as string, {@salable} as boolean, {@statusCode} as string, AutoCondimentDisplay as (DisplayPOS as boolean, DisplayPOSEvent as string, DisplayPickList as boolean, DisplayReceipt as boolean), CSOHasLimitedTimeDiscount as boolean, CanAdds as (Component as (ChargeThreshold as short, CostInclusive as boolean, DefaultQuantity as boolean, DisplayOnCSO as boolean, MaxQuantity as short, MinQuantity as boolean, ProductCode as short, ProductCodeImpactedOnRTM as short, RefundThreshold as boolean, setParentProductOutage as boolean)[]), Categories as (Category as ({@categoryID} as integer, {@displaySizeSelection} as boolean, {@sequence} as short)[]), CategoryMenus as (CategoryMenu as ({@categoryID} as short)[]), ChoiceGroup as string, Choices as (Component as (Anchor as boolean, ChargeThreshold as short, CostInclusive as boolean, DefaultProduct as short, DefaultQuantity as short, FlexibleChoice as boolean, MaxQuantity as short, MinQuantity as short, PriceCalculationMode as string, ProductCode as integer, ReferenceProduct as short, RefundThreshold as boolean, setParentProductOutage as boolean)[]), Comments as (Component as (ChargeThreshold as boolean, CostInclusive as boolean, DefaultQuantity as boolean, DisplayOnCSO as boolean, MaxQuantity as boolean, MinQuantity as boolean, ProductCode as integer, ProductCodeImpactedOnRTM as short, RefundThreshold as boolean, setParentProductOutage as boolean)[]), Composition as (Component as (Anchor as boolean, ChargeThreshold as short, CostInclusive as boolean, DefaultQuantity as short, FlexibleChoice as boolean, ForceCompDisplay as string, MaxQuantity as short, MinQuantity as short, PlainGrill as boolean, PriceCalculationMode as string, ProductCode as short, ProductCodeImpactedOnRTM as short, RefundThreshold as boolean, SmartGrill as boolean, setParentProductOutage as boolean)[]), ContainerVM as boolean, CustomParameters as (Parameter as ({@name} as string, {@value} as string)[]), DayPartCode as string, Department as (ClassDepartment as (Id as string, SubClassDepartment as (Id as string)), Id as string), DisplayOrder as short, DisplayWaste as boolean, Distribution as (Point as string[]), DummyProduct as boolean, FamilyGroup as string, IsMutuallyExclusive as boolean, Presentation as (BGNormal as string, BGPressed as string, BitmapName as string, CSOCartImageName as string, CSOCircleImageName as string, CSODimensionImageName as string, CSOGrillImageName as string, CSOLargeImageName as string, CSOSmallImageName as string, CSOValueMealImage as string, CytPreviewImage as string, CytPreviewImageBottom as string, DisplayColor as string, FGNormal as string, FGPressed as string, GrillBitmapName as string, KVSColor as string, SmallBitmapName as string, {_value_} as string), PriceList as (PriceTag as (Pricing as ({@priceCode} as string, Price as double, Tax as ({@entry} as short, {@rule} as string, {@taxCode} as string))[])), ProductCode as integer, ProductUnit as string, Production as (AutoGrill as boolean, BunPrepTypeID as short, Grillable as ({@doNotPrint} as boolean, {@status} as boolean), KVSRoutes as (Route as ({@id} as short)[]), KVSdisplay as ({@displayGrillInstructions} as string, {@doNotDecompVM} as boolean, {@showOnMFY} as boolean, {@showOnMain} as boolean, {@showOnSummary} as boolean), PPG as string, RapidTurnoverMonitor as ({@autoBumpTimeout} as short, {@priority} as short, {@threshold} as short, {@type} as string), SubstitutionGrill as string, TriggerDisplayOnOrb as boolean, UseBufferEngine as ({@isBunBuffer} as boolean, {@status} as boolean), displayNumbersInsteadofModifiers as boolean), SalesType as ({@eatin} as boolean, {@other} as boolean, {@takeout} as boolean), Secondary as boolean, SizeSelection as (Size as ({@code} as short, {@entry} as short, {@showDimensionOnRCTLocalPromotion} as boolean, {@showDimensionToCustomer} as boolean)[]), SmartReminder as ({@group} as string, Priority as short), StationGroup as string, SubstitutionList as (Item as ({@id} as short, {@productCode} as short)[]), TimeRestrictions as (AllowedTime as ({@endTime} as string, {@startTime} as string)), Upsizable as boolean)[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     validationMode: 'none',",
						"     namespaces: true) ~> XMLFileSource",
						"XMLFileSource foldDown(unroll(ProductDb.Product),",
						"     mapColumn(",
						"          {@version} = ProductDb.{@version},",
						"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
						"          {@modified} = ProductDb.Product.{@modified},",
						"          {@productCategory} = ProductDb.Product.{@productCategory},",
						"          {@productClass} = ProductDb.Product.{@productClass},",
						"          {@salable} = ProductDb.Product.{@salable},",
						"          {@statusCode} = ProductDb.Product.{@statusCode},",
						"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
						"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
						"          CanAdds = ProductDb.Product.CanAdds,",
						"          Categories = ProductDb.Product.Categories,",
						"          CategoryMenus = ProductDb.Product.CategoryMenus,",
						"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
						"          Choices = ProductDb.Product.Choices,",
						"          Comments = ProductDb.Product.Comments,",
						"          Composition = ProductDb.Product.Composition,",
						"          ContainerVM = ProductDb.Product.ContainerVM,",
						"          CustomParameters = ProductDb.Product.CustomParameters,",
						"          DayPartCode = ProductDb.Product.DayPartCode,",
						"          Department = ProductDb.Product.Department,",
						"          DisplayOrder = ProductDb.Product.DisplayOrder,",
						"          DisplayWaste = ProductDb.Product.DisplayWaste,",
						"          Distribution = ProductDb.Product.Distribution,",
						"          DummyProduct = ProductDb.Product.DummyProduct,",
						"          FamilyGroup = ProductDb.Product.FamilyGroup,",
						"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
						"          Presentation = ProductDb.Product.Presentation,",
						"          PriceList = ProductDb.Product.PriceList,",
						"          ProductCode = ProductDb.Product.ProductCode,",
						"          ProductUnit = ProductDb.Product.ProductUnit,",
						"          Production = ProductDb.Product.Production,",
						"          SalesType = ProductDb.Product.SalesType,",
						"          Secondary = ProductDb.Product.Secondary,",
						"          SizeSelection = ProductDb.Product.SizeSelection,",
						"          SmartReminder = ProductDb.Product.SmartReminder,",
						"          StationGroup = ProductDb.Product.StationGroup,",
						"          SubstitutionList = ProductDb.Product.SubstitutionList,",
						"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
						"          Upsizable = ProductDb.Product.Upsizable",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenProductDB",
						"XMLFileSource foldDown(unroll(ProductDb.Product.CanAdds.Component, ProductDb.Product),",
						"     mapColumn(",
						"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
						"          {@modified} = ProductDb.Product.{@modified},",
						"          {@productCategory} = ProductDb.Product.{@productCategory},",
						"          {@productClass} = ProductDb.Product.{@productClass},",
						"          {@salable} = ProductDb.Product.{@salable},",
						"          {@statusCode} = ProductDb.Product.{@statusCode},",
						"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
						"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
						"          ChargeThreshold = ProductDb.Product.CanAdds.Component.ChargeThreshold,",
						"          CostInclusive = ProductDb.Product.CanAdds.Component.CostInclusive,",
						"          DefaultQuantity = ProductDb.Product.CanAdds.Component.DefaultQuantity,",
						"          DisplayOnCSO = ProductDb.Product.CanAdds.Component.DisplayOnCSO,",
						"          MaxQuantity = ProductDb.Product.CanAdds.Component.MaxQuantity,",
						"          MinQuantity = ProductDb.Product.CanAdds.Component.MinQuantity,",
						"          ProductCode2 = ProductDb.Product.CanAdds.Component.ProductCode,",
						"          ProductCodeImpactedOnRTM = ProductDb.Product.CanAdds.Component.ProductCodeImpactedOnRTM,",
						"          RefundThreshold = ProductDb.Product.CanAdds.Component.RefundThreshold,",
						"          setParentProductOutage = ProductDb.Product.CanAdds.Component.setParentProductOutage,",
						"          Categories = ProductDb.Product.Categories,",
						"          CategoryMenus = ProductDb.Product.CategoryMenus,",
						"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
						"          Choices = ProductDb.Product.Choices,",
						"          Comments = ProductDb.Product.Comments,",
						"          Composition = ProductDb.Product.Composition,",
						"          ContainerVM = ProductDb.Product.ContainerVM,",
						"          CustomParameters = ProductDb.Product.CustomParameters,",
						"          DayPartCode = ProductDb.Product.DayPartCode,",
						"          Department = ProductDb.Product.Department,",
						"          DisplayOrder = ProductDb.Product.DisplayOrder,",
						"          DisplayWaste = ProductDb.Product.DisplayWaste,",
						"          Distribution = ProductDb.Product.Distribution,",
						"          DummyProduct = ProductDb.Product.DummyProduct,",
						"          FamilyGroup = ProductDb.Product.FamilyGroup,",
						"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
						"          Presentation = ProductDb.Product.Presentation,",
						"          PriceList = ProductDb.Product.PriceList,",
						"          ProductCodem = ProductDb.Product.ProductCode,",
						"          ProductUnit = ProductDb.Product.ProductUnit,",
						"          Production = ProductDb.Product.Production,",
						"          SalesType = ProductDb.Product.SalesType,",
						"          Secondary = ProductDb.Product.Secondary,",
						"          SizeSelection = ProductDb.Product.SizeSelection,",
						"          SmartReminder = ProductDb.Product.SmartReminder,",
						"          StationGroup = ProductDb.Product.StationGroup,",
						"          SubstitutionList = ProductDb.Product.SubstitutionList,",
						"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
						"          Upsizable = ProductDb.Product.Upsizable",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenProductCanAdds",
						"XMLFileSource foldDown(unroll(ProductDb.Product.Categories.Category, ProductDb.Product),",
						"     mapColumn(",
						"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
						"          {@modified} = ProductDb.Product.{@modified},",
						"          {@productCategory} = ProductDb.Product.{@productCategory},",
						"          {@productClass} = ProductDb.Product.{@productClass},",
						"          {@salable} = ProductDb.Product.{@salable},",
						"          {@statusCode} = ProductDb.Product.{@statusCode},",
						"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
						"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
						"          CanAdds = ProductDb.Product.CanAdds,",
						"          {@categoryID} = ProductDb.Product.Categories.Category.{@categoryID},",
						"          {@displaySizeSelection} = ProductDb.Product.Categories.Category.{@displaySizeSelection},",
						"          {@sequence} = ProductDb.Product.Categories.Category.{@sequence},",
						"          CategoryMenus = ProductDb.Product.CategoryMenus,",
						"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
						"          Choices = ProductDb.Product.Choices,",
						"          Comments = ProductDb.Product.Comments,",
						"          Composition = ProductDb.Product.Composition,",
						"          ContainerVM = ProductDb.Product.ContainerVM,",
						"          CustomParameters = ProductDb.Product.CustomParameters,",
						"          DayPartCode = ProductDb.Product.DayPartCode,",
						"          Department = ProductDb.Product.Department,",
						"          DisplayOrder = ProductDb.Product.DisplayOrder,",
						"          DisplayWaste = ProductDb.Product.DisplayWaste,",
						"          Distribution = ProductDb.Product.Distribution,",
						"          DummyProduct = ProductDb.Product.DummyProduct,",
						"          FamilyGroup = ProductDb.Product.FamilyGroup,",
						"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
						"          Presentation = ProductDb.Product.Presentation,",
						"          PriceList = ProductDb.Product.PriceList,",
						"          ProductCode = ProductDb.Product.ProductCode,",
						"          ProductUnit = ProductDb.Product.ProductUnit,",
						"          Production = ProductDb.Product.Production,",
						"          SalesType = ProductDb.Product.SalesType,",
						"          Secondary = ProductDb.Product.Secondary,",
						"          SizeSelection = ProductDb.Product.SizeSelection,",
						"          SmartReminder = ProductDb.Product.SmartReminder,",
						"          StationGroup = ProductDb.Product.StationGroup,",
						"          SubstitutionList = ProductDb.Product.SubstitutionList,",
						"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
						"          Upsizable = ProductDb.Product.Upsizable",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenProductCategories",
						"XMLFileSource foldDown(unroll(ProductDb.Product.CategoryMenus.CategoryMenu, ProductDb.Product),",
						"     mapColumn(",
						"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
						"          {@modified} = ProductDb.Product.{@modified},",
						"          {@productCategory} = ProductDb.Product.{@productCategory},",
						"          {@productClass} = ProductDb.Product.{@productClass},",
						"          {@salable} = ProductDb.Product.{@salable},",
						"          {@statusCode} = ProductDb.Product.{@statusCode},",
						"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
						"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
						"          CanAdds = ProductDb.Product.CanAdds,",
						"          Categories = ProductDb.Product.Categories,",
						"          {@categoryID} = ProductDb.Product.CategoryMenus.CategoryMenu.{@categoryID},",
						"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
						"          Choices = ProductDb.Product.Choices,",
						"          Comments = ProductDb.Product.Comments,",
						"          Composition = ProductDb.Product.Composition,",
						"          ContainerVM = ProductDb.Product.ContainerVM,",
						"          CustomParameters = ProductDb.Product.CustomParameters,",
						"          DayPartCode = ProductDb.Product.DayPartCode,",
						"          Department = ProductDb.Product.Department,",
						"          DisplayOrder = ProductDb.Product.DisplayOrder,",
						"          DisplayWaste = ProductDb.Product.DisplayWaste,",
						"          Distribution = ProductDb.Product.Distribution,",
						"          DummyProduct = ProductDb.Product.DummyProduct,",
						"          FamilyGroup = ProductDb.Product.FamilyGroup,",
						"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
						"          Presentation = ProductDb.Product.Presentation,",
						"          PriceList = ProductDb.Product.PriceList,",
						"          ProductCode = ProductDb.Product.ProductCode,",
						"          ProductUnit = ProductDb.Product.ProductUnit,",
						"          Production = ProductDb.Product.Production,",
						"          SalesType = ProductDb.Product.SalesType,",
						"          Secondary = ProductDb.Product.Secondary,",
						"          SizeSelection = ProductDb.Product.SizeSelection,",
						"          SmartReminder = ProductDb.Product.SmartReminder,",
						"          StationGroup = ProductDb.Product.StationGroup,",
						"          SubstitutionList = ProductDb.Product.SubstitutionList,",
						"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
						"          Upsizable = ProductDb.Product.Upsizable",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenCategoryMenus",
						"XMLFileSource foldDown(unroll(ProductDb.Product.Choices.Component, ProductDb.Product),",
						"     mapColumn(",
						"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
						"          {@modified} = ProductDb.Product.{@modified},",
						"          {@productCategory} = ProductDb.Product.{@productCategory},",
						"          {@productClass} = ProductDb.Product.{@productClass},",
						"          {@salable} = ProductDb.Product.{@salable},",
						"          {@statusCode} = ProductDb.Product.{@statusCode},",
						"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
						"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
						"          CanAdds = ProductDb.Product.CanAdds,",
						"          Categories = ProductDb.Product.Categories,",
						"          CategoryMenus = ProductDb.Product.CategoryMenus,",
						"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
						"          Anchor = ProductDb.Product.Choices.Component.Anchor,",
						"          ChargeThreshold = ProductDb.Product.Choices.Component.ChargeThreshold,",
						"          CostInclusive = ProductDb.Product.Choices.Component.CostInclusive,",
						"          DefaultProduct = ProductDb.Product.Choices.Component.DefaultProduct,",
						"          DefaultQuantity = ProductDb.Product.Choices.Component.DefaultQuantity,",
						"          FlexibleChoice = ProductDb.Product.Choices.Component.FlexibleChoice,",
						"          MaxQuantity = ProductDb.Product.Choices.Component.MaxQuantity,",
						"          MinQuantity = ProductDb.Product.Choices.Component.MinQuantity,",
						"          PriceCalculationMode = ProductDb.Product.Choices.Component.PriceCalculationMode,",
						"          CHOICEproductcode = ProductDb.Product.Choices.Component.ProductCode,",
						"          ReferenceProduct = ProductDb.Product.Choices.Component.ReferenceProduct,",
						"          RefundThreshold = ProductDb.Product.Choices.Component.RefundThreshold,",
						"          setParentProductOutage = ProductDb.Product.Choices.Component.setParentProductOutage,",
						"          Comments = ProductDb.Product.Comments,",
						"          Composition = ProductDb.Product.Composition,",
						"          ContainerVM = ProductDb.Product.ContainerVM,",
						"          CustomParameters = ProductDb.Product.CustomParameters,",
						"          DayPartCode = ProductDb.Product.DayPartCode,",
						"          Department = ProductDb.Product.Department,",
						"          DisplayOrder = ProductDb.Product.DisplayOrder,",
						"          DisplayWaste = ProductDb.Product.DisplayWaste,",
						"          Distribution = ProductDb.Product.Distribution,",
						"          DummyProduct = ProductDb.Product.DummyProduct,",
						"          FamilyGroup = ProductDb.Product.FamilyGroup,",
						"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
						"          Presentation = ProductDb.Product.Presentation,",
						"          PriceList = ProductDb.Product.PriceList,",
						"          ProductCode = ProductDb.Product.ProductCode,",
						"          ProductUnit = ProductDb.Product.ProductUnit,",
						"          Production = ProductDb.Product.Production,",
						"          SalesType = ProductDb.Product.SalesType,",
						"          Secondary = ProductDb.Product.Secondary,",
						"          SizeSelection = ProductDb.Product.SizeSelection,",
						"          SmartReminder = ProductDb.Product.SmartReminder,",
						"          StationGroup = ProductDb.Product.StationGroup,",
						"          SubstitutionList = ProductDb.Product.SubstitutionList,",
						"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
						"          Upsizable = ProductDb.Product.Upsizable",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenProductChoices",
						"XMLFileSource foldDown(unroll(ProductDb.Product.Comments.Component, ProductDb.Product),",
						"     mapColumn(",
						"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
						"          {@modified} = ProductDb.Product.{@modified},",
						"          {@productCategory} = ProductDb.Product.{@productCategory},",
						"          {@productClass} = ProductDb.Product.{@productClass},",
						"          {@salable} = ProductDb.Product.{@salable},",
						"          {@statusCode} = ProductDb.Product.{@statusCode},",
						"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
						"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
						"          CanAdds = ProductDb.Product.CanAdds,",
						"          Categories = ProductDb.Product.Categories,",
						"          CategoryMenus = ProductDb.Product.CategoryMenus,",
						"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
						"          Choices = ProductDb.Product.Choices,",
						"          ChargeThreshold = ProductDb.Product.Comments.Component.ChargeThreshold,",
						"          CostInclusive = ProductDb.Product.Comments.Component.CostInclusive,",
						"          DefaultQuantity = ProductDb.Product.Comments.Component.DefaultQuantity,",
						"          DisplayOnCSO = ProductDb.Product.Comments.Component.DisplayOnCSO,",
						"          MaxQuantity = ProductDb.Product.Comments.Component.MaxQuantity,",
						"          MinQuantity = ProductDb.Product.Comments.Component.MinQuantity,",
						"          {comment.ProductCode} = ProductDb.Product.Comments.Component.ProductCode,",
						"          ProductCodeImpactedOnRTM = ProductDb.Product.Comments.Component.ProductCodeImpactedOnRTM,",
						"          RefundThreshold = ProductDb.Product.Comments.Component.RefundThreshold,",
						"          setParentProductOutage = ProductDb.Product.Comments.Component.setParentProductOutage,",
						"          Composition = ProductDb.Product.Composition,",
						"          ContainerVM = ProductDb.Product.ContainerVM,",
						"          CustomParameters = ProductDb.Product.CustomParameters,",
						"          DayPartCode = ProductDb.Product.DayPartCode,",
						"          Department = ProductDb.Product.Department,",
						"          DisplayOrder = ProductDb.Product.DisplayOrder,",
						"          DisplayWaste = ProductDb.Product.DisplayWaste,",
						"          Distribution = ProductDb.Product.Distribution,",
						"          DummyProduct = ProductDb.Product.DummyProduct,",
						"          FamilyGroup = ProductDb.Product.FamilyGroup,",
						"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
						"          Presentation = ProductDb.Product.Presentation,",
						"          PriceList = ProductDb.Product.PriceList,",
						"          ProductCode = ProductDb.Product.ProductCode,",
						"          ProductUnit = ProductDb.Product.ProductUnit,",
						"          Production = ProductDb.Product.Production,",
						"          SalesType = ProductDb.Product.SalesType,",
						"          Secondary = ProductDb.Product.Secondary,",
						"          SizeSelection = ProductDb.Product.SizeSelection,",
						"          SmartReminder = ProductDb.Product.SmartReminder,",
						"          StationGroup = ProductDb.Product.StationGroup,",
						"          SubstitutionList = ProductDb.Product.SubstitutionList,",
						"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
						"          Upsizable = ProductDb.Product.Upsizable",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenProductComments",
						"XMLFileSource foldDown(unroll(ProductDb.Product.Composition.Component, ProductDb.Product),",
						"     mapColumn(",
						"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
						"          {@modified} = ProductDb.Product.{@modified},",
						"          {@productCategory} = ProductDb.Product.{@productCategory},",
						"          {@productClass} = ProductDb.Product.{@productClass},",
						"          {@salable} = ProductDb.Product.{@salable},",
						"          {@statusCode} = ProductDb.Product.{@statusCode},",
						"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
						"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
						"          CanAdds = ProductDb.Product.CanAdds,",
						"          Categories = ProductDb.Product.Categories,",
						"          CategoryMenus = ProductDb.Product.CategoryMenus,",
						"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
						"          Choices = ProductDb.Product.Choices,",
						"          Comments = ProductDb.Product.Comments,",
						"          Anchor = ProductDb.Product.Composition.Component.Anchor,",
						"          ChargeThreshold = ProductDb.Product.Composition.Component.ChargeThreshold,",
						"          CostInclusive = ProductDb.Product.Composition.Component.CostInclusive,",
						"          DefaultQuantity = ProductDb.Product.Composition.Component.DefaultQuantity,",
						"          FlexibleChoice = ProductDb.Product.Composition.Component.FlexibleChoice,",
						"          ForceCompDisplay = ProductDb.Product.Composition.Component.ForceCompDisplay,",
						"          MaxQuantity = ProductDb.Product.Composition.Component.MaxQuantity,",
						"          MinQuantity = ProductDb.Product.Composition.Component.MinQuantity,",
						"          PlainGrill = ProductDb.Product.Composition.Component.PlainGrill,",
						"          PriceCalculationMode = ProductDb.Product.Composition.Component.PriceCalculationMode,",
						"          {composition.ProductCode} = ProductDb.Product.Composition.Component.ProductCode,",
						"          ProductCodeImpactedOnRTM = ProductDb.Product.Composition.Component.ProductCodeImpactedOnRTM,",
						"          RefundThreshold = ProductDb.Product.Composition.Component.RefundThreshold,",
						"          SmartGrill = ProductDb.Product.Composition.Component.SmartGrill,",
						"          setParentProductOutage = ProductDb.Product.Composition.Component.setParentProductOutage,",
						"          ContainerVM = ProductDb.Product.ContainerVM,",
						"          CustomParameters = ProductDb.Product.CustomParameters,",
						"          DayPartCode = ProductDb.Product.DayPartCode,",
						"          Department = ProductDb.Product.Department,",
						"          DisplayOrder = ProductDb.Product.DisplayOrder,",
						"          DisplayWaste = ProductDb.Product.DisplayWaste,",
						"          Distribution = ProductDb.Product.Distribution,",
						"          DummyProduct = ProductDb.Product.DummyProduct,",
						"          FamilyGroup = ProductDb.Product.FamilyGroup,",
						"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
						"          Presentation = ProductDb.Product.Presentation,",
						"          PriceList = ProductDb.Product.PriceList,",
						"          ProductCode = ProductDb.Product.ProductCode,",
						"          ProductUnit = ProductDb.Product.ProductUnit,",
						"          Production = ProductDb.Product.Production,",
						"          SalesType = ProductDb.Product.SalesType,",
						"          Secondary = ProductDb.Product.Secondary,",
						"          SizeSelection = ProductDb.Product.SizeSelection,",
						"          SmartReminder = ProductDb.Product.SmartReminder,",
						"          StationGroup = ProductDb.Product.StationGroup,",
						"          SubstitutionList = ProductDb.Product.SubstitutionList,",
						"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
						"          Upsizable = ProductDb.Product.Upsizable",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenProductComposition",
						"XMLFileSource foldDown(unroll(ProductDb.Product.CustomParameters.Parameter, ProductDb.Product),",
						"     mapColumn(",
						"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
						"          {@modified} = ProductDb.Product.{@modified},",
						"          {@productCategory} = ProductDb.Product.{@productCategory},",
						"          {@productClass} = ProductDb.Product.{@productClass},",
						"          {@salable} = ProductDb.Product.{@salable},",
						"          {@statusCode} = ProductDb.Product.{@statusCode},",
						"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
						"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
						"          CanAdds = ProductDb.Product.CanAdds,",
						"          Categories = ProductDb.Product.Categories,",
						"          CategoryMenus = ProductDb.Product.CategoryMenus,",
						"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
						"          Choices = ProductDb.Product.Choices,",
						"          Comments = ProductDb.Product.Comments,",
						"          Composition = ProductDb.Product.Composition,",
						"          ContainerVM = ProductDb.Product.ContainerVM,",
						"          {@name} = ProductDb.Product.CustomParameters.Parameter.{@name},",
						"          {@value} = ProductDb.Product.CustomParameters.Parameter.{@value},",
						"          DayPartCode = ProductDb.Product.DayPartCode,",
						"          Department = ProductDb.Product.Department,",
						"          DisplayOrder = ProductDb.Product.DisplayOrder,",
						"          DisplayWaste = ProductDb.Product.DisplayWaste,",
						"          Distribution = ProductDb.Product.Distribution,",
						"          DummyProduct = ProductDb.Product.DummyProduct,",
						"          FamilyGroup = ProductDb.Product.FamilyGroup,",
						"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
						"          Presentation = ProductDb.Product.Presentation,",
						"          PriceList = ProductDb.Product.PriceList,",
						"          ProductCode = ProductDb.Product.ProductCode,",
						"          ProductUnit = ProductDb.Product.ProductUnit,",
						"          Production = ProductDb.Product.Production,",
						"          SalesType = ProductDb.Product.SalesType,",
						"          Secondary = ProductDb.Product.Secondary,",
						"          SizeSelection = ProductDb.Product.SizeSelection,",
						"          SmartReminder = ProductDb.Product.SmartReminder,",
						"          StationGroup = ProductDb.Product.StationGroup,",
						"          SubstitutionList = ProductDb.Product.SubstitutionList,",
						"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
						"          Upsizable = ProductDb.Product.Upsizable",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenProductCustomParameters",
						"XMLFileSource foldDown(unroll(ProductDb.Product.Distribution.Point, ProductDb.Product),",
						"     mapColumn(",
						"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
						"          {@modified} = ProductDb.Product.{@modified},",
						"          {@productCategory} = ProductDb.Product.{@productCategory},",
						"          {@productClass} = ProductDb.Product.{@productClass},",
						"          {@salable} = ProductDb.Product.{@salable},",
						"          {@statusCode} = ProductDb.Product.{@statusCode},",
						"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
						"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
						"          CanAdds = ProductDb.Product.CanAdds,",
						"          Categories = ProductDb.Product.Categories,",
						"          CategoryMenus = ProductDb.Product.CategoryMenus,",
						"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
						"          Choices = ProductDb.Product.Choices,",
						"          Comments = ProductDb.Product.Comments,",
						"          Composition = ProductDb.Product.Composition,",
						"          ContainerVM = ProductDb.Product.ContainerVM,",
						"          CustomParameters = ProductDb.Product.CustomParameters,",
						"          DayPartCode = ProductDb.Product.DayPartCode,",
						"          Department = ProductDb.Product.Department,",
						"          DisplayOrder = ProductDb.Product.DisplayOrder,",
						"          DisplayWaste = ProductDb.Product.DisplayWaste,",
						"          Point = ProductDb.Product.Distribution.Point,",
						"          DummyProduct = ProductDb.Product.DummyProduct,",
						"          FamilyGroup = ProductDb.Product.FamilyGroup,",
						"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
						"          Presentation = ProductDb.Product.Presentation,",
						"          PriceList = ProductDb.Product.PriceList,",
						"          ProductCode = ProductDb.Product.ProductCode,",
						"          ProductUnit = ProductDb.Product.ProductUnit,",
						"          Production = ProductDb.Product.Production,",
						"          SalesType = ProductDb.Product.SalesType,",
						"          Secondary = ProductDb.Product.Secondary,",
						"          SizeSelection = ProductDb.Product.SizeSelection,",
						"          SmartReminder = ProductDb.Product.SmartReminder,",
						"          StationGroup = ProductDb.Product.StationGroup,",
						"          SubstitutionList = ProductDb.Product.SubstitutionList,",
						"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
						"          Upsizable = ProductDb.Product.Upsizable",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenProductDistribution",
						"XMLFileSource foldDown(unroll(ProductDb.Product.PriceList.PriceTag.Pricing, ProductDb.Product),",
						"     mapColumn(",
						"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
						"          {@modified} = ProductDb.Product.{@modified},",
						"          {@productCategory} = ProductDb.Product.{@productCategory},",
						"          {@productClass} = ProductDb.Product.{@productClass},",
						"          {@salable} = ProductDb.Product.{@salable},",
						"          {@statusCode} = ProductDb.Product.{@statusCode},",
						"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
						"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
						"          CanAdds = ProductDb.Product.CanAdds,",
						"          Categories = ProductDb.Product.Categories,",
						"          CategoryMenus = ProductDb.Product.CategoryMenus,",
						"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
						"          Choices = ProductDb.Product.Choices,",
						"          Comments = ProductDb.Product.Comments,",
						"          Composition = ProductDb.Product.Composition,",
						"          ContainerVM = ProductDb.Product.ContainerVM,",
						"          CustomParameters = ProductDb.Product.CustomParameters,",
						"          DayPartCode = ProductDb.Product.DayPartCode,",
						"          Department = ProductDb.Product.Department,",
						"          DisplayOrder = ProductDb.Product.DisplayOrder,",
						"          DisplayWaste = ProductDb.Product.DisplayWaste,",
						"          Distribution = ProductDb.Product.Distribution,",
						"          DummyProduct = ProductDb.Product.DummyProduct,",
						"          FamilyGroup = ProductDb.Product.FamilyGroup,",
						"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
						"          Presentation = ProductDb.Product.Presentation,",
						"          {@priceCode} = ProductDb.Product.PriceList.PriceTag.Pricing.{@priceCode},",
						"          Price = ProductDb.Product.PriceList.PriceTag.Pricing.Price,",
						"          {@entry} = ProductDb.Product.PriceList.PriceTag.Pricing.Tax.{@entry},",
						"          {@rule} = ProductDb.Product.PriceList.PriceTag.Pricing.Tax.{@rule},",
						"          {@taxCode} = ProductDb.Product.PriceList.PriceTag.Pricing.Tax.{@taxCode},",
						"          ProductCode = ProductDb.Product.ProductCode,",
						"          ProductUnit = ProductDb.Product.ProductUnit,",
						"          Production = ProductDb.Product.Production,",
						"          SalesType = ProductDb.Product.SalesType,",
						"          Secondary = ProductDb.Product.Secondary,",
						"          SizeSelection = ProductDb.Product.SizeSelection,",
						"          SmartReminder = ProductDb.Product.SmartReminder,",
						"          StationGroup = ProductDb.Product.StationGroup,",
						"          SubstitutionList = ProductDb.Product.SubstitutionList,",
						"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
						"          Upsizable = ProductDb.Product.Upsizable",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenProductPriceList",
						"XMLFileSource foldDown(unroll(ProductDb.Product.Production.KVSRoutes.Route, ProductDb.Product),",
						"     mapColumn(",
						"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
						"          {@modified} = ProductDb.Product.{@modified},",
						"          {@productCategory} = ProductDb.Product.{@productCategory},",
						"          {@productClass} = ProductDb.Product.{@productClass},",
						"          {@salable} = ProductDb.Product.{@salable},",
						"          {@statusCode} = ProductDb.Product.{@statusCode},",
						"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
						"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
						"          CanAdds = ProductDb.Product.CanAdds,",
						"          Categories = ProductDb.Product.Categories,",
						"          CategoryMenus = ProductDb.Product.CategoryMenus,",
						"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
						"          Choices = ProductDb.Product.Choices,",
						"          Comments = ProductDb.Product.Comments,",
						"          Composition = ProductDb.Product.Composition,",
						"          ContainerVM = ProductDb.Product.ContainerVM,",
						"          CustomParameters = ProductDb.Product.CustomParameters,",
						"          DayPartCode = ProductDb.Product.DayPartCode,",
						"          Department = ProductDb.Product.Department,",
						"          DisplayOrder = ProductDb.Product.DisplayOrder,",
						"          DisplayWaste = ProductDb.Product.DisplayWaste,",
						"          Distribution = ProductDb.Product.Distribution,",
						"          DummyProduct = ProductDb.Product.DummyProduct,",
						"          FamilyGroup = ProductDb.Product.FamilyGroup,",
						"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
						"          Presentation = ProductDb.Product.Presentation,",
						"          PriceList = ProductDb.Product.PriceList,",
						"          ProductCode = ProductDb.Product.ProductCode,",
						"          ProductUnit = ProductDb.Product.ProductUnit,",
						"          AutoGrill = ProductDb.Product.Production.AutoGrill,",
						"          BunPrepTypeID = ProductDb.Product.Production.BunPrepTypeID,",
						"          {@doNotPrint} = ProductDb.Product.Production.Grillable.{@doNotPrint},",
						"          status1 = ProductDb.Product.Production.Grillable.{@status},",
						"          routeid = ProductDb.Product.Production.KVSRoutes.Route.{@id},",
						"          {@displayGrillInstructions} = ProductDb.Product.Production.KVSdisplay.{@displayGrillInstructions},",
						"          {@doNotDecompVM} = ProductDb.Product.Production.KVSdisplay.{@doNotDecompVM},",
						"          {@showOnMFY} = ProductDb.Product.Production.KVSdisplay.{@showOnMFY},",
						"          {@showOnMain} = ProductDb.Product.Production.KVSdisplay.{@showOnMain},",
						"          {@showOnSummary} = ProductDb.Product.Production.KVSdisplay.{@showOnSummary},",
						"          PPG = ProductDb.Product.Production.PPG,",
						"          {@autoBumpTimeout} = ProductDb.Product.Production.RapidTurnoverMonitor.{@autoBumpTimeout},",
						"          {@priority} = ProductDb.Product.Production.RapidTurnoverMonitor.{@priority},",
						"          {@threshold} = ProductDb.Product.Production.RapidTurnoverMonitor.{@threshold},",
						"          {@type} = ProductDb.Product.Production.RapidTurnoverMonitor.{@type},",
						"          SubstitutionGrill = ProductDb.Product.Production.SubstitutionGrill,",
						"          TriggerDisplayOnOrb = ProductDb.Product.Production.TriggerDisplayOnOrb,",
						"          {@isBunBuffer} = ProductDb.Product.Production.UseBufferEngine.{@isBunBuffer},",
						"          status2 = ProductDb.Product.Production.UseBufferEngine.{@status},",
						"          displayNumbersInsteadofModifiers = ProductDb.Product.Production.displayNumbersInsteadofModifiers,",
						"          SalesType = ProductDb.Product.SalesType,",
						"          Secondary = ProductDb.Product.Secondary,",
						"          SizeSelection = ProductDb.Product.SizeSelection,",
						"          SmartReminder = ProductDb.Product.SmartReminder,",
						"          StationGroup = ProductDb.Product.StationGroup,",
						"          SubstitutionList = ProductDb.Product.SubstitutionList,",
						"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
						"          Upsizable = ProductDb.Product.Upsizable",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenProductProductionKVSRoute",
						"XMLFileSource foldDown(unroll(ProductDb.Product.SizeSelection.Size, ProductDb.Product),",
						"     mapColumn(",
						"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
						"          {@modified} = ProductDb.Product.{@modified},",
						"          {@productCategory} = ProductDb.Product.{@productCategory},",
						"          {@productClass} = ProductDb.Product.{@productClass},",
						"          {@salable} = ProductDb.Product.{@salable},",
						"          {@statusCode} = ProductDb.Product.{@statusCode},",
						"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
						"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
						"          CanAdds = ProductDb.Product.CanAdds,",
						"          Categories = ProductDb.Product.Categories,",
						"          CategoryMenus = ProductDb.Product.CategoryMenus,",
						"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
						"          Choices = ProductDb.Product.Choices,",
						"          Comments = ProductDb.Product.Comments,",
						"          Composition = ProductDb.Product.Composition,",
						"          ContainerVM = ProductDb.Product.ContainerVM,",
						"          CustomParameters = ProductDb.Product.CustomParameters,",
						"          DayPartCode = ProductDb.Product.DayPartCode,",
						"          Department = ProductDb.Product.Department,",
						"          DisplayOrder = ProductDb.Product.DisplayOrder,",
						"          DisplayWaste = ProductDb.Product.DisplayWaste,",
						"          Distribution = ProductDb.Product.Distribution,",
						"          DummyProduct = ProductDb.Product.DummyProduct,",
						"          FamilyGroup = ProductDb.Product.FamilyGroup,",
						"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
						"          Presentation = ProductDb.Product.Presentation,",
						"          PriceList = ProductDb.Product.PriceList,",
						"          ProductCode = ProductDb.Product.ProductCode,",
						"          ProductUnit = ProductDb.Product.ProductUnit,",
						"          Production = ProductDb.Product.Production,",
						"          SalesType = ProductDb.Product.SalesType,",
						"          Secondary = ProductDb.Product.Secondary,",
						"          {@code} = ProductDb.Product.SizeSelection.Size.{@code},",
						"          SIZEentry = ProductDb.Product.SizeSelection.Size.{@entry},",
						"          {@showDimensionOnRCTLocalPromotion} = ProductDb.Product.SizeSelection.Size.{@showDimensionOnRCTLocalPromotion},",
						"          {@showDimensionToCustomer} = ProductDb.Product.SizeSelection.Size.{@showDimensionToCustomer},",
						"          SmartReminder = ProductDb.Product.SmartReminder,",
						"          StationGroup = ProductDb.Product.StationGroup,",
						"          SubstitutionList = ProductDb.Product.SubstitutionList,",
						"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
						"          Upsizable = ProductDb.Product.Upsizable",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenProductSizeSelection",
						"XMLFileSource foldDown(unroll(ProductDb.Product.SubstitutionList.Item, ProductDb.Product),",
						"     mapColumn(",
						"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
						"          {@modified} = ProductDb.Product.{@modified},",
						"          {@productCategory} = ProductDb.Product.{@productCategory},",
						"          {@productClass} = ProductDb.Product.{@productClass},",
						"          {@salable} = ProductDb.Product.{@salable},",
						"          {@statusCode} = ProductDb.Product.{@statusCode},",
						"          AutoCondimentDisplay = ProductDb.Product.AutoCondimentDisplay,",
						"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
						"          CanAdds = ProductDb.Product.CanAdds,",
						"          Categories = ProductDb.Product.Categories,",
						"          CategoryMenus = ProductDb.Product.CategoryMenus,",
						"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
						"          Choices = ProductDb.Product.Choices,",
						"          Comments = ProductDb.Product.Comments,",
						"          Composition = ProductDb.Product.Composition,",
						"          ContainerVM = ProductDb.Product.ContainerVM,",
						"          CustomParameters = ProductDb.Product.CustomParameters,",
						"          DayPartCode = ProductDb.Product.DayPartCode,",
						"          Department = ProductDb.Product.Department,",
						"          DisplayOrder = ProductDb.Product.DisplayOrder,",
						"          DisplayWaste = ProductDb.Product.DisplayWaste,",
						"          Distribution = ProductDb.Product.Distribution,",
						"          DummyProduct = ProductDb.Product.DummyProduct,",
						"          FamilyGroup = ProductDb.Product.FamilyGroup,",
						"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
						"          Presentation = ProductDb.Product.Presentation,",
						"          PriceList = ProductDb.Product.PriceList,",
						"          ProductCode = ProductDb.Product.ProductCode,",
						"          ProductUnit = ProductDb.Product.ProductUnit,",
						"          Production = ProductDb.Product.Production,",
						"          SalesType = ProductDb.Product.SalesType,",
						"          Secondary = ProductDb.Product.Secondary,",
						"          SizeSelection = ProductDb.Product.SizeSelection,",
						"          SmartReminder = ProductDb.Product.SmartReminder,",
						"          StationGroup = ProductDb.Product.StationGroup,",
						"          Iitemid = ProductDb.Product.SubstitutionList.Item.{@id},",
						"          ItemproductCode = ProductDb.Product.SubstitutionList.Item.{@productCode},",
						"          TimeRestrictions = ProductDb.Product.TimeRestrictions,",
						"          Upsizable = ProductDb.Product.Upsizable",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSubstitutionList",
						"XMLFileSource foldDown(unroll(ProductDb.Product),",
						"     mapColumn(",
						"          {@version} = ProductDb.{@version},",
						"          {@grillGroup} = ProductDb.Product.{@grillGroup},",
						"          {@modified} = ProductDb.Product.{@modified},",
						"          {@productCategory} = ProductDb.Product.{@productCategory},",
						"          {@productClass} = ProductDb.Product.{@productClass},",
						"          {@salable} = ProductDb.Product.{@salable},",
						"          {@statusCode} = ProductDb.Product.{@statusCode},",
						"          DisplayPOS = ProductDb.Product.AutoCondimentDisplay.DisplayPOS,",
						"          DisplayPOSEvent = ProductDb.Product.AutoCondimentDisplay.DisplayPOSEvent,",
						"          DisplayPickList = ProductDb.Product.AutoCondimentDisplay.DisplayPickList,",
						"          DisplayReceipt = ProductDb.Product.AutoCondimentDisplay.DisplayReceipt,",
						"          CSOHasLimitedTimeDiscount = ProductDb.Product.CSOHasLimitedTimeDiscount,",
						"          CanAdds = ProductDb.Product.CanAdds,",
						"          Categories = ProductDb.Product.Categories,",
						"          CategoryMenus = ProductDb.Product.CategoryMenus,",
						"          ChoiceGroup = ProductDb.Product.ChoiceGroup,",
						"          Choices = ProductDb.Product.Choices,",
						"          Comments = ProductDb.Product.Comments,",
						"          Composition = ProductDb.Product.Composition,",
						"          ContainerVM = ProductDb.Product.ContainerVM,",
						"          CustomParameters = ProductDb.Product.CustomParameters,",
						"          DayPartCode = ProductDb.Product.DayPartCode,",
						"          Departmentid = ProductDb.Product.Department.Id,",
						"          Classdepartmentid = ProductDb.Product.Department.ClassDepartment.Id,",
						"          Subclassdepartmentid = ProductDb.Product.Department.ClassDepartment.SubClassDepartment.Id,",
						"          DisplayOrder = ProductDb.Product.DisplayOrder,",
						"          DisplayWaste = ProductDb.Product.DisplayWaste,",
						"          Distribution = ProductDb.Product.Distribution,",
						"          DummyProduct = ProductDb.Product.DummyProduct,",
						"          FamilyGroup = ProductDb.Product.FamilyGroup,",
						"          IsMutuallyExclusive = ProductDb.Product.IsMutuallyExclusive,",
						"          BGNormal = ProductDb.Product.Presentation.BGNormal,",
						"          BGPressed = ProductDb.Product.Presentation.BGPressed,",
						"          BitmapName = ProductDb.Product.Presentation.BitmapName,",
						"          CSOCartImageName = ProductDb.Product.Presentation.CSOCartImageName,",
						"          CSOCircleImageName = ProductDb.Product.Presentation.CSOCircleImageName,",
						"          CSODimensionImageName = ProductDb.Product.Presentation.CSODimensionImageName,",
						"          CSOGrillImageName = ProductDb.Product.Presentation.CSOGrillImageName,",
						"          CSOLargeImageName = ProductDb.Product.Presentation.CSOLargeImageName,",
						"          CSOSmallImageName = ProductDb.Product.Presentation.CSOSmallImageName,",
						"          CSOValueMealImage = ProductDb.Product.Presentation.CSOValueMealImage,",
						"          CytPreviewImage = ProductDb.Product.Presentation.CytPreviewImage,",
						"          CytPreviewImageBottom = ProductDb.Product.Presentation.CytPreviewImageBottom,",
						"          DisplayColor = ProductDb.Product.Presentation.DisplayColor,",
						"          FGNormal = ProductDb.Product.Presentation.FGNormal,",
						"          FGPressed = ProductDb.Product.Presentation.FGPressed,",
						"          GrillBitmapName = ProductDb.Product.Presentation.GrillBitmapName,",
						"          KVSColor = ProductDb.Product.Presentation.KVSColor,",
						"          SmallBitmapName = ProductDb.Product.Presentation.SmallBitmapName,",
						"          value = ProductDb.Product.Presentation.{_value_},",
						"          PriceList = ProductDb.Product.PriceList,",
						"          ProductCode = ProductDb.Product.ProductCode,",
						"          ProductUnit = ProductDb.Product.ProductUnit,",
						"          Production = ProductDb.Product.Production,",
						"          {@eatin} = ProductDb.Product.SalesType.{@eatin},",
						"          {@other} = ProductDb.Product.SalesType.{@other},",
						"          {@takeout} = ProductDb.Product.SalesType.{@takeout},",
						"          Secondary = ProductDb.Product.Secondary,",
						"          SizeSelection = ProductDb.Product.SizeSelection,",
						"          {smartreminder.group} = ProductDb.Product.SmartReminder.{@group},",
						"          {smartreminder.Priority} = ProductDb.Product.SmartReminder.Priority,",
						"          StationGroup = ProductDb.Product.StationGroup,",
						"          SubstitutionList = ProductDb.Product.SubstitutionList,",
						"          {@endTime} = ProductDb.Product.TimeRestrictions.AllowedTime.{@endTime},",
						"          {@startTime} = ProductDb.Product.TimeRestrictions.AllowedTime.{@startTime},",
						"          Upsizable = ProductDb.Product.Upsizable",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenProduct",
						"FlattenProductDB sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     mapColumn(",
						"          {@version},",
						"          {@grillGroup},",
						"          {@modified},",
						"          {@productCategory},",
						"          {@productClass},",
						"          {@salable},",
						"          {@statusCode},",
						"          CSOHasLimitedTimeDiscount,",
						"          ChoiceGroup,",
						"          ContainerVM,",
						"          DayPartCode,",
						"          DisplayOrder,",
						"          DisplayWaste,",
						"          DummyProduct,",
						"          FamilyGroup,",
						"          IsMutuallyExclusive,",
						"          ProductCode,",
						"          ProductUnit,",
						"          Secondary,",
						"          StationGroup,",
						"          Upsizable",
						"     )) ~> WriteProductDB",
						"FlattenProductCanAdds sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {@grillGroup},",
						"          {@modified},",
						"          {@productCategory},",
						"          {@productClass},",
						"          {@salable},",
						"          {@statusCode},",
						"          CSOHasLimitedTimeDiscount,",
						"          ChargeThreshold,",
						"          CostInclusive,",
						"          DefaultQuantity,",
						"          DisplayOnCSO,",
						"          MaxQuantity,",
						"          MinQuantity,",
						"          ProductCode2,",
						"          ProductCodeImpactedOnRTM,",
						"          RefundThreshold,",
						"          setParentProductOutage,",
						"          ChoiceGroup,",
						"          ContainerVM,",
						"          DayPartCode,",
						"          DisplayOrder,",
						"          DisplayWaste,",
						"          DummyProduct,",
						"          FamilyGroup,",
						"          IsMutuallyExclusive,",
						"          ProductCodem,",
						"          ProductUnit,",
						"          Secondary,",
						"          StationGroup,",
						"          Upsizable",
						"     )) ~> WriteProductCanAdds",
						"FlattenProductCategories sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {@grillGroup},",
						"          {@modified},",
						"          {@productCategory},",
						"          {@productClass},",
						"          {@salable},",
						"          {@statusCode},",
						"          CSOHasLimitedTimeDiscount,",
						"          {@categoryID},",
						"          {@displaySizeSelection},",
						"          {@sequence},",
						"          ChoiceGroup,",
						"          ContainerVM,",
						"          DayPartCode,",
						"          DisplayOrder,",
						"          DisplayWaste,",
						"          DummyProduct,",
						"          FamilyGroup,",
						"          IsMutuallyExclusive,",
						"          ProductCode,",
						"          ProductUnit,",
						"          Secondary,",
						"          StationGroup,",
						"          Upsizable",
						"     )) ~> WriteProductCategories",
						"FlattenCategoryMenus sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {@grillGroup},",
						"          {@modified},",
						"          {@productCategory},",
						"          {@productClass},",
						"          {@salable},",
						"          {@statusCode},",
						"          CSOHasLimitedTimeDiscount,",
						"          {@categoryID},",
						"          ChoiceGroup,",
						"          ContainerVM,",
						"          DayPartCode,",
						"          DisplayOrder,",
						"          DisplayWaste,",
						"          DummyProduct,",
						"          FamilyGroup,",
						"          IsMutuallyExclusive,",
						"          ProductCode,",
						"          ProductUnit,",
						"          Secondary,",
						"          StationGroup,",
						"          Upsizable",
						"     )) ~> WriteCategoryMenus",
						"FlattenProductChoices sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {@grillGroup},",
						"          {@modified},",
						"          {@productCategory},",
						"          {@productClass},",
						"          {@salable},",
						"          {@statusCode},",
						"          CSOHasLimitedTimeDiscount,",
						"          ChoiceGroup,",
						"          Anchor,",
						"          ChargeThreshold,",
						"          CostInclusive,",
						"          DefaultProduct,",
						"          DefaultQuantity,",
						"          FlexibleChoice,",
						"          MaxQuantity,",
						"          MinQuantity,",
						"          PriceCalculationMode,",
						"          choiceProductCode = CHOICEproductcode,",
						"          ReferenceProduct,",
						"          RefundThreshold,",
						"          setParentProductOutage,",
						"          ContainerVM,",
						"          DayPartCode,",
						"          DisplayOrder,",
						"          DisplayWaste,",
						"          DummyProduct,",
						"          FamilyGroup,",
						"          IsMutuallyExclusive,",
						"          ProductCode,",
						"          ProductUnit,",
						"          Secondary,",
						"          StationGroup,",
						"          Upsizable",
						"     )) ~> WriteProductChoices",
						"FlattenProductComments sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {@grillGroup},",
						"          {@modified},",
						"          {@productCategory},",
						"          {@productClass},",
						"          {@salable},",
						"          {@statusCode},",
						"          CSOHasLimitedTimeDiscount,",
						"          ChoiceGroup,",
						"          ChargeThreshold,",
						"          CostInclusive,",
						"          DefaultQuantity,",
						"          DisplayOnCSO,",
						"          MaxQuantity,",
						"          MinQuantity,",
						"          {comment.ProductCode},",
						"          ProductCodeImpactedOnRTM,",
						"          RefundThreshold,",
						"          setParentProductOutage,",
						"          ContainerVM,",
						"          DayPartCode,",
						"          DisplayOrder,",
						"          DisplayWaste,",
						"          DummyProduct,",
						"          FamilyGroup,",
						"          IsMutuallyExclusive,",
						"          ProductCode,",
						"          ProductUnit,",
						"          Secondary,",
						"          StationGroup,",
						"          Upsizable",
						"     )) ~> WriteProductComments",
						"FlattenProductComposition sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {@grillGroup},",
						"          {@modified},",
						"          {@productCategory},",
						"          {@productClass},",
						"          {@salable},",
						"          {@statusCode},",
						"          CSOHasLimitedTimeDiscount,",
						"          ChoiceGroup,",
						"          Anchor,",
						"          ChargeThreshold,",
						"          CostInclusive,",
						"          DefaultQuantity,",
						"          FlexibleChoice,",
						"          ForceCompDisplay,",
						"          MaxQuantity,",
						"          MinQuantity,",
						"          PlainGrill,",
						"          PriceCalculationMode,",
						"          {composition.ProductCode},",
						"          ProductCodeImpactedOnRTM,",
						"          RefundThreshold,",
						"          SmartGrill,",
						"          setParentProductOutage,",
						"          ContainerVM,",
						"          DayPartCode,",
						"          DisplayOrder,",
						"          DisplayWaste,",
						"          DummyProduct,",
						"          FamilyGroup,",
						"          IsMutuallyExclusive,",
						"          ProductCode,",
						"          ProductUnit,",
						"          Secondary,",
						"          StationGroup,",
						"          Upsizable",
						"     )) ~> WriteProductComposition",
						"FlattenProductCustomParameters sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {@grillGroup},",
						"          {@modified},",
						"          {@productCategory},",
						"          {@productClass},",
						"          {@salable},",
						"          {@statusCode},",
						"          CSOHasLimitedTimeDiscount,",
						"          ChoiceGroup,",
						"          ContainerVM,",
						"          {@name},",
						"          {@value},",
						"          DayPartCode,",
						"          DisplayOrder,",
						"          DisplayWaste,",
						"          DummyProduct,",
						"          FamilyGroup,",
						"          IsMutuallyExclusive,",
						"          ProductCode,",
						"          ProductUnit,",
						"          Secondary,",
						"          StationGroup,",
						"          Upsizable",
						"     )) ~> WriteProductCustomParameters",
						"FlattenProductDistribution sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {@grillGroup},",
						"          {@modified},",
						"          {@productCategory},",
						"          {@productClass},",
						"          {@salable},",
						"          {@statusCode},",
						"          CSOHasLimitedTimeDiscount,",
						"          ChoiceGroup,",
						"          ContainerVM,",
						"          DayPartCode,",
						"          DisplayOrder,",
						"          DisplayWaste,",
						"          Point,",
						"          DummyProduct,",
						"          FamilyGroup,",
						"          IsMutuallyExclusive,",
						"          ProductCode,",
						"          ProductUnit,",
						"          Secondary,",
						"          StationGroup,",
						"          Upsizable",
						"     )) ~> WriteProductDistribution",
						"FlattenProductPriceList sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {@grillGroup},",
						"          {@modified},",
						"          {@productCategory},",
						"          {@productClass},",
						"          {@salable},",
						"          {@statusCode},",
						"          CSOHasLimitedTimeDiscount,",
						"          ChoiceGroup,",
						"          ContainerVM,",
						"          DayPartCode,",
						"          DisplayOrder,",
						"          DisplayWaste,",
						"          DummyProduct,",
						"          FamilyGroup,",
						"          IsMutuallyExclusive,",
						"          {@priceCode},",
						"          Price,",
						"          {@entry},",
						"          {@rule},",
						"          {@taxCode},",
						"          ProductCode,",
						"          ProductUnit,",
						"          Secondary,",
						"          StationGroup,",
						"          Upsizable",
						"     )) ~> WriteProductPriceList",
						"FlattenProductProductionKVSRoute sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {@grillGroup},",
						"          {@modified},",
						"          {@productCategory},",
						"          {@productClass},",
						"          {@salable},",
						"          {@statusCode},",
						"          CSOHasLimitedTimeDiscount,",
						"          ChoiceGroup,",
						"          ContainerVM,",
						"          DayPartCode,",
						"          DisplayOrder,",
						"          DisplayWaste,",
						"          DummyProduct,",
						"          FamilyGroup,",
						"          IsMutuallyExclusive,",
						"          ProductCode,",
						"          ProductUnit,",
						"          AutoGrill,",
						"          BunPrepTypeID,",
						"          {@doNotPrint},",
						"          status1,",
						"          routeid,",
						"          {@displayGrillInstructions},",
						"          {@doNotDecompVM},",
						"          {@showOnMFY},",
						"          {@showOnMain},",
						"          {@showOnSummary},",
						"          PPG,",
						"          {@autoBumpTimeout},",
						"          {@priority},",
						"          {@threshold},",
						"          {@type},",
						"          SubstitutionGrill,",
						"          TriggerDisplayOnOrb,",
						"          {@isBunBuffer},",
						"          status2,",
						"          displayNumbersInsteadofModifiers,",
						"          Secondary,",
						"          StationGroup,",
						"          Upsizable",
						"     )) ~> WriteProductProductionKVSRoute",
						"FlattenProductSizeSelection sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {@grillGroup},",
						"          {@modified},",
						"          {@productCategory},",
						"          {@productClass},",
						"          {@salable},",
						"          {@statusCode},",
						"          CSOHasLimitedTimeDiscount,",
						"          ChoiceGroup,",
						"          ContainerVM,",
						"          DayPartCode,",
						"          DisplayOrder,",
						"          DisplayWaste,",
						"          DummyProduct,",
						"          FamilyGroup,",
						"          IsMutuallyExclusive,",
						"          ProductCode,",
						"          ProductUnit,",
						"          Secondary,",
						"          {@code},",
						"          sizeentry = SIZEentry,",
						"          {@showDimensionOnRCTLocalPromotion},",
						"          {@showDimensionToCustomer},",
						"          StationGroup,",
						"          Upsizable",
						"     )) ~> WriteProductSizeSelection",
						"FlattenSubstitutionList sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {@grillGroup},",
						"          {@modified},",
						"          {@productCategory},",
						"          {@productClass},",
						"          {@salable},",
						"          {@statusCode},",
						"          CSOHasLimitedTimeDiscount,",
						"          ChoiceGroup,",
						"          ContainerVM,",
						"          DayPartCode,",
						"          DisplayOrder,",
						"          DisplayWaste,",
						"          DummyProduct,",
						"          FamilyGroup,",
						"          IsMutuallyExclusive,",
						"          ProductCode,",
						"          ProductUnit,",
						"          Secondary,",
						"          StationGroup,",
						"          Itemid = Iitemid,",
						"          ItemproductCode,",
						"          Upsizable",
						"     )) ~> WriteSubstitutionList",
						"FlattenProduct sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {@version},",
						"          {@grillGroup},",
						"          {@modified},",
						"          {@productCategory},",
						"          {@productClass},",
						"          {@salable},",
						"          {@statusCode},",
						"          DisplayPOS,",
						"          DisplayPOSEvent,",
						"          DisplayPickList,",
						"          DisplayReceipt,",
						"          CSOHasLimitedTimeDiscount,",
						"          ChoiceGroup,",
						"          ContainerVM,",
						"          DayPartCode,",
						"          Departmentid,",
						"          Classdepartmentid,",
						"          Subclassdepartmentid,",
						"          DisplayOrder,",
						"          DisplayWaste,",
						"          DummyProduct,",
						"          FamilyGroup,",
						"          IsMutuallyExclusive,",
						"          BGNormal,",
						"          BGPressed,",
						"          BitmapName,",
						"          CSOCartImageName,",
						"          CSOCircleImageName,",
						"          CSODimensionImageName,",
						"          CSOGrillImageName,",
						"          CSOLargeImageName,",
						"          CSOSmallImageName,",
						"          CSOValueMealImage,",
						"          CytPreviewImage,",
						"          CytPreviewImageBottom,",
						"          DisplayColor,",
						"          FGNormal,",
						"          FGPressed,",
						"          GrillBitmapName,",
						"          KVSColor,",
						"          SmallBitmapName,",
						"          value,",
						"          ProductCode,",
						"          ProductUnit,",
						"          {@eatin},",
						"          {@other},",
						"          {@takeout},",
						"          Secondary,",
						"          group = {smartreminder.group},",
						"          Priority = {smartreminder.Priority},",
						"          StationGroup,",
						"          {@endTime},",
						"          {@startTime},",
						"          Upsizable",
						"     )) ~> WriteProduct"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_SALES_DATAFLOW')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RFS_SALES_STLD_XML",
								"type": "DatasetReference"
							},
							"name": "XMLSourceFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTLDProductionStatus"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecNode"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecEvent"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXInitGTotal"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXSetSMState"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXBaseConfig"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXBaseConfigposconfig"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXDayParts"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTrxTendertableTenderflag"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXTaxTabletype"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXDayOpen"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "TRXGetAuthorization"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "TRXOperLogin"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecEvDrawerclosee"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecRXRegTransfers"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RECTRXsale"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SalesCustomInfoDetail"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "TRXOrderPromotions"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "TRXOrderCustOffers"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXReduction"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleStart"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleChoice"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVChangeSizeSelection"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSetsaleType"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleTotal"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVAddTender"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXTenderTableType"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "CustomInfo"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecEVCustom"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXSaleOrder"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleItem"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SaleTenderMain"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SalesTAXRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SalesCustomInfoRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SaleTendersRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleStartRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleItemRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleChoiceRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EvSetSaleTypeRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleTotalRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVAddTenderRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleEndRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleEnd"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SaleItem1"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SaleItem2"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SaleItem3"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "refund1final"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "refund2final"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "refund3check"
						}
					],
					"transformations": [
						{
							"name": "FlattenRecNode"
						},
						{
							"name": "FlattenRecEventNode"
						},
						{
							"name": "FlattenRecTRXInitGlobal"
						},
						{
							"name": "FlattenTRXSMSState"
						},
						{
							"name": "FlattenTRXBaseConfig"
						},
						{
							"name": "FlattenTRXBaseConfigposconfig"
						},
						{
							"name": "FlattenRecTRXDayParts"
						},
						{
							"name": "FlattenRecTrxTendertableTenderflag1"
						},
						{
							"name": "FlattenRecTrxTendertableTenderflag2"
						},
						{
							"name": "FlattenRecTrxTendertableTenderflag3"
						},
						{
							"name": "FlattenRecTrxTendertableTenderflag4"
						},
						{
							"name": "FlattenRecTRXTaxTabletype"
						},
						{
							"name": "FlattenRecTRXDayOpen"
						},
						{
							"name": "FlattenTRXGetAuthorization"
						},
						{
							"name": "FlattenTRXOperLogin"
						},
						{
							"name": "FlattenRecEvDrawerClose"
						},
						{
							"name": "FlattenRecRXRegTransfers"
						},
						{
							"name": "FlattenSalesCustomInfoDetail1"
						},
						{
							"name": "FlattenSalesCustomInfoDetail2"
						},
						{
							"name": "FlattenTRXOrderPromotions"
						},
						{
							"name": "FlattenTRXOrderCustOffers"
						},
						{
							"name": "FlattenSaleTenderMain1"
						},
						{
							"name": "FlattenSaleTenderMain2"
						},
						{
							"name": "FlattenEVSaleStart1"
						},
						{
							"name": "FlattenEVSaleStart2"
						},
						{
							"name": "FlattenEVSaleChoice1"
						},
						{
							"name": "FlattenEVSaleChoice2"
						},
						{
							"name": "FlattenEVChangeSizeSelection"
						},
						{
							"name": "FlattenEVSetsaleType"
						},
						{
							"name": "FlattenEVSaleTotal"
						},
						{
							"name": "FlattenEVAddTender"
						},
						{
							"name": "FlattenRecTRXTenderTableType1"
						},
						{
							"name": "FlattenRecTRXTenderTableType2"
						},
						{
							"name": "FlattenCustomInfo"
						},
						{
							"name": "FlattenRecEVCustom"
						},
						{
							"name": "FlattenRecTRXSaleOrder"
						},
						{
							"name": "FlattenEVSaleItem"
						},
						{
							"name": "FlattenRefund"
						},
						{
							"name": "FlattenSalesCustomInfoRefund"
						},
						{
							"name": "FlattenSaleTendersRefund"
						},
						{
							"name": "FlattenEVRefund"
						},
						{
							"name": "FlattenEVSaleStartRefund"
						},
						{
							"name": "FlattenEVSaleItemRefund"
						},
						{
							"name": "FlattenEVSaleChoiceRefund"
						},
						{
							"name": "FlattenEvSetSaleTypeRefund"
						},
						{
							"name": "FlattenEVSaleTotalRefund"
						},
						{
							"name": "FlattenEVAddTenderRefund"
						},
						{
							"name": "FlattenEVSaleEndRefund"
						},
						{
							"name": "FlattenEVSaleEnd"
						},
						{
							"name": "FlattenSaleItem1"
						},
						{
							"name": "FlattenSaleItem2"
						},
						{
							"name": "FlattenSaleItem3"
						},
						{
							"name": "flatten1"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "flatten3"
						},
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filter3"
						},
						{
							"name": "filter4"
						},
						{
							"name": "filter5"
						},
						{
							"name": "filter6"
						},
						{
							"name": "filter7"
						},
						{
							"name": "filter8"
						},
						{
							"name": "filter9"
						},
						{
							"name": "filter10"
						},
						{
							"name": "filter11"
						},
						{
							"name": "filter12"
						},
						{
							"name": "filter13"
						},
						{
							"name": "filter14"
						},
						{
							"name": "filter15"
						},
						{
							"name": "filter16"
						},
						{
							"name": "filter17"
						},
						{
							"name": "filter18"
						},
						{
							"name": "filter19"
						},
						{
							"name": "filter20"
						},
						{
							"name": "filter21"
						},
						{
							"name": "filter22"
						},
						{
							"name": "filter23"
						},
						{
							"name": "filter24"
						},
						{
							"name": "filter25"
						},
						{
							"name": "filter26"
						},
						{
							"name": "filter27"
						},
						{
							"name": "filter28"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TLD as ({@businessDate} as integer, {@checkPoint} as boolean, {@dataComplete} as boolean, {@end} as boolean, {@hasMoreContent} as boolean, {@logVersion} as string, {@productionStatus} as string, {@storeId} as integer, {@swVersion} as string, Node as ({@id} as string, {@nodeStatus} as string, Event as ({@RegId} as integer, {@Time} as long, {@Type} as string, EV_Custom as (Code as string, Value as string), Ev_CancelSpecialTrx as ({@Type} as string), Ev_Custom as (Info as ({@code} as short, {@data} as string)), Ev_DrawerClose as ({@TotalOpenTime} as integer, {@UnauthorizedOpen} as boolean), Ev_SaleCustom as (Info as ({@name} as string, {@value} as string)), Ev_SetCOD as ({@COD} as string, {@POD} as string, {@WorkingMode} as string), TRX_Authorized_Cash_Drawer_Open as (Amount as double, Reason as string, Time as long, Type as string), TRX_BaseConfig as ({@POD} as string, {@POS} as string, Config as (AcceptNegativeQty as boolean, AcceptZeroPricePMix as boolean, CheckRefund as boolean, DecimalPlaces as short, FloatPriceTenderId as boolean, GrandTotalFlag as short, MenuPriceBasis as boolean, MinCirculatingAmount as double, StoreId as integer, StoreName as string, WeekDayBreakfastStartTime as short, WeekDayBreakfastStopTime as short, WeekEndBreakfastStartTime as short, WeekEndBreakfastStopTime as short), POSConfig as (CountTCsFullDiscEM as boolean, OverringBehaviour as boolean, RefundBehaviour as boolean)), TRX_DayClose as ({@BusinessDate} as integer), TRX_DayOpen as ({@BusinessDate} as integer), TRX_DayParts as ({@name} as string, DayPartFriday as ({@end} as string, {@start} as string), DayPartMonday as ({@end} as string, {@start} as string), DayPartSaturday as ({@end} as string, {@start} as string), DayPartSunday as ({@end} as string, {@start} as string), DayPartThursday as ({@end} as string, {@start} as string), DayPartTuesday as ({@end} as string, {@start} as string), DayPartWednesday as ({@end} as string, {@start} as string)), TRX_GetAuthorization as (Action as string, ExpirationDate as integer, IsLogged as boolean, ManagerID as short, ManagerName as string, Method as string, Password as string, SecurityLevel as short), TRX_InitGTotal as ({@amount} as double), TRX_OperLogin as (AutoLogin as boolean, CrewID as short, CrewName as string, CrewSecurityLevel as short, POD as string, RemotePOD as string), TRX_OperLogout as (AutoLogout as boolean, CrewID as short, CrewName as string), TRX_OrderNotRecalled as (OrderNotRecalled as ({@key} as string, {@major} as short, {@minor} as boolean, {@totalAmount} as double)[]), TRX_Price_Changed as (Time as long), TRX_Refund as ({@POD} as string, Order as ({@Timestamp} as long, {@booth} as boolean, {@endSaleDate} as integer, {@endSaleTime} as integer, {@fpFiscalReceiptNumber} as boolean, {@fpReceiptNumber} as boolean, {@key} as string, {@kind} as string, {@major} as short, {@minor} as boolean, {@nonProductAmount} as double, {@nonProductTax} as double, {@orderSrc} as boolean, {@receiptNumber} as short, {@saleType} as string, {@side} as string, {@startSaleDate} as integer, {@startSaleTime} as integer, {@totalAmount} as double, {@totalChargedTaxAmount} as double, {@totalTax} as double, {@totalTaxableAmount} as double, {@uniqueId} as string, CustomInfo as (Info as ({@name} as string, {@value} as string)[]), EventsDetail as (SaleEvent as ({@Time} as long, {@Type} as string, Ev_AddTender as (BaseAction as string, CardProviderID as string, CashlessData as string, CashlessTransactionID as string, FaceValue as double, Persisted as boolean, PreAuthorization as string, TenderAmount as double, TenderID as boolean), Ev_SaleAutoChoice as string, Ev_SaleChoice as (ChoiceCode as short, ProductCode as short, Quantity as boolean), Ev_SaleCustomInfo as (Info as ({@name} as string, {@value} as string)), Ev_SaleEnd as (Type as string), Ev_SaleGrillEnd as ({@Type} as string), Ev_SaleGrillOper as (ComponentCode as short, Operation as string, Quantity as boolean), Ev_SaleGrillRecipe as (ProductCode as short, Quantity as boolean, VMProductCode as short), Ev_SaleGrillStart as (ProductCode as short, Quantity as boolean, VMProductCode as short), Ev_SaleItem as (ProductCode as short, Quantity as short, UpdatedQuantity as boolean), Ev_SaleItemCancelled as (ForcedCancel as boolean, ProductCode as short, Quantity as boolean), Ev_SaleStart as (DisabledChoices as string, MultiOrder as boolean, TenderPersisted as boolean), Ev_SaleTotal as string, Ev_SetSaleType as (ForceExhibition as boolean, Type as string), TRX_GetAuthorization as (Action as string, ExpirationDate as integer, IsLogged as boolean, ManagerID as short, ManagerName as string, Method as string, Password as string, SecurityLevel as short))[]), Fiscal_Information as ({@TIN} as string, {@ZIP} as string, {@address} as string, {@name} as string), Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as short, {@BPTax} as short, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as integer, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as short, {@grillQty} as short, {@id} as integer, {@level} as short, {@qty} as short, {@qtyPromo} as short, {@qtyVoided} as short, {@solvedChoice} as integer, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as short, {@BPTax} as short, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as integer, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as short, {@grillQty} as short, {@id} as integer, {@isUpcharge} as boolean, {@level} as short, {@qty} as short, {@qtyPromo} as short, {@qtyVoided} as short, {@solvedChoice} as integer, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as short, {@BPTax} as short, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as integer, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as short, {@grillQty} as short, {@id} as integer, {@level} as short, {@qty} as short, {@qtyPromo} as short, {@qtyVoided} as short, {@solvedChoice} as integer, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, TaxChain as ({@BDAmount} as double, {@BDBaseAmount} as double, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short))[], TaxChain as ({@BDAmount} as double, {@BDBaseAmount} as double, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short))[], TaxChain as ({@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short))[], POSTimings as ({@itemsCount} as short, {@untilPay} as long, {@untilStore} as string, {@untilTotal} as long), TaxChain as ({@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short), Tenders as (Tender as (BaseAction as string, CardProviderID as string, CashlessData as string, CashlessTransactionID as string, DiscountDescription as string, FaceValue as double, ForeignCurrencyIndicator as boolean, PaymentChannel as string, Persisted as boolean, SubtotalOption as string, TaxOption as string, TenderAmount as double, TenderId as boolean, TenderKind as boolean, TenderName as string, TenderQuantity as boolean)), taxItem as ({@amount} as double, {@baseAmt} as double, {@desc} as string, {@id} as short, {@rate} as short))), TRX_RegTransfer as ({@Amount} as double, {@FaceValue} as double, {@OperType} as string, {@TenderID} as boolean, {@TenderName} as string, {@TransferType} as string), TRX_Sale as ({@POD} as string, {@RemPOD} as string, {@status} as string, Order as ({@Timestamp} as long, {@booth} as boolean, {@deliveryChannel} as string, {@endSaleDate} as integer, {@endSaleTime} as integer, {@foreignOrderId} as integer, {@fpFiscalReceiptNumber} as boolean, {@fpReceiptNumber} as boolean, {@key} as string, {@kind} as string, {@major} as short, {@minor} as short, {@nonProductAmount} as double, {@nonProductTax} as double, {@orderSrc} as short, {@paymentType} as boolean, {@receiptNumber} as short, {@saleType} as string, {@side} as string, {@startSaleDate} as integer, {@startSaleTime} as integer, {@totalAmount} as double, {@totalChargedTaxAmount} as double, {@totalTax} as double, {@totalTaxableAmount} as double, {@uniqueId} as string, COD as ({@name} as short, {@number} as boolean), CustomInfo as (Info as ({@name} as string, {@value} as string)[]), Customer as ({@greeting} as string, {@id} as string, {@loyaltyCardId} as string, {@loyaltyCardType} as boolean, {@nickname} as string), EventsDetail as (SaleEvent as ({@Time} as long, {@Type} as string, Ev_AddTender as (BaseAction as string, CardProviderID as string, CashlessData as string, CashlessTransactionID as string, FaceValue as double, Persisted as boolean, PreAuthorization as boolean, TenderAmount as double, TenderID as short), Ev_BackFromTotal as string, Ev_BreakValueMeal as (Components as (Product as ({@code} as short, {@quantity} as boolean)[]), ProductCode as short, Quantity as boolean), Ev_ChangeSizeSelection as (ProductCode as short, Quantity as short, SizeSelected as short), Ev_PromoItem as (Amount as double, ProductCode as short, Quantity as short, Type as string), Ev_SaleAutoChoice as string, Ev_SaleChoice as (ChoiceCode as short, ProductCode as short, Quantity as short), Ev_SaleClearChoice as (ChoiceCode as short, Quantity as short), Ev_SaleCustomInfo as (Info as ({@name} as string, {@value} as string)), Ev_SaleEnd as (Type as string), Ev_SaleGrillCancel as string, Ev_SaleGrillEnd as ({@Type} as string), Ev_SaleGrillOper as (ComponentCode as integer, Operation as string, Quantity as short), Ev_SaleGrillQualifier as (ComponentCode as short, Qualifier as boolean), Ev_SaleGrillRecipe as (ProductCode as short, Quantity as short, VMProductCode as short), Ev_SaleGrillStart as (ProductCode as short, Quantity as short, VMProductCode as short), Ev_SaleIncrementItemQty as (ProductCode as short, Quantity as short, SaleIndex as boolean), Ev_SaleItem as (ProductCode as short, Quantity as short, UpdatedQuantity as short), Ev_SaleItemCancelled as (ForcedCancel as boolean, ProductCode as short, Quantity as short), Ev_SaleRecalled as string, Ev_SaleStart as (DisabledChoices as string, MultiOrder as boolean, TenderPersisted as boolean), Ev_SaleStored as string, Ev_SaleTotal as string, Ev_SetSaleType as (ForceExhibition as boolean, Type as string), TRX_GetAuthorization as (Action as string, ExpirationDate as integer, IsLogged as boolean, ManagerID as short, ManagerName as string, Method as string, Password as string, SecurityLevel as short))[]), Fiscal_Information as ({@TIN} as string, {@ZIP} as string, {@address} as string, {@name} as string), Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as double, {@BPTax} as double, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as short, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as boolean, {@grillQty} as boolean, {@id} as short, {@level} as boolean, {@qty} as short, {@qtyPromo} as short, {@qtyVoided} as short, {@solvedChoice} as string, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as double, {@BPTax} as double, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as integer, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as boolean, {@grillQty} as short, {@id} as short, {@isUpcharge} as boolean, {@level} as boolean, {@qty} as short, {@qtyPromo} as short, {@qtyVoided} as short, {@solvedChoice} as integer, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as double, {@BPTax} as double, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as integer, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as short, {@grillQty} as short, {@id} as short, {@isUpcharge} as boolean, {@level} as short, {@qty} as short, {@qtyPromo} as short, {@qtyVoided} as short, {@solvedChoice} as integer, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, Promo as ({@id} as boolean, {@name} as string, {@qty} as short), TaxChain as ({@BDAmount} as string, {@BDBaseAmount} as string, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short))[], Offers as ({@beforeOfferPrice} as double, {@discountAmount} as double, {@discountType} as string, {@offerId} as integer), Promo as ({@id} as boolean, {@name} as string, {@qty} as short), PromotionApplied as ({@discountAmount} as double, {@discountType} as string, {@eligible} as boolean, {@offerId} as integer, {@originalItemPromoQty} as boolean, {@originalPrice} as double, {@originalProductCode} as string, {@promotionCounter} as boolean, {@promotionId} as integer), TaxChain as ({@BDAmount} as double, {@BDBaseAmount} as double, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short))[], Offers as ({@beforeOfferPrice} as double, {@discountAmount} as double, {@discountType} as string, {@offerId} as integer), Promo as ({@id} as boolean, {@name} as string, {@qty} as short), PromotionApplied as ({@discountAmount} as double, {@discountType} as string, {@eligible} as boolean, {@offerId} as integer, {@originalItemPromoQty} as boolean, {@originalPrice} as double, {@originalProductCode} as string, {@promotionCounter} as short, {@promotionId} as integer), TaxChain as ({@BDAmount} as double, {@BDBaseAmount} as double, {@BPAmount} as double, {@BPBaseAmount} as double, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short), discounts as (discount as ({@amount} as double, {@description} as string, {@id} as short, {@reduction} as double, {@type} as string, {@value} as double)))[], Offers as ({@applied} as boolean, {@customerId} as integer, {@customerType} as boolean, {@offerBarcodeType} as string, {@offerId} as integer, {@offerName} as string, {@offerType} as string, {@override} as boolean, {@promotionId} as integer)[], POSTimings as ({@itemsCount} as short, {@untilPay} as long, {@untilStore} as long, {@untilTotal} as long), Promotions as (Promotion as ({@countTowardsPromotionLimit} as boolean, {@discountAmount} as double, {@discountType} as string, {@exclusive} as boolean, {@offerId} as integer, {@promotionCounter} as short, {@promotionId} as integer, {@promotionName} as string, {@promotionOnTender} as boolean, {@returnedValue} as double)[]), Reduction as (AfterTotal as short, Amount as double, AmountAfterTotal as double, AmountBeforeTotal as double, BeforeTotal as short, Qty as short), TaxChain as ({@BDAmount} as double, {@BDBaseAmount} as double, {@BPAmount} as double, {@BPBaseAmount} as double, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short), Tenders as (Tender as (BaseAction as string, CardProviderID as string, CashlessData as string, CashlessTransactionID as string, DiscountDescription as string, FaceValue as double, ForeignCurrencyIndicator as boolean, PaymentChannel as string, Persisted as boolean, SourceTenders as (SourceTender as ({@sourceCode} as boolean, {@sourceValue} as double)), SubtotalOption as string, TaxOption as string, TenderAmount as double, TenderId as short, TenderKind as short, TenderName as string, TenderQuantity as short)[]), taxItem as ({@amount} as double, {@baseAmt} as double, {@desc} as string, {@id} as short, {@rate} as short))), TRX_SetPOD as ({@PODId} as string), TRX_SetSMState as ({@PODId} as string, CrewId as short, CrewName as string, CrewSecurityLevel as short, InitialFloat as double, LoginTime as integer, LogoutTime as integer, POSState as string), TRX_Show_Prices as (Time as long), TRX_Signature_Version as (CryptographyAlgorithm as string, PrivateKeyVersion as string), TRX_TaxTable as (TaxType as (Precision as short, Rounding as string, TaxBasis as string, TaxCalcType as string, TaxDescription as string, TaxId as short, TaxRate as short)[]), TRX_TenderTable as (TenderType as (CreditSales as ({@LegacyId} as short), CurrencyDecimals as short, DefaultHaloLimit as short, DefaultSkimLimit as short, ElectronicPayment as ({@LegacyId} as string), ForeignCurrency as ({@ExchangeRate} as double, {@LegacyId} as short, {@Orientation} as string, {@Precision} as boolean, {@Rounding} as string), GiftCoupon as ({@Amount} as short, {@LegacyId} as string, {@OperatorDefined} as boolean), OtherPayment as ({@LegacyId} as string), SubtotalOption as string, TaxOption as string, TenderCategory as string, TenderChange as ({@id} as boolean, {@maxAllowed} as double, {@roundToMinAmount} as string, {@type} as string), TenderFiscalIndex as short, TenderFlags as (TenderFlag as string[]), TenderId as short, TenderName as string)[]), TRX_UnaDrawerOpening as string, TRX_UpdateCustomCounter as ({@counterName} as string, {@counterValue} as double, {@operation} as string, {@operationValue} as double))[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     validationMode: 'none',",
						"     namespaces: true,",
						"     dateFormats: ['dd-MM-yyyy'],",
						"     timestampFormats: ['MM/dd/yyyy HH:mm:ss'],",
						"     preferredIntegralType: 'short',",
						"     preferredFractionalType: 'double') ~> XMLSourceFile",
						"XMLSourceFile foldDown(unroll(TLD.Node),",
						"     mapColumn(",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@checkPoint} = TLD.{@checkPoint},",
						"          {@dataComplete} = TLD.{@dataComplete},",
						"          {@end} = TLD.{@end},",
						"          {@hasMoreContent} = TLD.{@hasMoreContent},",
						"          {@logVersion} = TLD.{@logVersion},",
						"          {@productionStatus} = TLD.{@productionStatus},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@swVersion} = TLD.{@swVersion},",
						"          {@id} = TLD.Node.{@id},",
						"          {@nodeStatus} = TLD.Node.{@nodeStatus},",
						"          Event = TLD.Node.Event",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecNode",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          RecEventid = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@RegId} = TLD.Node.Event.{@RegId}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecEventNode",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          id = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@amount} = TLD.Node.Event.TRX_InitGTotal.{@amount}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXInitGlobal",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          id = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@PODId} = TLD.Node.Event.TRX_SetSMState.{@PODId},",
						"          POSState = TLD.Node.Event.TRX_SetSMState.POSState,",
						"          CrewId = TLD.Node.Event.TRX_SetSMState.CrewId,",
						"          CrewName = TLD.Node.Event.TRX_SetSMState.CrewName,",
						"          CrewSecurityLevel = TLD.Node.Event.TRX_SetSMState.CrewSecurityLevel,",
						"          LoginTime = TLD.Node.Event.TRX_SetSMState.LoginTime,",
						"          LogoutTime = TLD.Node.Event.TRX_SetSMState.LogoutTime,",
						"          InitialFloat = TLD.Node.Event.TRX_SetSMState.InitialFloat",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXSMSState",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@POD} = TLD.Node.Event.TRX_BaseConfig.{@POD},",
						"          MenuPriceBasis = TLD.Node.Event.TRX_BaseConfig.Config.MenuPriceBasis,",
						"          WeekEndBreakfastStartTime = TLD.Node.Event.TRX_BaseConfig.Config.WeekEndBreakfastStartTime,",
						"          WeekEndBreakfastStopTime = TLD.Node.Event.TRX_BaseConfig.Config.WeekEndBreakfastStopTime,",
						"          WeekDayBreakfastStartTime = TLD.Node.Event.TRX_BaseConfig.Config.WeekDayBreakfastStartTime,",
						"          WeekDayBreakfastStopTime = TLD.Node.Event.TRX_BaseConfig.Config.WeekDayBreakfastStopTime,",
						"          DecimalPlaces = TLD.Node.Event.TRX_BaseConfig.Config.DecimalPlaces,",
						"          CheckRefund = TLD.Node.Event.TRX_BaseConfig.Config.CheckRefund,",
						"          GrandTotalFlag = TLD.Node.Event.TRX_BaseConfig.Config.GrandTotalFlag,",
						"          StoreId = TLD.Node.Event.TRX_BaseConfig.Config.StoreId,",
						"          StoreName = TLD.Node.Event.TRX_BaseConfig.Config.StoreName,",
						"          AcceptNegativeQty = TLD.Node.Event.TRX_BaseConfig.Config.AcceptNegativeQty,",
						"          AcceptZeroPricePMix = TLD.Node.Event.TRX_BaseConfig.Config.AcceptZeroPricePMix,",
						"          FloatPriceTenderId = TLD.Node.Event.TRX_BaseConfig.Config.FloatPriceTenderId",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXBaseConfig",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@POD} = TLD.Node.Event.TRX_BaseConfig.{@POD},",
						"          CountTCsFullDiscEM = TLD.Node.Event.TRX_BaseConfig.POSConfig.CountTCsFullDiscEM,",
						"          RefundBehaviour = TLD.Node.Event.TRX_BaseConfig.POSConfig.RefundBehaviour,",
						"          OverringBehaviour = TLD.Node.Event.TRX_BaseConfig.POSConfig.OverringBehaviour",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXBaseConfigposconfig",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@id} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@name} = TLD.Node.Event.TRX_DayParts.{@name},",
						"          Mondayend = TLD.Node.Event.TRX_DayParts.DayPartMonday.{@end},",
						"          Mondaystart = TLD.Node.Event.TRX_DayParts.DayPartMonday.{@start},",
						"          Tuesdayend = TLD.Node.Event.TRX_DayParts.DayPartTuesday.{@end},",
						"          Tuesdaystart = TLD.Node.Event.TRX_DayParts.DayPartTuesday.{@start},",
						"          Wednesdayend = TLD.Node.Event.TRX_DayParts.DayPartWednesday.{@end},",
						"          Wednesdaystart = TLD.Node.Event.TRX_DayParts.DayPartWednesday.{@start},",
						"          Thursdayend = TLD.Node.Event.TRX_DayParts.DayPartThursday.{@end},",
						"          Thursdaystart = TLD.Node.Event.TRX_DayParts.DayPartThursday.{@start},",
						"          fridayend = TLD.Node.Event.TRX_DayParts.DayPartFriday.{@end},",
						"          fridaystart = TLD.Node.Event.TRX_DayParts.DayPartFriday.{@start},",
						"          saturdayend = TLD.Node.Event.TRX_DayParts.DayPartSaturday.{@end},",
						"          saturdaystart = TLD.Node.Event.TRX_DayParts.DayPartSaturday.{@start},",
						"          sundayend = TLD.Node.Event.TRX_DayParts.DayPartSunday.{@end},",
						"          sundaystart = TLD.Node.Event.TRX_DayParts.DayPartSunday.{@start},",
						"          POD = TLD.Node.Event.TRX_BaseConfig.{@POD}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXDayParts",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          TenderType = TLD.Node.Event.TRX_TenderTable.TenderType",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTrxTendertableTenderflag1",
						"FlattenRecTrxTendertableTenderflag1 foldDown(unroll(TenderType),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          EventType = {@Type},",
						"          TenderId = TenderType.TenderId,",
						"          TenderName = TenderType.TenderName,",
						"          TenderCategory = TenderType.TenderCategory,",
						"          TenderFlag = TenderType.TenderFlags.TenderFlag,",
						"          TenderType",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTrxTendertableTenderflag2",
						"FlattenRecTrxTendertableTenderflag2 foldDown(unroll(TenderFlag),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          EventType,",
						"          TenderId,",
						"          TenderName,",
						"          TenderCategory,",
						"          TenderFlag = TenderType.TenderFlags.TenderFlag",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTrxTendertableTenderflag3",
						"FlattenRecTrxTendertableTenderflag3 foldDown(unroll(TenderFlag),",
						"     mapColumn(",
						"          TenderFlag,",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          EventType,",
						"          TenderId,",
						"          TenderName,",
						"          TenderCategory",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTrxTendertableTenderflag4",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event.TRX_TaxTable.TaxType),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          TaxId = TLD.Node.Event.TRX_TaxTable.TaxType.TaxId,",
						"          TaxDescription = TLD.Node.Event.TRX_TaxTable.TaxType.TaxDescription,",
						"          TaxRate = TLD.Node.Event.TRX_TaxTable.TaxType.TaxRate,",
						"          TaxBasis = TLD.Node.Event.TRX_TaxTable.TaxType.TaxBasis,",
						"          TaxCalcType = TLD.Node.Event.TRX_TaxTable.TaxType.TaxCalcType,",
						"          {@Rounding} = TLD.Node.Event.TRX_TaxTable.TaxType.Rounding,",
						"          Precision = TLD.Node.Event.TRX_TaxTable.TaxType.Precision,",
						"          {sale.pod} = TLD.Node.Event.TRX_Sale.{@POD}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXTaxTabletype",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {TRX_DayOpen.Businessdate} = TLD.Node.Event.TRX_DayOpen.{@BusinessDate}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXDayOpen",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          ManagerID = TLD.Node.Event.TRX_GetAuthorization.ManagerID,",
						"          ManagerName = TLD.Node.Event.TRX_GetAuthorization.ManagerName,",
						"          SecurityLevel = TLD.Node.Event.TRX_GetAuthorization.SecurityLevel,",
						"          Password = TLD.Node.Event.TRX_GetAuthorization.Password,",
						"          IsLogged = TLD.Node.Event.TRX_GetAuthorization.IsLogged,",
						"          ExpirationDate = TLD.Node.Event.TRX_GetAuthorization.ExpirationDate",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXGetAuthorization",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          CrewID = TLD.Node.Event.TRX_OperLogin.CrewID,",
						"          CrewName = TLD.Node.Event.TRX_OperLogin.CrewName,",
						"          CrewSecurityLevel = TLD.Node.Event.TRX_OperLogin.CrewSecurityLevel,",
						"          POD = TLD.Node.Event.TRX_OperLogin.POD,",
						"          RemotePOD = TLD.Node.Event.TRX_OperLogin.RemotePOD,",
						"          AutoLogin = TLD.Node.Event.TRX_OperLogin.AutoLogin",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXOperLogin",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          businessdate = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@UnauthorizedOpen} = TLD.Node.Event.Ev_DrawerClose.{@UnauthorizedOpen},",
						"          {@TotalOpenTime} = TLD.Node.Event.Ev_DrawerClose.{@TotalOpenTime}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecEvDrawerClose",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          Businessdate = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@Amount} = TLD.Node.Event.TRX_RegTransfer.{@Amount},",
						"          {@FaceValue} = TLD.Node.Event.TRX_RegTransfer.{@FaceValue},",
						"          {@OperType} = TLD.Node.Event.TRX_RegTransfer.{@OperType},",
						"          {@TenderID} = TLD.Node.Event.TRX_RegTransfer.{@TenderID},",
						"          {@TenderName} = TLD.Node.Event.TRX_RegTransfer.{@TenderName},",
						"          {@TransferType} = TLD.Node.Event.TRX_RegTransfer.{@TransferType}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecRXRegTransfers",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@POD} = TLD.Node.Event.TRX_Sale.{@POD},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          EndsaleTime = TLD.Node.Event.TRX_Sale.Order.{@endSaleTime},",
						"          {@endSaleDate} = TLD.Node.Event.TRX_Sale.Order.{@endSaleDate},",
						"          {@startSaleTime} = TLD.Node.Event.TRX_Sale.Order.{@startSaleTime},",
						"          {@startSaleDate} = TLD.Node.Event.TRX_Sale.Order.{@startSaleDate},",
						"          {@orderSrc} = TLD.Node.Event.TRX_Sale.Order.{@orderSrc},",
						"          {@nonProductTax} = TLD.Node.Event.TRX_Sale.Order.{@nonProductTax},",
						"          {@totalTax} = TLD.Node.Event.TRX_Sale.Order.{@totalTax},",
						"          {@nonProductAmount} = TLD.Node.Event.TRX_Sale.Order.{@nonProductAmount},",
						"          {@totalAmount} = TLD.Node.Event.TRX_Sale.Order.{@totalAmount},",
						"          {@saleType} = TLD.Node.Event.TRX_Sale.Order.{@saleType},",
						"          {@booth} = TLD.Node.Event.TRX_Sale.Order.{@booth},",
						"          {@receiptNumber} = TLD.Node.Event.TRX_Sale.Order.{@receiptNumber},",
						"          {@side} = TLD.Node.Event.TRX_Sale.Order.{@side},",
						"          {@minor} = TLD.Node.Event.TRX_Sale.Order.{@minor},",
						"          {@major} = TLD.Node.Event.TRX_Sale.Order.{@major},",
						"          {@key} = TLD.Node.Event.TRX_Sale.Order.{@key},",
						"          {@kind} = TLD.Node.Event.TRX_Sale.Order.{@kind},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@Timestamp} = TLD.Node.Event.TRX_Sale.Order.{@Timestamp},",
						"          {@foreignOrderId} = TLD.Node.Event.TRX_Sale.Order.{@foreignOrderId},",
						"          {@untilStore} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilStore},",
						"          {@untilTotal} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilTotal},",
						"          {@untilPay} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilPay},",
						"          {@itemsCount} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@itemsCount},",
						"          TaxChainId = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@id},",
						"          {@amount} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@amount},",
						"          {@name} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@name},",
						"          {@baseAmount} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@baseAmount},",
						"          {@rate} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@rate},",
						"          Info = TLD.Node.Event.TRX_Refund.Order.CustomInfo.Info,",
						"          AfterTotal = TLD.Node.Event.TRX_Sale.Order.Reduction.AfterTotal,",
						"          Amount = TLD.Node.Event.TRX_Sale.Order.Reduction.Amount,",
						"          AmountAfterTotal = TLD.Node.Event.TRX_Sale.Order.Reduction.AmountAfterTotal,",
						"          AmountBeforeTotal = TLD.Node.Event.TRX_Sale.Order.Reduction.AmountBeforeTotal,",
						"          BeforeTotal = TLD.Node.Event.TRX_Sale.Order.Reduction.BeforeTotal,",
						"          Qty = TLD.Node.Event.TRX_Sale.Order.Reduction.Qty",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSalesCustomInfoDetail1",
						"FlattenSalesCustomInfoDetail1 foldDown(unroll(Info),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@status},",
						"          EndsaleTime,",
						"          {@endSaleDate},",
						"          {@startSaleTime},",
						"          {@startSaleDate},",
						"          {@orderSrc},",
						"          {@nonProductTax},",
						"          {@totalTax},",
						"          {@nonProductAmount},",
						"          {@totalAmount},",
						"          {@saleType},",
						"          {@booth},",
						"          {@receiptNumber},",
						"          {@side},",
						"          {@minor},",
						"          {@major},",
						"          {@key},",
						"          {@kind},",
						"          {@uniqueId},",
						"          {@Timestamp},",
						"          {@foreignOrderId},",
						"          {@untilStore},",
						"          {@untilTotal},",
						"          {@untilPay},",
						"          {@itemsCount},",
						"          TaxChainId,",
						"          {@amount},",
						"          {@name},",
						"          {@baseAmount},",
						"          {@rate},",
						"          customInfoname = Info.{@name},",
						"          custominfovalue = Info.{@value}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSalesCustomInfoDetail2",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion),",
						"     mapColumn(",
						"          BusinessDate = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@promotionId} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@promotionId},",
						"          {@promotionName} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@promotionName},",
						"          {@promotionCounter} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@promotionCounter},",
						"          {@discountType} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@discountType},",
						"          {@discountAmount} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@discountAmount},",
						"          {@offerId} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@offerId},",
						"          {@exclusive} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@exclusive},",
						"          {@promotionOnTender} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@promotionOnTender},",
						"          {@countTowardsPromotionLimit} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@countTowardsPromotionLimit},",
						"          {@returnedValue} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@returnedValue}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXOrderPromotions",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event.TRX_Sale.Order.Offers),",
						"     mapColumn(",
						"          Businessdate = TLD.{@businessDate},",
						"          Storeid = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@offerId} = TLD.Node.Event.TRX_Sale.Order.Offers.{@offerId},",
						"          {@customerId} = TLD.Node.Event.TRX_Sale.Order.Offers.{@customerId},",
						"          {@offerName} = TLD.Node.Event.TRX_Sale.Order.Offers.{@offerName},",
						"          {@override} = TLD.Node.Event.TRX_Sale.Order.Offers.{@override},",
						"          {@applied} = TLD.Node.Event.TRX_Sale.Order.Offers.{@applied},",
						"          {@promotionId} = TLD.Node.Event.TRX_Sale.Order.Offers.{@promotionId},",
						"          {@offerBarcodeType} = TLD.Node.Event.TRX_Sale.Order.Offers.{@offerBarcodeType}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXOrderCustOffers",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@Timestamp} = TLD.Node.Event.TRX_Sale.Order.{@Timestamp},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {Event.type} = TLD.Node.Event.{@Type},",
						"          {@POD} = TLD.Node.Event.TRX_Sale.{@POD},",
						"          {@saleType} = TLD.Node.Event.TRX_Sale.Order.{@saleType},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          Tender = TLD.Node.Event.TRX_Sale.Order.Tenders.Tender",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleTenderMain1",
						"FlattenSaleTenderMain1 foldDown(unroll(Tender),",
						"     mapColumn(",
						"          POS,",
						"          timestamp = {@Timestamp},",
						"          businessDate = {@businessDate},",
						"          storeId = {@storeId},",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          {Event.type},",
						"          POD = {@POD},",
						"          saleType = {@saleType},",
						"          status = {@status},",
						"          uniqueId = {@uniqueId},",
						"          baseaction = Tender.BaseAction,",
						"          Persisted = Tender.Persisted,",
						"          CardProviderID = Tender.CardProviderID,",
						"          CashlessData = Tender.CashlessData,",
						"          TaxOption = Tender.TaxOption,",
						"          SubtotalOption = Tender.SubtotalOption,",
						"          DiscountDescription = Tender.DiscountDescription,",
						"          CashlessTransactionID = Tender.CashlessTransactionID,",
						"          sourceValue = Tender.SourceTenders.SourceTender.{@sourceValue},",
						"          sourceCode = Tender.SourceTenders.SourceTender.{@sourceCode},",
						"          Tender",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleTenderMain2",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          SaleEvent = TLD.Node.Event.TRX_Sale.Order.EventsDetail.SaleEvent,",
						"          {@POD} = TLD.Node.Event.TRX_Sale.{@POD},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleStart1",
						"FlattenEVSaleStart1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          type = {@Type},",
						"          SaleEventtype = SaleEvent.{@Type},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          {@POD},",
						"          {@uniqueId},",
						"          DisabledChoices = SaleEvent.Ev_SaleStart.DisabledChoices,",
						"          TenderPersisted = SaleEvent.Ev_SaleStart.TenderPersisted,",
						"          MultiOrder = SaleEvent.Ev_SaleStart.MultiOrder,",
						"          {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleStart2",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          businessdate = TLD.{@businessDate},",
						"          storeid = TLD.{@storeId},",
						"          POS = TLD.Node.{@id},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          SaleEvent = TLD.Node.Event.TRX_Sale.Order.EventsDetail.SaleEvent,",
						"          {@POD} = TLD.Node.Event.TRX_Sale.{@POD},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@name} = TLD.Node.Event.Ev_SaleCustom.Info.{@name},",
						"          {@value} = TLD.Node.Event.Ev_SaleCustom.Info.{@value},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          RemPOD = TLD.Node.Event.TRX_Sale.{@RemPOD},",
						"          CrewID = TLD.Node.Event.TRX_OperLogin.CrewID,",
						"          ReceiptNumber = TLD.Node.Event.TRX_Sale.Order.{@receiptNumber}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleChoice1",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          type = {@Type},",
						"          SaleEventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          {@uniqueId},",
						"          {@POD},",
						"          ChoiceCode = SaleEvent.Ev_SaleChoice.ChoiceCode,",
						"          ProductCode = SaleEvent.Ev_SaleChoice.ProductCode,",
						"          Quantity = SaleEvent.Ev_SaleChoice.Quantity,",
						"          {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleChoice2",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          SizeSelected = SaleEvent.Ev_ChangeSizeSelection.SizeSelected,",
						"          ProductCode = SaleEvent.Ev_ChangeSizeSelection.ProductCode,",
						"          Quantity = SaleEvent.Ev_ChangeSizeSelection.Quantity,",
						"          status = {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVChangeSizeSelection",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          {setsaletype.type} = SaleEvent.Ev_SetSaleType.Type,",
						"          ForceExhibition = SaleEvent.Ev_SetSaleType.ForceExhibition,",
						"          status = {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSetsaleType",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          Ev_SaleTotal = SaleEvent.Ev_SaleTotal,",
						"          status = {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleTotal",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleventtime = SaleEvent.{@Time},",
						"          saleventType = SaleEvent.{@Type},",
						"          TenderID = SaleEvent.Ev_AddTender.TenderID,",
						"          FaceValue = SaleEvent.Ev_AddTender.FaceValue,",
						"          TenderAmount = SaleEvent.Ev_AddTender.TenderAmount,",
						"          BaseAction = SaleEvent.Ev_AddTender.BaseAction,",
						"          Persisted = SaleEvent.Ev_AddTender.Persisted,",
						"          CardProviderID = SaleEvent.Ev_AddTender.CardProviderID,",
						"          CashlessData = SaleEvent.Ev_AddTender.CashlessData,",
						"          CashlessTransactionID = SaleEvent.Ev_AddTender.CashlessTransactionID,",
						"          PreAuthorization = SaleEvent.Ev_AddTender.PreAuthorization,",
						"          name = {@name},",
						"          value = {@value},",
						"          status = {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVAddTender",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          TenderType = TLD.Node.Event.TRX_TenderTable.TenderType",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXTenderTableType1",
						"FlattenRecTRXTenderTableType1 foldDown(unroll(TenderType),",
						"     mapColumn(",
						"          POS,",
						"          businessDate = {@businessDate},",
						"          storeId = {@storeId},",
						"          EventTime = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          {TenderType.tenderid} = TenderType.TenderId,",
						"          TenderFiscalIndex = TenderType.TenderFiscalIndex,",
						"          TenderName = TenderType.TenderName,",
						"          TenderCategory = TenderType.TenderCategory,",
						"          TaxOption = TenderType.TaxOption,",
						"          DefaultSkimLimit = TenderType.DefaultSkimLimit,",
						"          DefaultHaloLimit = TenderType.DefaultHaloLimit,",
						"          SubtotalOption = TenderType.SubtotalOption,",
						"          CurrencyDecimals = TenderType.CurrencyDecimals,",
						"          {tenderchange.type} = TenderType.TenderChange.{@type},",
						"          {tenderchange.id} = TenderType.TenderChange.{@id},",
						"          maxAllowed = TenderType.TenderChange.{@maxAllowed},",
						"          roundToMinAmount = TenderType.TenderChange.{@roundToMinAmount},",
						"          {creditsales.legacyid} = TenderType.CreditSales.{@LegacyId},",
						"          {foreigncurrency.legacyid} = TenderType.ForeignCurrency.{@LegacyId},",
						"          Rounding = TenderType.ForeignCurrency.{@Rounding},",
						"          Precision = TenderType.ForeignCurrency.{@Precision},",
						"          Orientation = TenderType.ForeignCurrency.{@Orientation},",
						"          ExchangeRate = TenderType.ForeignCurrency.{@ExchangeRate},",
						"          {electronicpayment.legacyid} = TenderType.ElectronicPayment.{@LegacyId},",
						"          {Giftcupon.legacyid} = TenderType.GiftCoupon.{@LegacyId},",
						"          Amount = TenderType.GiftCoupon.{@Amount},",
						"          OperatorDefined = TenderType.GiftCoupon.{@OperatorDefined}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXTenderTableType2",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          {info.value} = SaleEvent.Ev_SaleCustomInfo.Info.{@value},",
						"          {info.name} = SaleEvent.Ev_SaleCustomInfo.Info.{@name},",
						"          {@status},",
						"          RemPOD,",
						"          CrewID,",
						"          ReceiptNumber",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenCustomInfo",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          businessDate = TLD.{@businessDate},",
						"          storeId = TLD.{@storeId},",
						"          Time = TLD.Node.Event.{@Time},",
						"          RegId = TLD.Node.Event.{@RegId},",
						"          Type = TLD.Node.Event.{@Type},",
						"          {Info.code} = TLD.Node.Event.Ev_Custom.Info.{@code},",
						"          {Info.data} = TLD.Node.Event.Ev_Custom.Info.{@data}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecEVCustom",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@Timestamp} = TLD.Node.Event.TRX_Sale.Order.{@Timestamp},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          MainPOD = TLD.Node.Event.TRX_Sale.{@POD},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          {@endSaleTime} = TLD.Node.Event.TRX_Sale.Order.{@endSaleTime},",
						"          {@endSaleDate} = TLD.Node.Event.TRX_Sale.Order.{@endSaleDate},",
						"          {@startSaleTime} = TLD.Node.Event.TRX_Sale.Order.{@startSaleTime},",
						"          {@startSaleDate} = TLD.Node.Event.TRX_Sale.Order.{@startSaleDate},",
						"          {@orderSrc} = TLD.Node.Event.TRX_Sale.Order.{@orderSrc},",
						"          {@nonProductTax} = TLD.Node.Event.TRX_Sale.Order.{@nonProductTax},",
						"          {@totalTax} = TLD.Node.Event.TRX_Sale.Order.{@totalTax},",
						"          {@nonProductAmount} = TLD.Node.Event.TRX_Sale.Order.{@nonProductAmount},",
						"          {@totalAmount} = TLD.Node.Event.TRX_Sale.Order.{@totalAmount},",
						"          {@saleType} = TLD.Node.Event.TRX_Sale.Order.{@saleType},",
						"          {@booth} = TLD.Node.Event.TRX_Sale.Order.{@booth},",
						"          {@receiptNumber} = TLD.Node.Event.TRX_Sale.Order.{@receiptNumber},",
						"          {@side} = TLD.Node.Event.TRX_Sale.Order.{@side},",
						"          {@minor} = TLD.Node.Event.TRX_Sale.Order.{@minor},",
						"          {@major} = TLD.Node.Event.TRX_Sale.Order.{@major},",
						"          {@key} = TLD.Node.Event.TRX_Sale.Order.{@key},",
						"          {@kind} = TLD.Node.Event.TRX_Sale.Order.{@kind},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@foreignOrderId} = TLD.Node.Event.TRX_Sale.Order.{@foreignOrderId},",
						"          {@untilStore} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilStore},",
						"          {@untilTotal} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilTotal},",
						"          {@untilPay} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilPay},",
						"          {@itemsCount} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@itemsCount},",
						"          taxchainid = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@id},",
						"          taxchainamount = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@amount},",
						"          taxchainname = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@name},",
						"          {@baseAmount} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@baseAmount},",
						"          {@rate} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@rate}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXSaleOrder",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saletime = SaleEvent.{@Time},",
						"          saletype = SaleEvent.{@Type},",
						"          ProductCode = SaleEvent.Ev_SaleItem.ProductCode,",
						"          Quantity = SaleEvent.Ev_SaleItem.Quantity,",
						"          UpdatedQuantity = SaleEvent.Ev_SaleItem.UpdatedQuantity,",
						"          status = {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleItem",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          TLD = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@id} = TLD.Node.{@id},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@POD} = TLD.Node.Event.TRX_Refund.{@POD},",
						"          {@endSaleTime} = TLD.Node.Event.TRX_Refund.Order.{@endSaleTime},",
						"          {@endSaleDate} = TLD.Node.Event.TRX_Refund.Order.{@endSaleDate},",
						"          {@startSaleTime} = TLD.Node.Event.TRX_Refund.Order.{@startSaleTime},",
						"          {@startSaleDate} = TLD.Node.Event.TRX_Refund.Order.{@startSaleDate},",
						"          {@orderSrc} = TLD.Node.Event.TRX_Refund.Order.{@orderSrc},",
						"          {@nonProductTax} = TLD.Node.Event.TRX_Refund.Order.{@nonProductTax},",
						"          {@totalTax} = TLD.Node.Event.TRX_Refund.Order.{@totalTax},",
						"          {@nonProductAmount} = TLD.Node.Event.TRX_Refund.Order.{@nonProductAmount},",
						"          {@totalAmount} = TLD.Node.Event.TRX_Refund.Order.{@totalAmount},",
						"          {@saleType} = TLD.Node.Event.TRX_Refund.Order.{@saleType},",
						"          {@booth} = TLD.Node.Event.TRX_Refund.Order.{@booth},",
						"          {@receiptNumber} = TLD.Node.Event.TRX_Refund.Order.{@receiptNumber},",
						"          {@side} = TLD.Node.Event.TRX_Refund.Order.{@side},",
						"          {@minor} = TLD.Node.Event.TRX_Refund.Order.{@minor},",
						"          {@major} = TLD.Node.Event.TRX_Refund.Order.{@major},",
						"          {@key} = TLD.Node.Event.TRX_Refund.Order.{@key},",
						"          {@kind} = TLD.Node.Event.TRX_Refund.Order.{@kind},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Refund.Order.{@uniqueId},",
						"          {@untilStore} = TLD.Node.Event.TRX_Refund.Order.POSTimings.{@untilStore},",
						"          {@untilPay} = TLD.Node.Event.TRX_Refund.Order.POSTimings.{@untilPay},",
						"          {@untilTotal} = TLD.Node.Event.TRX_Refund.Order.POSTimings.{@untilTotal},",
						"          {@itemsCount} = TLD.Node.Event.TRX_Refund.Order.POSTimings.{@itemsCount},",
						"          TAXchainid = TLD.Node.Event.TRX_Refund.Order.TaxChain.{@id},",
						"          {@amount} = TLD.Node.Event.TRX_Refund.Order.TaxChain.{@amount},",
						"          {@name} = TLD.Node.Event.TRX_Refund.Order.TaxChain.{@name},",
						"          {@baseAmount} = TLD.Node.Event.TRX_Refund.Order.TaxChain.{@baseAmount},",
						"          {@rate} = TLD.Node.Event.TRX_Refund.Order.TaxChain.{@rate},",
						"          Info = TLD.Node.Event.TRX_Refund.Order.CustomInfo.Info,",
						"          SaleEvent = TLD.Node.Event.TRX_Refund.Order.EventsDetail.SaleEvent",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRefund",
						"FlattenRefund foldDown(unroll(Info),",
						"     mapColumn(",
						"          TLD,",
						"          {@storeId},",
						"          {@id},",
						"          {@RegId},",
						"          {@Type},",
						"          {@Time},",
						"          {@POD},",
						"          {@endSaleTime},",
						"          {@endSaleDate},",
						"          {@startSaleTime},",
						"          {@startSaleDate},",
						"          {@orderSrc},",
						"          {@nonProductTax},",
						"          {@totalTax},",
						"          {@nonProductAmount},",
						"          {@totalAmount},",
						"          {@saleType},",
						"          {@booth},",
						"          {@receiptNumber},",
						"          {@side},",
						"          {@minor},",
						"          {@major},",
						"          {@key},",
						"          {@kind},",
						"          {@uniqueId},",
						"          {@untilStore},",
						"          {@untilPay},",
						"          {@untilTotal},",
						"          {@itemsCount},",
						"          TAXchainid,",
						"          {@amount},",
						"          {@name},",
						"          {@baseAmount},",
						"          {@rate},",
						"          {info.name} = Info.{@name},",
						"          {info.value} = Info.{@value}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSalesCustomInfoRefund",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          businessdate = TLD.{@businessDate},",
						"          POD = TLD.Node.Event.TRX_Refund.{@POD},",
						"          Timestamp = TLD.Node.Event.TRX_Refund.Order.{@Timestamp},",
						"          {@storeId} = TLD.{@storeId},",
						"          POS = TLD.Node.{@id},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Refund.Order.{@uniqueId},",
						"          TenderId = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TenderId,",
						"          TenderKind = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TenderKind,",
						"          TenderName = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TenderName,",
						"          TenderQuantity = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TenderQuantity,",
						"          FaceValue = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.FaceValue,",
						"          TenderAmount = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TenderAmount,",
						"          BaseAction = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.BaseAction,",
						"          Persisted = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.Persisted,",
						"          CardProviderID = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.CardProviderID,",
						"          CashlessData = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.CashlessData,",
						"          CashlessTransactionID = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.CashlessTransactionID,",
						"          TaxOption = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TaxOption,",
						"          SubtotalOption = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.SubtotalOption,",
						"          DiscountDescription = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.DiscountDescription,",
						"          saleType = TLD.Node.Event.TRX_Refund.Order.{@saleType}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleTendersRefund",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@POD} = TLD.Node.Event.TRX_Refund.{@POD},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Refund.Order.{@uniqueId},",
						"          SaleEvent = TLD.Node.Event.TRX_Refund.Order.EventsDetail.SaleEvent",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          DisabledChoices = SaleEvent.Ev_SaleStart.DisabledChoices,",
						"          MultiOrder = SaleEvent.Ev_SaleStart.MultiOrder,",
						"          TenderPersisted = SaleEvent.Ev_SaleStart.TenderPersisted",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleStartRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          ProductCode = SaleEvent.Ev_SaleItem.ProductCode,",
						"          Quantity = SaleEvent.Ev_SaleItem.Quantity,",
						"          UpdatedQuantity = SaleEvent.Ev_SaleItem.UpdatedQuantity",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleItemRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          ChoiceCode = SaleEvent.Ev_SaleChoice.ChoiceCode,",
						"          ProductCode = SaleEvent.Ev_SaleChoice.ProductCode,",
						"          Quantity = SaleEvent.Ev_SaleChoice.Quantity",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleChoiceRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          ForceExhibition = SaleEvent.Ev_SetSaleType.ForceExhibition,",
						"          {set.sale.Type} = SaleEvent.Ev_SetSaleType.Type",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEvSetSaleTypeRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          SaleEventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          Ev_SaleTotal = SaleEvent.Ev_SaleTotal",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleTotalRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          TenderID = SaleEvent.Ev_AddTender.TenderID,",
						"          FaceValue = SaleEvent.Ev_AddTender.FaceValue,",
						"          TenderAmount = SaleEvent.Ev_AddTender.TenderAmount,",
						"          BaseAction = SaleEvent.Ev_AddTender.BaseAction,",
						"          Persisted = SaleEvent.Ev_AddTender.Persisted,",
						"          CardProviderID = SaleEvent.Ev_AddTender.CardProviderID,",
						"          CashlessData = SaleEvent.Ev_AddTender.CashlessData,",
						"          CashlessTransactionID = SaleEvent.Ev_AddTender.CashlessTransactionID,",
						"          PreAuthorization = SaleEvent.Ev_AddTender.PreAuthorization",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVAddTenderRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          SaleEventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          saleendType = SaleEvent.Ev_SaleEnd.Type",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleEndRefund",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {SaleEvent.time} = SaleEvent.{@Time},",
						"          {saleevent.type} = SaleEvent.{@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          {@name},",
						"          {@value},",
						"          {@status},",
						"          SALEENDType = SaleEvent.Ev_SaleEnd.Type",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleEnd",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event.TRX_Sale.Order.Item),",
						"     mapColumn(",
						"          businessDate = TLD.{@businessDate},",
						"          storeId = TLD.{@storeId},",
						"          pos = TLD.Node.{@id},",
						"          RegId = TLD.Node.Event.{@RegId},",
						"          Time = TLD.Node.Event.{@Time},",
						"          Type = TLD.Node.Event.{@Type},",
						"          itemBDPrice = TLD.Node.Event.TRX_Sale.Order.Item.{@BDPrice},",
						"          itemBDTax = TLD.Node.Event.TRX_Sale.Order.Item.{@BDTax},",
						"          itemBPPrice = TLD.Node.Event.TRX_Sale.Order.Item.{@BPPrice},",
						"          itemBPTax = TLD.Node.Event.TRX_Sale.Order.Item.{@BPTax},",
						"          itemaction = TLD.Node.Event.TRX_Sale.Order.Item.{@action},",
						"          itemcategory = TLD.Node.Event.TRX_Sale.Order.Item.{@category},",
						"          itemchgAfterTotal = TLD.Node.Event.TRX_Sale.Order.Item.{@chgAfterTotal},",
						"          itemcode = TLD.Node.Event.TRX_Sale.Order.Item.{@code},",
						"          itemdayPart = TLD.Node.Event.TRX_Sale.Order.Item.{@dayPart},",
						"          itemdepartment = TLD.Node.Event.TRX_Sale.Order.Item.{@department},",
						"          itemdepartmentClass = TLD.Node.Event.TRX_Sale.Order.Item.{@departmentClass},",
						"          itemdepartmentSubClass = TLD.Node.Event.TRX_Sale.Order.Item.{@departmentSubClass},",
						"          itemdescription = TLD.Node.Event.TRX_Sale.Order.Item.{@description},",
						"          itemdisplayOrder = TLD.Node.Event.TRX_Sale.Order.Item.{@displayOrder},",
						"          itemfamilyGroup = TLD.Node.Event.TRX_Sale.Order.Item.{@familyGroup},",
						"          itemgrillModifier = TLD.Node.Event.TRX_Sale.Order.Item.{@grillModifier},",
						"          itemgrillQty = TLD.Node.Event.TRX_Sale.Order.Item.{@grillQty},",
						"          itemid = TLD.Node.Event.TRX_Sale.Order.Item.{@id},",
						"          itemlevel = TLD.Node.Event.TRX_Sale.Order.Item.{@level},",
						"          itemqty = TLD.Node.Event.TRX_Sale.Order.Item.{@qty},",
						"          itemqtyPromo = TLD.Node.Event.TRX_Sale.Order.Item.{@qtyPromo},",
						"          itemqtyVoided = TLD.Node.Event.TRX_Sale.Order.Item.{@qtyVoided},",
						"          itemsolvedChoice = TLD.Node.Event.TRX_Sale.Order.Item.{@solvedChoice},",
						"          itemtotalPrice = TLD.Node.Event.TRX_Sale.Order.Item.{@totalPrice},",
						"          itemtotalTax = TLD.Node.Event.TRX_Sale.Order.Item.{@totalTax},",
						"          itemtype = TLD.Node.Event.TRX_Sale.Order.Item.{@type},",
						"          itemunitPrice = TLD.Node.Event.TRX_Sale.Order.Item.{@unitPrice},",
						"          itemunitTax = TLD.Node.Event.TRX_Sale.Order.Item.{@unitTax},",
						"          Itemitem = TLD.Node.Event.TRX_Sale.Order.Item.Item,",
						"          itemtaxchainid = TLD.Node.Event.TRX_Sale.Order.Item.TaxChain.{@id},",
						"          itemtaxchainamount = TLD.Node.Event.TRX_Sale.Order.Item.TaxChain.{@amount},",
						"          itemtaxchainbaseAmount = TLD.Node.Event.TRX_Sale.Order.Item.TaxChain.{@baseAmount},",
						"          itemtaxchainname = TLD.Node.Event.TRX_Sale.Order.Item.TaxChain.{@name},",
						"          itemtaxchainrate = TLD.Node.Event.TRX_Sale.Order.Item.TaxChain.{@rate},",
						"          beforeOfferPrice = TLD.Node.Event.TRX_Sale.Order.Item.Offers.{@beforeOfferPrice},",
						"          discountAmount = TLD.Node.Event.TRX_Sale.Order.Item.Offers.{@discountAmount},",
						"          discountType = TLD.Node.Event.TRX_Sale.Order.Item.Offers.{@discountType},",
						"          offerId = TLD.Node.Event.TRX_Sale.Order.Item.Offers.{@offerId},",
						"          POD = TLD.Node.Event.TRX_Sale.{@POD},",
						"          status = TLD.Node.Event.TRX_Sale.{@status},",
						"          Timestamp = TLD.Node.Event.TRX_Sale.Order.{@Timestamp},",
						"          uniqueId = TLD.Node.Event.TRX_Sale.Order.{@uniqueId}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleItem1",
						"FlattenSaleItem1 foldDown(unroll(Itemitem),",
						"     mapColumn(",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          itemBDPrice,",
						"          itemBDTax,",
						"          itemBPPrice,",
						"          itemBPTax,",
						"          itemaction,",
						"          itemcategory,",
						"          itemchgAfterTotal,",
						"          itemcode,",
						"          itemdayPart,",
						"          itemdepartment,",
						"          itemdepartmentClass,",
						"          itemdepartmentSubClass,",
						"          itemdescription,",
						"          itemdisplayOrder,",
						"          itemfamilyGroup,",
						"          itemgrillModifier,",
						"          itemgrillQty,",
						"          itemid,",
						"          itemlevel,",
						"          itemqty,",
						"          itemqtyPromo,",
						"          itemqtyVoided,",
						"          itemsolvedChoice,",
						"          itemtotalPrice,",
						"          itemtotalTax,",
						"          itemtype,",
						"          itemunitPrice,",
						"          itemunitTax,",
						"          itemitemBDPrice = Itemitem.{@BDPrice},",
						"          itemitemBDTax = Itemitem.{@BDTax},",
						"          itemitemBPPrice = Itemitem.{@BPPrice},",
						"          itemitemBPTax = Itemitem.{@BPTax},",
						"          itemitemaction = Itemitem.{@action},",
						"          itemitemcategory = Itemitem.{@category},",
						"          itemitemchgAfterTotal = Itemitem.{@chgAfterTotal},",
						"          itemitemcode = Itemitem.{@code},",
						"          itemitemdayPart = Itemitem.{@dayPart},",
						"          itemitemdepartment = Itemitem.{@department},",
						"          itemitemdepartmentClass = Itemitem.{@departmentClass},",
						"          itemitemdepartmentSubClass = Itemitem.{@departmentSubClass},",
						"          itemitemdescription = Itemitem.{@description},",
						"          itemitemdisplayOrder = Itemitem.{@displayOrder},",
						"          itemitemfamilyGroup = Itemitem.{@familyGroup},",
						"          itemitemgrillModifier = Itemitem.{@grillModifier},",
						"          itemitemgrillQty = Itemitem.{@grillQty},",
						"          itemitemid = Itemitem.{@id},",
						"          itemitemisUpcharge = Itemitem.{@isUpcharge},",
						"          itemitemlevel = Itemitem.{@level},",
						"          itemitemqty = Itemitem.{@qty},",
						"          itemitemqtyPromo = Itemitem.{@qtyPromo},",
						"          itemitemqtyVoided = Itemitem.{@qtyVoided},",
						"          itemitemsolvedChoice = Itemitem.{@solvedChoice},",
						"          itemitemtotalPrice = Itemitem.{@totalPrice},",
						"          itemitemtotalTax = Itemitem.{@totalTax},",
						"          itemitemtype = Itemitem.{@type},",
						"          itemitemunitPrice = Itemitem.{@unitPrice},",
						"          itemitemunitTax = Itemitem.{@unitTax},",
						"          tItem = Itemitem.Item,",
						"          itemitemtaxchainamount = Itemitem.TaxChain.{@amount},",
						"          itemitemtaxchainbaseAmount = Itemitem.TaxChain.{@baseAmount},",
						"          itemitemtaxchainid = Itemitem.TaxChain.{@id},",
						"          itemitemtaxchainname = Itemitem.TaxChain.{@name},",
						"          itemitemtaxchainrate = Itemitem.TaxChain.{@rate},",
						"          itemtaxchainid,",
						"          itemtaxchainamount,",
						"          itemtaxchainbaseAmount,",
						"          itemtaxchainname,",
						"          itemtaxchainrate,",
						"          beforeOfferPrice,",
						"          discountAmount,",
						"          discountType,",
						"          offerId,",
						"          status,",
						"          POD,",
						"          Timestamp,",
						"          uniqueId",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleItem2",
						"FlattenSaleItem2 foldDown(unroll(tItem),",
						"     mapColumn(",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          itemBDPrice,",
						"          itemBDTax,",
						"          itemBPPrice,",
						"          itemBPTax,",
						"          itemaction,",
						"          itemcategory,",
						"          itemchgAfterTotal,",
						"          itemcode,",
						"          itemdayPart,",
						"          itemdepartment,",
						"          itemdepartmentClass,",
						"          itemdepartmentSubClass,",
						"          itemdescription,",
						"          itemdisplayOrder,",
						"          itemfamilyGroup,",
						"          itemgrillModifier,",
						"          itemgrillQty,",
						"          itemid,",
						"          itemlevel,",
						"          itemqty,",
						"          itemqtyPromo,",
						"          itemqtyVoided,",
						"          itemsolvedChoice,",
						"          itemtotalPrice,",
						"          itemtotalTax,",
						"          itemtype,",
						"          itemunitPrice,",
						"          itemunitTax,",
						"          itemitemBDPrice,",
						"          itemitemBDTax,",
						"          itemitemBPPrice,",
						"          itemitemBPTax,",
						"          itemitemaction,",
						"          itemitemcategory,",
						"          itemitemchgAfterTotal,",
						"          itemitemcode,",
						"          itemitemdayPart,",
						"          itemitemdepartment,",
						"          itemitemdepartmentClass,",
						"          itemitemdepartmentSubClass,",
						"          itemitemdescription,",
						"          itemitemdisplayOrder,",
						"          itemitemfamilyGroup,",
						"          itemitemgrillModifier,",
						"          itemitemgrillQty,",
						"          itemitemid,",
						"          itemitemisUpcharge,",
						"          itemitemlevel,",
						"          itemitemqty,",
						"          itemitemqtyPromo,",
						"          itemitemsolvedChoice,",
						"          itemitemtotalPrice,",
						"          itemitemtotalTax,",
						"          itemitemtype,",
						"          itemitemunitPrice,",
						"          itemitemunitTax,",
						"          titemBDPrice = tItem.{@BDPrice},",
						"          titemBDTax = tItem.{@BDTax},",
						"          titemBPPrice = tItem.{@BPPrice},",
						"          titemBPTax = tItem.{@BPTax},",
						"          titemaction = tItem.{@action},",
						"          titemcategory = tItem.{@category},",
						"          titemchgAfterTotal = tItem.{@chgAfterTotal},",
						"          titemcode = tItem.{@code},",
						"          titemdayPart = tItem.{@dayPart},",
						"          titemdepartment = tItem.{@department},",
						"          titemdepartmentClass = tItem.{@departmentClass},",
						"          titemdepartmentSubClass = tItem.{@departmentSubClass},",
						"          titemdescription = tItem.{@description},",
						"          titemdisplayOrder = tItem.{@displayOrder},",
						"          titemfamilyGroup = tItem.{@familyGroup},",
						"          titemgrillModifier = tItem.{@grillModifier},",
						"          titemgrillQty = tItem.{@grillQty},",
						"          titemid = tItem.{@id},",
						"          titemisUpcharge = tItem.{@isUpcharge},",
						"          titemlevel = tItem.{@level},",
						"          titemqty = tItem.{@qty},",
						"          titemqtyPromo = tItem.{@qtyPromo},",
						"          titemqtyVoided = tItem.{@qtyVoided},",
						"          titemsolvedChoice = tItem.{@solvedChoice},",
						"          titemtotalPrice = tItem.{@totalPrice},",
						"          titemtotalTax = tItem.{@totalTax},",
						"          titemtype = tItem.{@type},",
						"          titemunitPrice = tItem.{@unitPrice},",
						"          titemunitTax = tItem.{@unitTax},",
						"          titemtaxchainamount = tItem.TaxChain.{@amount},",
						"          titemtaxchainbaseAmount = tItem.TaxChain.{@baseAmount},",
						"          titemtaxchainid = tItem.TaxChain.{@id},",
						"          titemtaxchainname = tItem.TaxChain.{@name},",
						"          titemtaxchainrate = tItem.TaxChain.{@rate},",
						"          itemitemtaxchainamount,",
						"          itemitemtaxchainbaseAmount,",
						"          itemitemtaxchainid,",
						"          itemitemtaxchainname,",
						"          itemitemtaxchainrate,",
						"          itemtaxchainid,",
						"          itemtaxchainamount,",
						"          temtaxchainbaseAmount = itemtaxchainbaseAmount,",
						"          itemtaxchainname,",
						"          itemtaxchainrate,",
						"          beforeOfferPrice,",
						"          discountAmount,",
						"          discountType,",
						"          offerId,",
						"          uniqueId,",
						"          status,",
						"          POD,",
						"          Timestamp",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleItem3",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event.TRX_Refund.Order.Item, TLD.Node.Event.TRX_Refund.Order.Item),",
						"     mapColumn(",
						"          itemBDPrice = TLD.Node.Event.TRX_Refund.Order.Item.{@BDPrice},",
						"          storeId = TLD.{@storeId},",
						"          businessDate = TLD.{@businessDate},",
						"          pos = TLD.Node.{@id},",
						"          POD = TLD.Node.Event.TRX_Refund.{@POD},",
						"          RegId = TLD.Node.Event.{@RegId},",
						"          Time = TLD.Node.Event.{@Time},",
						"          Type = TLD.Node.Event.{@Type},",
						"          uniqueId = TLD.Node.Event.TRX_Refund.Order.{@uniqueId},",
						"          itemBDTax = TLD.Node.Event.TRX_Refund.Order.Item.{@BDTax},",
						"          itemBPPrice = TLD.Node.Event.TRX_Refund.Order.Item.{@BPPrice},",
						"          itemBPTax = TLD.Node.Event.TRX_Refund.Order.Item.{@BPTax},",
						"          itemaction = TLD.Node.Event.TRX_Refund.Order.Item.{@action},",
						"          itemcategory = TLD.Node.Event.TRX_Refund.Order.Item.{@category},",
						"          itemchgAfterTotal = TLD.Node.Event.TRX_Refund.Order.Item.{@chgAfterTotal},",
						"          itemcode = TLD.Node.Event.TRX_Refund.Order.Item.{@code},",
						"          itemdayPart = TLD.Node.Event.TRX_Refund.Order.Item.{@dayPart},",
						"          itemdepartment = TLD.Node.Event.TRX_Refund.Order.Item.{@department},",
						"          itemdepartmentClass = TLD.Node.Event.TRX_Refund.Order.Item.{@departmentClass},",
						"          itemdepartmentSubClass = TLD.Node.Event.TRX_Refund.Order.Item.{@departmentSubClass},",
						"          itemdescription = TLD.Node.Event.TRX_Refund.Order.Item.{@description},",
						"          itemdisplayOrder = TLD.Node.Event.TRX_Refund.Order.Item.{@displayOrder},",
						"          itemfamilyGroup = TLD.Node.Event.TRX_Refund.Order.Item.{@familyGroup},",
						"          itemgrillModifier = TLD.Node.Event.TRX_Refund.Order.Item.{@grillModifier},",
						"          itemgrillQty = TLD.Node.Event.TRX_Refund.Order.Item.{@grillQty},",
						"          itemid = TLD.Node.Event.TRX_Refund.Order.Item.{@id},",
						"          itemlevel = TLD.Node.Event.TRX_Refund.Order.Item.{@level},",
						"          itemqty = TLD.Node.Event.TRX_Refund.Order.Item.{@qty},",
						"          itemqtyPromo = TLD.Node.Event.TRX_Refund.Order.Item.{@qtyPromo},",
						"          itemsolvedChoice = TLD.Node.Event.TRX_Refund.Order.Item.{@solvedChoice},",
						"          itemtotalPrice = TLD.Node.Event.TRX_Refund.Order.Item.{@totalPrice},",
						"          itemtotalTax = TLD.Node.Event.TRX_Refund.Order.Item.{@totalTax},",
						"          itemtype = TLD.Node.Event.TRX_Refund.Order.Item.{@type},",
						"          itemunitPrice = TLD.Node.Event.TRX_Refund.Order.Item.{@unitPrice},",
						"          itemunitTax = TLD.Node.Event.TRX_Refund.Order.Item.{@unitTax},",
						"          Itemitem = TLD.Node.Event.TRX_Refund.Order.Item.Item,",
						"          taxchainid = TLD.Node.Event.TRX_Refund.Order.Item.TaxChain.{@id},",
						"          taxchainamount = TLD.Node.Event.TRX_Refund.Order.Item.TaxChain.{@amount},",
						"          taxchainname = TLD.Node.Event.TRX_Refund.Order.Item.TaxChain.{@name},",
						"          taxchainbaseAmount = TLD.Node.Event.TRX_Refund.Order.Item.TaxChain.{@baseAmount},",
						"          taxchainrate = TLD.Node.Event.TRX_Refund.Order.Item.TaxChain.{@rate},",
						"          itemqtyVoided = TLD.Node.Event.TRX_Refund.Order.Item.{@qtyVoided}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 foldDown(unroll(Itemitem),",
						"     mapColumn(",
						"          itemBDPrice = Itemitem.{@BDPrice},",
						"          itemBDTax = Itemitem.{@BDTax},",
						"          itemBPPrice = Itemitem.{@BPPrice},",
						"          itemBPTax = Itemitem.{@BPTax},",
						"          itemaction = Itemitem.{@action},",
						"          itemcategory = Itemitem.{@category},",
						"          itemchgAfterTotal = Itemitem.{@chgAfterTotal},",
						"          itemcode = Itemitem.{@code},",
						"          itemdayPart = Itemitem.{@dayPart},",
						"          itemdepartment = Itemitem.{@department},",
						"          itemdepartmentClass = Itemitem.{@departmentClass},",
						"          itemdepartmentSubClass = Itemitem.{@departmentSubClass},",
						"          itemdescription = Itemitem.{@description},",
						"          itemdisplayOrder = Itemitem.{@displayOrder},",
						"          itemfamilyGroup = Itemitem.{@familyGroup},",
						"          itemgrillModifier = Itemitem.{@grillModifier},",
						"          itemgrillQty = Itemitem.{@grillQty},",
						"          itemid = Itemitem.{@id},",
						"          itemisUpcharge = Itemitem.{@isUpcharge},",
						"          itemlevel = Itemitem.{@level},",
						"          itemqty = Itemitem.{@qty},",
						"          itemqtyPromo = Itemitem.{@qtyPromo},",
						"          itemsolvedChoice = Itemitem.{@solvedChoice},",
						"          itemtotalPrice = Itemitem.{@totalPrice},",
						"          itemtotalTax = Itemitem.{@totalTax},",
						"          itemtype = Itemitem.{@type},",
						"          itemunitPrice = Itemitem.{@unitPrice},",
						"          itemunitTax = Itemitem.{@unitTax},",
						"          tItem = Itemitem.Item,",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          POD,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          uniqueId,",
						"          itemtaxchainid = Itemitem.TaxChain.{@id},",
						"          itemtaxchainamount = Itemitem.TaxChain.{@amount},",
						"          itemtaxchainname = Itemitem.TaxChain.{@name},",
						"          itemtaxchainbaseAmount = Itemitem.TaxChain.{@baseAmount},",
						"          itemtaxchainrate = Itemitem.TaxChain.{@rate},",
						"          itemqtyVoidedd = Itemitem.{@qtyVoided}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten2 foldDown(unroll(tItem),",
						"     mapColumn(",
						"          itemBDPrice = tItem.{@BDPrice},",
						"          itemBDTax = tItem.{@BDTax},",
						"          itemBPPrice = tItem.{@BPPrice},",
						"          itemBPTax = tItem.{@BPTax},",
						"          itemaction = tItem.{@action},",
						"          itemcategory = tItem.{@category},",
						"          itemchgAfterTotal = tItem.{@chgAfterTotal},",
						"          itemcode = tItem.{@code},",
						"          itemdayPart = tItem.{@dayPart},",
						"          itemdepartment = tItem.{@department},",
						"          itemdepartmentClass = tItem.{@departmentClass},",
						"          itemdepartmentSubClass = tItem.{@departmentSubClass},",
						"          itemdescription = tItem.{@description},",
						"          itemdisplayOrder = tItem.{@displayOrder},",
						"          itemfamilyGroup = tItem.{@familyGroup},",
						"          itemgrillModifier = tItem.{@grillModifier},",
						"          itemgrillQty = tItem.{@grillQty},",
						"          itemid = tItem.{@id},",
						"          itemlevel = tItem.{@level},",
						"          itemqty = tItem.{@qty},",
						"          itemqtyPromo = tItem.{@qtyPromo},",
						"          itemsolvedChoice = tItem.{@solvedChoice},",
						"          itemtotalPrice = tItem.{@totalPrice},",
						"          itemtotalTax = tItem.{@totalTax},",
						"          itemtype = tItem.{@type},",
						"          itemunitPrice = tItem.{@unitPrice},",
						"          itemunitTax = tItem.{@unitTax},",
						"          itemtaxchainid = tItem.TaxChain.{@id},",
						"          itemtaxchainamount = tItem.TaxChain.{@amount},",
						"          itemtaxchainname = tItem.TaxChain.{@name},",
						"          itemtaxchainbaseAmount = tItem.TaxChain.{@baseAmount},",
						"          itemtaxchainrate = tItem.TaxChain.{@rate},",
						"          storeId,",
						"          businessDate,",
						"          pos,",
						"          POD,",
						"          uniqueId,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          qtyVoidedd = tItem.{@qtyVoided}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"FlattenSaleItem1 filter(equals(Type, 'TRX_Sale')) ~> filter1",
						"FlattenSaleItem3 filter(equals(Type, 'TRX_Sale')) ~> filter2",
						"FlattenSaleItem2 filter(equals(Type, 'TRX_Sale')) ~> filter3",
						"flatten1 filter(equals(Type, 'TRX_Refund')) ~> filter4",
						"flatten3 filter(equals(Type, 'TRX_Refund')) ~> filter5",
						"flatten2 filter(equals(Type, 'TRX_Refund')) ~> filter6",
						"FlattenEVSaleEndRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter7",
						"FlattenEVAddTenderRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter8",
						"FlattenEVSaleTotalRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter9",
						"FlattenEvSetSaleTypeRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter10",
						"FlattenEVSaleChoiceRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter11",
						"FlattenEVSaleItemRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter12",
						"FlattenEVSaleStartRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter13",
						"FlattenSaleTendersRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter14",
						"FlattenSalesCustomInfoRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter15",
						"FlattenRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter16",
						"FlattenRecTRXSaleOrder filter(equals({@Type}, 'TRX_Sale')) ~> filter17",
						"FlattenEVSaleEnd filter(equals({@Type}, 'TRX_Sale')) ~> filter18",
						"FlattenEVSaleItem filter(equals({@Type}, 'TRX_Sale')) ~> filter19",
						"FlattenEVAddTender filter(equals({@Type}, 'TRX_Sale')) ~> filter20",
						"FlattenEVSaleTotal filter(equals({@Type}, 'TRX_Sale')) ~> filter21",
						"FlattenEVSetsaleType filter(equals({@Type}, 'TRX_Sale')) ~> filter22",
						"FlattenEVChangeSizeSelection filter(equals({@Type}, 'TRX_Sale')) ~> filter23",
						"FlattenEVSaleChoice2 filter(equals(type, 'TRX_Sale')) ~> filter24",
						"FlattenEVSaleStart2 filter(equals(type, 'TRX_Sale')) ~> filter25",
						"FlattenSalesCustomInfoDetail1 filter(equals({@Type}, 'TRX_Sale')) ~> filter26",
						"FlattenSalesCustomInfoDetail2 filter(equals({@Type}, 'TRX_Sale')) ~> filter27",
						"FlattenSalesCustomInfoDetail1 filter(equals({@Type}, 'TRX_Sale')) ~> filter28",
						"XMLSourceFile sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTLDProductionStatus.businessdate} = TLD.{@businessDate},",
						"          {RecTLDProductionStatus.checkPoint} = TLD.{@checkPoint},",
						"          {RecTLDProductionStatus.Isend} = TLD.{@end},",
						"          {RecTLDProductionStatus.logVersion} = TLD.{@productionStatus},",
						"          {RecTLDProductionStatus.storeId} = TLD.{@storeId},",
						"          {RecTLDProductionStatus.swVersion} = TLD.{@swVersion},",
						"          status = TLD.{@productionStatus}",
						"     )) ~> RecTLDProductionStatus",
						"FlattenRecNode sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecNode.businessDate} = {@businessDate},",
						"          {RecNode.storeId} = {@storeId},",
						"          {RecNode.id} = {@id},",
						"          {RecNode.nodestatus} = {@nodeStatus}",
						"     )) ~> RecNode",
						"FlattenRecEventNode sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecEvent.id} = RecEventid,",
						"          {RecEvent.businessDate} = {@businessDate},",
						"          {RecEvent.storeId} = {@storeId},",
						"          {RecEvent.Event_Time} = {@Time},",
						"          {RecEvent.Type} = {@Type},",
						"          {RecEvent.RegId} = {@RegId}",
						"     )) ~> RecEvent",
						"FlattenRecTRXInitGlobal sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTRX_InitGTotal.id} = id,",
						"          {RecTRX_InitGTotal.businessDate} = {@businessDate},",
						"          {RecTRX_InitGTotal.storeId} = {@storeId},",
						"          {RecTRX_InitGTotal.Event_Time} = {@Time},",
						"          {RecTRX_InitGTotal.Type} = {@Type},",
						"          {RecTRX_InitGTotal.RegId} = {@RegId},",
						"          {RecTRX_InitGTotal.amount} = {@amount}",
						"     )) ~> RecTRXInitGTotal",
						"FlattenTRXSMSState sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTRX_SetSMState.id} = id,",
						"          {RecTRX_SetSMState.businessDate} = {@businessDate},",
						"          {RecTRX_SetSMState.storeId} = {@storeId},",
						"          {RecTRX_SetSMState.Event_Time} = {@Time},",
						"          {RecTRX_SetSMState.Type} = {@Type},",
						"          {RecTRX_SetSMState.RegId} = {@RegId},",
						"          {RecTRX_SetSMState.PODId} = {@PODId},",
						"          {RecTRX_SetSMState.POSState} = POSState,",
						"          {RecTRX_SetSMState.CrewId} = CrewId,",
						"          {RecTRX_SetSMState.CrewName} = CrewName,",
						"          {RecTRX_SetSMState.CrewSecurityLevel} = CrewSecurityLevel,",
						"          {RecTRX_SetSMState.LoginTime} = LoginTime,",
						"          {RecTRX_SetSMState.LogoutTime} = LogoutTime,",
						"          {RecTRX_SetSMState.InitialFloat} = InitialFloat",
						"     )) ~> RecTRXSetSMState",
						"FlattenTRXBaseConfig sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {Rec_TRX_BaseConfig.POS} = POS,",
						"          {Rec_TRX_BaseConfig.businessDate} = {@businessDate},",
						"          {Rec_TRX_BaseConfig.Event_Time} = {@Time},",
						"          {Rec_TRX_BaseConfig.RegId} = {@RegId},",
						"          {Rec_TRX_BaseConfig.Type} = {@Type},",
						"          {Rec_TRX_BaseConfig.POD} = {@POD},",
						"          {Rec_TRX_BaseConfig.MenuPriceBasis} = MenuPriceBasis,",
						"          {Rec_TRX_BaseConfig.WeekEndBreakfastStartTime} = WeekEndBreakfastStartTime,",
						"          {Rec_TRX_BaseConfig.WeekEndBreakfastStopTime} = WeekEndBreakfastStopTime,",
						"          {Rec_TRX_BaseConfig.WeekDayBreakfastStartTime} = WeekDayBreakfastStartTime,",
						"          {Rec_TRX_BaseConfig.WeekDayBreakfastStopTime} = WeekDayBreakfastStopTime,",
						"          {Rec_TRX_BaseConfig.DecimalPlaces} = DecimalPlaces,",
						"          {Rec_TRX_BaseConfig.CheckRefund} = CheckRefund,",
						"          {Rec_TRX_BaseConfig.GrandTotalFlag} = GrandTotalFlag,",
						"          {Rec_TRX_BaseConfig.StoreId} = StoreId,",
						"          {Rec_TRX_BaseConfig.StoreName} = StoreName,",
						"          {Rec_TRX_BaseConfig.AcceptNegativeQty} = AcceptNegativeQty,",
						"          {Rec_TRX_BaseConfig.AcceptZeroPricePMix} = AcceptZeroPricePMix,",
						"          {Rec_TRX_BaseConfig.FloatPriceTenderId} = FloatPriceTenderId",
						"     )) ~> RecTRXBaseConfig",
						"FlattenTRXBaseConfigposconfig sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTRXBaseConfigposconfig.POS} = POS,",
						"          {RecTRXBaseConfigposconfig.businessDate} = {@businessDate},",
						"          {RecTRXBaseConfigposconfig.storeId} = {@storeId},",
						"          {RecTRXBaseConfigposconfig.Time} = {@Time},",
						"          {RecTRXBaseConfigposconfig.RegId} = {@RegId},",
						"          {RecTRXBaseConfigposconfig.Type} = {@Type},",
						"          {RecTRXBaseConfigposconfig.POD} = {@POD},",
						"          {RecTRXBaseConfigposconfig.CountTCsFullDiscEM} = CountTCsFullDiscEM,",
						"          {RecTRXBaseConfigposconfig.RefundBehaviour} = RefundBehaviour,",
						"          {RecTRXBaseConfigposconfig.OverringBehaviour} = OverringBehaviour",
						"     )) ~> RecTRXBaseConfigposconfig",
						"FlattenRecTRXDayParts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          DaypartsPOS = POS,",
						"          DaypartsbusinessDate = {@businessDate},",
						"          DaypartsstoreId = {@storeId},",
						"          Event_Time = {@Time},",
						"          Regid = {@id},",
						"          EventType = {@Type},",
						"          name = {@name},",
						"          Mondayend,",
						"          Mondaystart,",
						"          Tuesdayend,",
						"          Tuesdaystart,",
						"          Wednesdayend,",
						"          Wednesdaystart,",
						"          Thursdayend,",
						"          Thursdaystart,",
						"          fridayend,",
						"          fridaystart,",
						"          saturdayend,",
						"          saturdaystart,",
						"          sundayend,",
						"          sundaystart,",
						"          pod = POD",
						"     )) ~> RecTRXDayParts",
						"FlattenRecTrxTendertableTenderflag4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          Rec_tendertable_tenderflagTenderFlag = TenderFlag,",
						"          POS,",
						"          {RecTRX_tendertable_tenderflag.businessDate} = {@businessDate},",
						"          {RecTRX_tendertable_tenderflag.storeId} = {@storeId},",
						"          {RecTRX_tendertable_tenderflag.Time} = {@Time},",
						"          {RecTRX_tendertable_tenderflag.RegId} = {@RegId},",
						"          EventType,",
						"          TenderId,",
						"          TenderName,",
						"          TenderCategory",
						"     )) ~> RecTrxTendertableTenderflag",
						"FlattenRecTRXTaxTabletype sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTRXTaxTable.POS} = POS,",
						"          {RecTRXTaxTable.businessDate} = {@businessDate},",
						"          RecTRXTaxTablestoreId = {@storeId},",
						"          RecTRXTaxTableTime = {@Time},",
						"          RecTRXTaxTableRegId = {@RegId},",
						"          RecTRXTaxTableType = {@Type},",
						"          POD = {sale.pod},",
						"          {RecTRXTaxTable.TaxId} = TaxId,",
						"          TaxDescription,",
						"          TaxRate,",
						"          TaxBasis,",
						"          TaxCalcType,",
						"          {RecTRXTaxTable.Rounding} = {@Rounding},",
						"          Precision",
						"     )) ~> RecTRXTaxTabletype",
						"FlattenRecTRXDayOpen sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          RecTRX_DayOpenPOS = POS,",
						"          {main.businessDate} = {@businessDate},",
						"          {RecTRX_DayOpen.storeId} = {@storeId},",
						"          RecTRX_DayOpenEventTime = {@Time},",
						"          RecTRX_DayOpenRegId = {@RegId},",
						"          {RecTRX_DayOpen.Type} = {@Type},",
						"          {RecTRX_DayOpen.Businessdatesub} = {TRX_DayOpen.Businessdate}",
						"     )) ~> RecTRXDayOpen",
						"FlattenTRXGetAuthorization sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          businessDate = {@businessDate},",
						"          {TRXGetAuthorization.storeId} = {@storeId},",
						"          {TRXGetAuthorization.EventTime} = {@Time},",
						"          {TRXGetAuthorization.RegId} = {@RegId},",
						"          {TRXGetAuthorization.Type} = {@Type},",
						"          ManagerID,",
						"          ManagerName,",
						"          SecurityLevel,",
						"          Password,",
						"          IsLogged,",
						"          ExpirationDate",
						"     )) ~> TRXGetAuthorization",
						"FlattenTRXOperLogin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {TRXOperLogin.POS} = POS,",
						"          businessdate = {@businessDate},",
						"          {TRXOperLogin.storeId} = {@storeId},",
						"          {TRXOperLogin.eventTime} = {@Time},",
						"          TRXOperLoginRegId = {@RegId},",
						"          {TRXOperLogin.eventType} = {@Type},",
						"          CrewID,",
						"          CrewName,",
						"          CrewSecurityLevel,",
						"          POD,",
						"          RemotePOD,",
						"          AutoLogin",
						"     )) ~> TRXOperLogin",
						"FlattenRecEvDrawerClose sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          RecEvDrawerclosePOS = POS,",
						"          businessdate,",
						"          {RecEvDrawerclose.storeId} = {@storeId},",
						"          {RecEvDrawerclose.eventTime} = {@Time},",
						"          RecEvDrawercloseRegId = {@RegId},",
						"          RecEvDrawercloseEventType = {@Type},",
						"          UnauthorizedOpen = {@UnauthorizedOpen},",
						"          TotalOpenTime = {@TotalOpenTime}",
						"     )) ~> RecEvDrawerclosee",
						"FlattenRecRXRegTransfers sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecRXRegTransfers.Businessdate} = Businessdate,",
						"          {RecRXRegTransfers.storeId} = {@storeId},",
						"          {RecRXRegTransfers.RegId} = {@RegId},",
						"          {RecRXRegTransfers.eventTime} = {@Time},",
						"          {RecRXRegTransfers.eventType} = {@Type},",
						"          {RecRXRegTransfers.Amount} = {@Amount},",
						"          {RecRXRegTransfers.FaceValue} = {@FaceValue},",
						"          {RecRXRegTransfers.OperType} = {@OperType},",
						"          {RecRXRegTransfers.TenderID} = {@TenderID},",
						"          {RecRXRegTransfers.TenderName} = {@TenderName},",
						"          {RecRXRegTransfers.TransferType} = {@TransferType}",
						"     )) ~> RecRXRegTransfers",
						"filter26 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          RECTRXsalebusinessDate = {@businessDate},",
						"          RECTRXsalestoreId = {@storeId},",
						"          RECTRXsaleEventTime = {@Time},",
						"          RECTRXsaleRegId = {@RegId},",
						"          RECTRXsaleEventType = {@Type},",
						"          RECTRXsalePOD = {@POD},",
						"          RECTRXsalestatus = {@status},",
						"          EndsaleTime,",
						"          RECTRXsaleendSaleDate = {@endSaleDate},",
						"          RECTRXsalestartSaleTime = {@startSaleTime},",
						"          RECTRXsalestartSaleDate = {@startSaleDate},",
						"          RECTRXsaleorderSrc = {@orderSrc},",
						"          nonProductTax = {@nonProductTax},",
						"          totalTax = {@totalTax},",
						"          nonProductAmount = {@nonProductAmount},",
						"          totalAmount = {@totalAmount},",
						"          saleType = {@saleType},",
						"          booth = {@booth},",
						"          receiptNumber = {@receiptNumber},",
						"          side = {@side},",
						"          minor = {@minor},",
						"          major = {@major},",
						"          key = {@key},",
						"          kind = {@kind},",
						"          uniqueId = {@uniqueId},",
						"          Timestamp = {@Timestamp},",
						"          foreignOrderId = {@foreignOrderId},",
						"          untilStore = {@untilStore},",
						"          untilTotal = {@untilTotal},",
						"          untilPay = {@untilPay},",
						"          itemsCount = {@itemsCount},",
						"          TaxChainId,",
						"          amount = {@amount},",
						"          name = {@name},",
						"          baseAmount = {@baseAmount},",
						"          rate = {@rate}",
						"     )) ~> RECTRXsale",
						"filter27 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          SalesCustomInfoDetailbusinessDate = {@businessDate},",
						"          SalesCustomInfoDetailstoreId = {@storeId},",
						"          SalesCustomInfoDetailEventTime = {@Time},",
						"          SalesCustomInfoDetailRegId = {@RegId},",
						"          {SalesCustomInfoDetail.Type} = {@Type},",
						"          {SalesCustomInfoDetail.totalAmount} = {@totalAmount},",
						"          {SalesCustomInfoDetail.receiptNumber} = {@receiptNumber},",
						"          {SalesCustomInfoDetail.minor} = {@minor},",
						"          major = {@major},",
						"          key = {@key},",
						"          kind = {@kind},",
						"          uniqueId = {@uniqueId},",
						"          Timestamp = {@Timestamp},",
						"          foreignOrderId = {@foreignOrderId},",
						"          customInfoname,",
						"          custominfovalue,",
						"          status = {@status}",
						"     )) ~> SalesCustomInfoDetail",
						"FlattenTRXOrderPromotions sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          BusinessDate,",
						"          {TRXOrderPromotions.storeId} = {@storeId},",
						"          {TRXOrderPromotions.PromotionTime} = {@Time},",
						"          RegId = {@RegId},",
						"          TRXOrderPromotionsType = {@Type},",
						"          uniqueId = {@uniqueId},",
						"          promotionId = {@promotionId},",
						"          promotionName = {@promotionName},",
						"          promotionCounter = {@promotionCounter},",
						"          discountType = {@discountType},",
						"          discountAmount = {@discountAmount},",
						"          offerId = {@offerId},",
						"          exclusive = {@exclusive},",
						"          promotionOnTender = {@promotionOnTender},",
						"          countTowardsPromotionLimit = {@countTowardsPromotionLimit},",
						"          returnedValue = {@returnedValue},",
						"          status = {@status}",
						"     )) ~> TRXOrderPromotions",
						"FlattenTRXOrderCustOffers sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          TRXOrderCustOffersBusinessdate = Businessdate,",
						"          Storeid,",
						"          {TRXOrderCustOffers.offerTime} = {@Time},",
						"          RegId = {@RegId},",
						"          TRXOrderCustOffersType = {@Type},",
						"          uniqueId = {@uniqueId},",
						"          offerId = {@offerId},",
						"          customerId = {@customerId},",
						"          offerName = {@offerName},",
						"          override = {@override},",
						"          applied = {@applied},",
						"          promotionId = {@promotionId},",
						"          offerBarcodeType = {@offerBarcodeType},",
						"          status = {@status}",
						"     )) ~> TRXOrderCustOffers",
						"filter28 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTRXReduction.POS} = POS,",
						"          {RecTRXReduction.businessDate} = {@businessDate},",
						"          RecTRXReductionstoreId = {@storeId},",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          EndsaleTime,",
						"          endSaleDate = {@endSaleDate},",
						"          startSaleTime = {@startSaleTime},",
						"          startSaleDate = {@startSaleDate},",
						"          nonProductAmount = {@nonProductAmount},",
						"          totalAmount = {@totalAmount},",
						"          saleType = {@saleType},",
						"          receiptNumber = {@receiptNumber},",
						"          side = {@side},",
						"          minor = {@minor},",
						"          major = {@major},",
						"          key = {@key},",
						"          kind = {@kind},",
						"          uniqueId = {@uniqueId},",
						"          foreignOrderId = {@foreignOrderId},",
						"          AfterTotal,",
						"          Amount,",
						"          AmountAfterTotal,",
						"          AmountBeforeTotal,",
						"          BeforeTotal,",
						"          Qty,",
						"          status = {@status},",
						"          itemcount = {@itemsCount}",
						"     )) ~> RecTRXReduction",
						"filter25 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          EvsalestartPOS = POS,",
						"          EvsalestartbusinessDate = {@businessDate},",
						"          EvsalestartstoreId = {@storeId},",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          type,",
						"          SaleEventtype,",
						"          saleeventtime,",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          DisabledChoices,",
						"          TenderPersisted,",
						"          MultiOrder,",
						"          status = {@status}",
						"     )) ~> EVSaleStart",
						"filter24 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {Evsalechoice.businessdate} = businessdate,",
						"          {Evsalechoice.storeid} = storeid,",
						"          POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          type,",
						"          SaleEventtime,",
						"          saleeventtype,",
						"          uniqueId = {@uniqueId},",
						"          POD = {@POD},",
						"          ChoiceCode,",
						"          ProductCode,",
						"          Quantity,",
						"          status = {@status}",
						"     )) ~> EVSaleChoice",
						"filter23 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {Evchangesizeselection.businessdate} = businessdate,",
						"          {Evchangesizeselection.storeid} = storeid,",
						"          POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          SizeSelected,",
						"          ProductCode,",
						"          Quantity,",
						"          status",
						"     )) ~> EVChangeSizeSelection",
						"filter22 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {Evsetsaletype.businessdate} = businessdate,",
						"          Evsetsaletypestoreid = storeid,",
						"          POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          setsaletype = {setsaletype.type},",
						"          ForceExhibition,",
						"          status",
						"     )) ~> EVSetsaleType",
						"filter21 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {EvSaleTotal.businessdate} = businessdate,",
						"          {EvSaleTotal.storeid} = storeid,",
						"          POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          Ev_SaleTotal,",
						"          status",
						"     )) ~> EVSaleTotal",
						"filter20 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          saleventtime,",
						"          saleventType,",
						"          TenderID,",
						"          FaceValue,",
						"          TenderAmount,",
						"          BaseAction,",
						"          Persisted,",
						"          CardProviderID,",
						"          CashlessData,",
						"          CashlessTransactionID,",
						"          PreAuthorization,",
						"          name,",
						"          value,",
						"          status",
						"     )) ~> EVAddTender",
						"FlattenRecTRXTenderTableType2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTrxtendertable.POS} = POS,",
						"          {RecTrxtendertable.businessDate} = businessDate,",
						"          {RecTrxtendertable.storeId} = storeId,",
						"          EventTime,",
						"          RegId,",
						"          Type,",
						"          tenderid = {TenderType.tenderid},",
						"          TenderFiscalIndex,",
						"          TenderName,",
						"          TenderCategory,",
						"          TaxOption,",
						"          DefaultSkimLimit,",
						"          DefaultHaloLimit,",
						"          SubtotalOption,",
						"          CurrencyDecimals,",
						"          tenderchangetype = {tenderchange.type},",
						"          tenderchangeid = {tenderchange.id},",
						"          maxAllowed,",
						"          roundToMinAmount,",
						"          {Creditsales.legacyid} = {creditsales.legacyid},",
						"          {foreigncurrency.legacyid},",
						"          Rounding,",
						"          Precision,",
						"          Orientation,",
						"          ExchangeRate,",
						"          {electronicpayment.legacyid},",
						"          {Giftcupon.legacyid},",
						"          Amount,",
						"          OperatorDefined",
						"     )) ~> RecTRXTenderTableType",
						"FlattenCustomInfo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {custominfo.businessdate} = businessdate,",
						"          {custominfo.storeid} = storeid,",
						"          {custominfo.POS} = POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          value = {info.value},",
						"          name = {info.name},",
						"          status = {@status},",
						"          RemPOD,",
						"          CrewID,",
						"          ReceiptNumber",
						"     )) ~> CustomInfo",
						"FlattenRecEVCustom sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RECEVcustominfo.POS} = POS,",
						"          {RECEVcustominfo..businessDate} = businessDate,",
						"          {RECEVcustominfo.storeId} = storeId,",
						"          Time,",
						"          RegId,",
						"          Type,",
						"          code = {Info.code},",
						"          data = {Info.data}",
						"     )) ~> RecEVCustom",
						"filter17 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          RecTRXSaleorderPOS = POS,",
						"          Timestamp = {@Timestamp},",
						"          RecTRXSaleorderbusinessDate = {@businessDate},",
						"          RecTRXSalestoreId = {@storeId},",
						"          RecTRXSaleEventTime = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = MainPOD,",
						"          status = {@status},",
						"          endSaleTime = {@endSaleTime},",
						"          endSaleDate = {@endSaleDate},",
						"          startSaleTime = {@startSaleTime},",
						"          startSaleDate = {@startSaleDate},",
						"          orderSrc = {@orderSrc},",
						"          nonProductTax = {@nonProductTax},",
						"          totalTax = {@totalTax},",
						"          nonProductAmount = {@nonProductAmount},",
						"          totalAmount = {@totalAmount},",
						"          saleType = {@saleType},",
						"          booth = {@booth},",
						"          receiptNumber = {@receiptNumber},",
						"          side = {@side},",
						"          minor = {@minor},",
						"          major = {@major},",
						"          key = {@key},",
						"          kind = {@kind},",
						"          uniqueId = {@uniqueId},",
						"          foreignOrderId = {@foreignOrderId},",
						"          untilStore = {@untilStore},",
						"          untilTotal = {@untilTotal},",
						"          untilPay = {@untilPay},",
						"          itemsCount = {@itemsCount},",
						"          taxchainid,",
						"          taxchainamount,",
						"          taxchainname,",
						"          baseAmount = {@baseAmount},",
						"          rate = {@rate}",
						"     )) ~> RecTRXSaleOrder",
						"filter19 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {evsaleitem.businessdate} = businessdate,",
						"          {evsaleitem.storeid} = storeid,",
						"          evsaleitemPOS = POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          saletime,",
						"          saletype,",
						"          ProductCode,",
						"          Quantity,",
						"          UpdatedQuantity,",
						"          status",
						"     )) ~> EVSaleItem",
						"FlattenSaleTenderMain2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          saletenderPOS = POS,",
						"          timestamp,",
						"          saletenderbusinessDate = businessDate,",
						"          saletenderstoreId = storeId,",
						"          saletenderTime = Time,",
						"          RegId,",
						"          type = {Event.type},",
						"          POD,",
						"          saleType,",
						"          status,",
						"          uniqueId,",
						"          baseaction,",
						"          Persisted,",
						"          CardProviderID,",
						"          CashlessData,",
						"          TaxOption,",
						"          SubtotalOption,",
						"          DiscountDescription,",
						"          CashlessTransactionID,",
						"          sourceValue,",
						"          sourceCode,",
						"          tenderBaseAction = Tender.BaseAction,",
						"          facevalue = Tender.FaceValue,",
						"          TenderAmount = Tender.TenderAmount,",
						"          TenderId = Tender.TenderId,",
						"          TenderKind = Tender.TenderKind,",
						"          TenderName = Tender.TenderName,",
						"          TenderQuantity = Tender.TenderQuantity",
						"     )) ~> SaleTenderMain",
						"filter16 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          Businessdate = TLD,",
						"          storeId = {@storeId},",
						"          POS = {@id},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          Time = {@Time},",
						"          POD = {@POD},",
						"          endSaleTime = {@endSaleTime},",
						"          endSaleDate = {@endSaleDate},",
						"          startSaleTime = {@startSaleTime},",
						"          startSaleDate = {@startSaleDate},",
						"          orderSrc = {@orderSrc},",
						"          nonProductTax = {@nonProductTax},",
						"          {@totalTax},",
						"          {@nonProductAmount},",
						"          {@totalAmount},",
						"          {@saleType},",
						"          {@booth},",
						"          {@receiptNumber},",
						"          {@side},",
						"          {@minor},",
						"          {@major},",
						"          {@key},",
						"          {@kind},",
						"          {@uniqueId},",
						"          {@untilStore},",
						"          {@untilPay},",
						"          {@untilTotal},",
						"          {@itemsCount},",
						"          TAXchainid,",
						"          {@amount},",
						"          {@name},",
						"          {@baseAmount},",
						"          {@rate}",
						"     )) ~> SalesTAXRefund",
						"filter15 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          Businessdate = TLD,",
						"          {@storeId},",
						"          {@id},",
						"          {@RegId},",
						"          {@Type},",
						"          {@Time},",
						"          {@POD},",
						"          {@endSaleTime},",
						"          {@endSaleDate},",
						"          {@startSaleTime},",
						"          {@startSaleDate},",
						"          {@orderSrc},",
						"          {@nonProductTax},",
						"          {@totalTax},",
						"          {@nonProductAmount},",
						"          {@totalAmount},",
						"          {@saleType},",
						"          {@booth},",
						"          {@receiptNumber},",
						"          {@side},",
						"          {@minor},",
						"          {@major},",
						"          {@key},",
						"          {@kind},",
						"          {@uniqueId},",
						"          {@untilStore},",
						"          {@untilPay},",
						"          {@untilTotal},",
						"          {@itemsCount},",
						"          TAXchainid,",
						"          {@amount},",
						"          {@name},",
						"          {@baseAmount},",
						"          {@rate},",
						"          name = {info.name},",
						"          value = {info.value}",
						"     )) ~> SalesCustomInfoRefund",
						"filter14 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessdate,",
						"          saleType,",
						"          POD,",
						"          Timestamp,",
						"          {@storeId},",
						"          POS,",
						"          {@RegId},",
						"          {@Time},",
						"          {@Type},",
						"          {@uniqueId},",
						"          TenderId,",
						"          TenderKind,",
						"          TenderName,",
						"          TenderQuantity,",
						"          FaceValue,",
						"          TenderAmount,",
						"          BaseAction,",
						"          Persisted,",
						"          CardProviderID,",
						"          CashlessData,",
						"          CashlessTransactionID,",
						"          TaxOption,",
						"          SubtotalOption,",
						"          DiscountDescription",
						"     )) ~> SaleTendersRefund",
						"filter13 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          {@uniqueId},",
						"          TenderPersisted,",
						"          DisabledChoices,",
						"          MultiOrder",
						"     )) ~> EVSaleStartRefund",
						"filter12 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          UpdatedQuantity,",
						"          ProductCode,",
						"          Quantity",
						"     )) ~> EVSaleItemRefund",
						"filter11 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          Quantity,",
						"          ChoiceCode,",
						"          ProductCode",
						"     )) ~> EVSaleChoiceRefund",
						"filter10 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          ForceExhibition,",
						"          Type = {set.sale.Type}",
						"     )) ~> EvSetSaleTypeRefund",
						"filter9 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          SaleEventtime,",
						"          saleeventtype,",
						"          Ev_SaleTotal",
						"     )) ~> EVSaleTotalRefund",
						"filter8 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          TenderID,",
						"          FaceValue,",
						"          TenderAmount,",
						"          BaseAction,",
						"          Persisted,",
						"          CardProviderID,",
						"          CashlessData,",
						"          CashlessTransactionID,",
						"          PreAuthorization",
						"     )) ~> EVAddTenderRefund",
						"filter7 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          SaleEventtime,",
						"          saleeventtype,",
						"          saleendType",
						"     )) ~> EVSaleEndRefund",
						"filter18 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          saleventtime = {SaleEvent.time},",
						"          saleeventtype = {saleevent.type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          {@name},",
						"          {@value},",
						"          {@status},",
						"          SALEENDType",
						"     )) ~> EVSaleEnd",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          itemBDPrice,",
						"          itemBDTax,",
						"          itemBPPrice,",
						"          itemBPTax,",
						"          itemaction,",
						"          itemcategory,",
						"          itemchgAfterTotal,",
						"          itemcode,",
						"          itemdayPart,",
						"          itemdepartment,",
						"          itemdepartmentSubClass,",
						"          itemdescription,",
						"          itemdisplayOrder,",
						"          itemfamilyGroup,",
						"          itemgrillModifier,",
						"          itemgrillQty,",
						"          itemid,",
						"          itemlevel,",
						"          itemqty,",
						"          itemqtyPromo,",
						"          itemsolvedChoice,",
						"          itemtotalPrice,",
						"          itemtotalTax,",
						"          itemtype,",
						"          itemunitPrice,",
						"          itemunitTax,",
						"          itemtaxchainid,",
						"          itemtaxchainamount,",
						"          itemtaxchainbaseAmount,",
						"          itemtaxchainname,",
						"          itemtaxchainrate,",
						"          beforeOfferPrice,",
						"          discountAmount,",
						"          discountType,",
						"          offerId,",
						"          POD,",
						"          status,",
						"          Timestamp,",
						"          uniqueId,",
						"          qtyVoided = itemqtyVoided",
						"     )) ~> SaleItem1",
						"filter3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          itemBDPrice = itemitemBDPrice,",
						"          itemBDTax = itemitemBDTax,",
						"          itemBPPrice = itemitemBPPrice,",
						"          itemBPTax = itemitemBPTax,",
						"          itemaction = itemitemaction,",
						"          itemcategory = itemitemcategory,",
						"          itemchgAfterTotal = itemitemchgAfterTotal,",
						"          itemcode = itemitemcode,",
						"          itemdayPart = itemitemdayPart,",
						"          itemdepartment = itemitemdepartment,",
						"          itemdepartmentClass = itemitemdepartmentClass,",
						"          itemdepartmentSubClass = itemitemdepartmentSubClass,",
						"          itemdescription = itemitemdescription,",
						"          itemdisplayOrder = itemitemdisplayOrder,",
						"          itemfamilyGroup = itemitemfamilyGroup,",
						"          itemgrillModifier = itemitemgrillModifier,",
						"          itemgrillQty = itemitemgrillQty,",
						"          itemid = itemitemid,",
						"          itemlevel = itemitemlevel,",
						"          itemqty = itemitemqty,",
						"          itemqtyPromo = itemitemqtyPromo,",
						"          itemqtyVoided = itemitemqtyVoided,",
						"          itemsolvedChoice = itemitemsolvedChoice,",
						"          itemtotalPrice = itemitemtotalPrice,",
						"          itemtotalTax = itemitemtotalTax,",
						"          itemtype = itemitemtype,",
						"          itemunitPrice = itemitemunitPrice,",
						"          itemunitTax = itemitemunitTax,",
						"          itemtaxchainamount = itemitemtaxchainamount,",
						"          itemtaxchainbaseAmount = itemitemtaxchainbaseAmount,",
						"          itemtaxchainid = itemitemtaxchainid,",
						"          itemtaxchainname = itemitemtaxchainname,",
						"          itemtaxchainrate = itemitemtaxchainrate,",
						"          beforeOfferPrice,",
						"          discountAmount,",
						"          discountType,",
						"          offerId,",
						"          uniqueId,",
						"          status,",
						"          POD,",
						"          Timestamp",
						"     )) ~> SaleItem2",
						"filter2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          itemBDTax = titemBDTax,",
						"          itemBDPrice = titemBDPrice,",
						"          itemBPPrice = titemBPPrice,",
						"          itemBPTax = titemBPTax,",
						"          itemaction = titemaction,",
						"          itemcategory = titemcategory,",
						"          itemchgAfterTotal = titemchgAfterTotal,",
						"          itemcode = titemcode,",
						"          itemdayPart = titemdayPart,",
						"          itemdepartment = titemdepartment,",
						"          titemdepartmentClass,",
						"          itemdepartmentSubClass = titemdepartmentSubClass,",
						"          itemdescription = titemdescription,",
						"          itemdisplayOrder = titemdisplayOrder,",
						"          itemfamilyGroup = titemfamilyGroup,",
						"          itemgrillModifier = titemgrillModifier,",
						"          itemgrillQty = titemgrillQty,",
						"          itemid = titemid,",
						"          itemlevel = titemlevel,",
						"          itemqty = titemqty,",
						"          itemqtyPromo = titemqtyPromo,",
						"          itemqtyVoided = titemqtyVoided,",
						"          itemsolvedChoice = titemsolvedChoice,",
						"          itemtotalPrice = titemtotalPrice,",
						"          itemtotalTax = titemtotalTax,",
						"          itemtype = titemtype,",
						"          itemunitPrice = titemunitPrice,",
						"          itemunitTax = titemunitTax,",
						"          itemtaxchainamount = titemtaxchainamount,",
						"          itemtaxchainid = titemtaxchainid,",
						"          itemtaxchainbaseAmount = titemtaxchainbaseAmount,",
						"          itemtaxchainname = titemtaxchainname,",
						"          itemtaxchainrate = titemtaxchainrate,",
						"          beforeOfferPrice,",
						"          discountAmount,",
						"          discountType,",
						"          offerId,",
						"          uniqueId,",
						"          status,",
						"          POD,",
						"          Timestamp",
						"     )) ~> SaleItem3",
						"filter4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          itemBDPrice,",
						"          storeId,",
						"          businessDate,",
						"          pos,",
						"          POD,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          uniqueId,",
						"          itemBDTax,",
						"          itemBPPrice,",
						"          itemBPTax,",
						"          itemaction,",
						"          itemcategory,",
						"          itemchgAfterTotal,",
						"          itemcode,",
						"          itemdayPart,",
						"          itemdepartment,",
						"          itemdepartmentClass,",
						"          itemdepartmentSubClass,",
						"          itemdescription,",
						"          itemdisplayOrder,",
						"          itemfamilyGroup,",
						"          itemgrillModifier,",
						"          itemgrillQty,",
						"          itemid,",
						"          itemlevel,",
						"          itemqty,",
						"          itemqtyPromo,",
						"          itemsolvedChoice,",
						"          itemtotalPrice,",
						"          itemtotalTax,",
						"          itemtype,",
						"          itemunitPrice,",
						"          itemunitTax,",
						"          taxchainid,",
						"          taxchainamount,",
						"          taxchainname,",
						"          taxchainbaseAmount,",
						"          taxchainrate,",
						"          itemqtyVoided",
						"     )) ~> refund1final",
						"filter6 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          itemBDPrice,",
						"          itemBDTax,",
						"          itemBPPrice,",
						"          itemBPTax,",
						"          itemaction,",
						"          itemcategory,",
						"          itemchgAfterTotal,",
						"          itemcode,",
						"          itemdayPart,",
						"          itemdepartment,",
						"          itemdepartmentClass,",
						"          itemdepartmentSubClass,",
						"          itemdescription,",
						"          itemdisplayOrder,",
						"          itemfamilyGroup,",
						"          itemgrillModifier,",
						"          itemgrillQty,",
						"          itemid,",
						"          itemisUpcharge,",
						"          itemlevel,",
						"          itemqty,",
						"          itemqtyPromo,",
						"          itemsolvedChoice,",
						"          itemtotalPrice,",
						"          itemtotalTax,",
						"          itemtype,",
						"          itemunitPrice,",
						"          itemunitTax,",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          POD,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          uniqueId,",
						"          itemtaxchainid,",
						"          itemtaxchainamount,",
						"          itemtaxchainname,",
						"          itemtaxchainbaseAmount,",
						"          itemtaxchainrate,",
						"          itemqtyVoided = itemqtyVoidedd",
						"     )) ~> refund2final",
						"filter5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          itemBDPrice,",
						"          itemBDTax,",
						"          itemBPPrice,",
						"          itemBPTax,",
						"          itemaction,",
						"          itemcategory,",
						"          itemchgAfterTotal,",
						"          itemcode,",
						"          itemdayPart,",
						"          itemdepartment,",
						"          itemdepartmentClass,",
						"          itemdepartmentSubClass,",
						"          itemdescription,",
						"          itemdisplayOrder,",
						"          itemfamilyGroup,",
						"          itemgrillModifier,",
						"          itemgrillQty,",
						"          itemid,",
						"          itemlevel,",
						"          itemqty,",
						"          itemqtyPromo,",
						"          itemsolvedChoice,",
						"          itemtotalPrice,",
						"          itemtotalTax,",
						"          itemtype,",
						"          itemunitPrice,",
						"          itemunitTax,",
						"          itemtaxchainid,",
						"          itemtaxchainamount,",
						"          itemtaxchainname,",
						"          itemtaxchainbaseAmount,",
						"          itemtaxchainrate,",
						"          storeId,",
						"          businessDate,",
						"          pos,",
						"          POD,",
						"          uniqueId,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          qtyVoided = qtyVoidedd",
						"     )) ~> refund3check"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RFS_SALES_STLD_XML')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_SALES_DATAFLOW_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RFS_SALES_STLD_XML",
								"type": "DatasetReference"
							},
							"name": "XMLSourceFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTLDProductionStatus"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecNode"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecEvent"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXInitGTotal"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXSetSMState"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXBaseConfig"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXBaseConfigposconfig"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXDayParts"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTrxTendertableTenderflag"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXTaxTabletype"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXDayOpen"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "TRXGetAuthorization"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "TRXOperLogin"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecEvDrawerclosee"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecRXRegTransfers"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RECTRXsale"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SalesCustomInfoDetail"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "TRXOrderPromotions"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "TRXOrderCustOffers"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXReduction"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleStart"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleChoice"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVChangeSizeSelection"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSetsaleType"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleTotal"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVAddTender"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXTenderTableType"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "CustomInfo"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecEVCustom"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXSaleOrder"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleItem"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SaleTenderMain"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SalesTAXRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SalesCustomInfoRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SaleTendersRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleStartRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleItemRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleChoiceRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EvSetSaleTypeRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleTotalRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVAddTenderRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleEndRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleEnd"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SaleItem1"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SaleItem2"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SaleItem3"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "refund1final"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "refund2final"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "refund3check"
						}
					],
					"transformations": [
						{
							"name": "FlattenRecNode"
						},
						{
							"name": "FlattenRecEventNode"
						},
						{
							"name": "FlattenRecTRXInitGlobal"
						},
						{
							"name": "FlattenTRXSMSState"
						},
						{
							"name": "FlattenTRXBaseConfig"
						},
						{
							"name": "FlattenTRXBaseConfigposconfig"
						},
						{
							"name": "FlattenRecTRXDayParts"
						},
						{
							"name": "FlattenRecTrxTendertableTenderflag1"
						},
						{
							"name": "FlattenRecTrxTendertableTenderflag2"
						},
						{
							"name": "FlattenRecTrxTendertableTenderflag3"
						},
						{
							"name": "FlattenRecTrxTendertableTenderflag4"
						},
						{
							"name": "FlattenRecTRXTaxTabletype"
						},
						{
							"name": "FlattenRecTRXDayOpen"
						},
						{
							"name": "FlattenTRXGetAuthorization"
						},
						{
							"name": "FlattenTRXOperLogin"
						},
						{
							"name": "FlattenRecEvDrawerClose"
						},
						{
							"name": "FlattenRecRXRegTransfers"
						},
						{
							"name": "FlattenSalesCustomInfoDetail1"
						},
						{
							"name": "FlattenSalesCustomInfoDetail2"
						},
						{
							"name": "FlattenTRXOrderPromotions"
						},
						{
							"name": "FlattenTRXOrderCustOffers"
						},
						{
							"name": "FlattenSaleTenderMain1"
						},
						{
							"name": "FlattenSaleTenderMain2"
						},
						{
							"name": "FlattenEVSaleStart1"
						},
						{
							"name": "FlattenEVSaleStart2"
						},
						{
							"name": "FlattenEVSaleChoice1"
						},
						{
							"name": "FlattenEVSaleChoice2"
						},
						{
							"name": "FlattenEVChangeSizeSelection"
						},
						{
							"name": "FlattenEVSetsaleType"
						},
						{
							"name": "FlattenEVSaleTotal"
						},
						{
							"name": "FlattenEVAddTender"
						},
						{
							"name": "FlattenRecTRXTenderTableType1"
						},
						{
							"name": "FlattenRecTRXTenderTableType2"
						},
						{
							"name": "FlattenCustomInfo"
						},
						{
							"name": "FlattenRecEVCustom"
						},
						{
							"name": "FlattenRecTRXSaleOrder"
						},
						{
							"name": "FlattenEVSaleItem"
						},
						{
							"name": "FlattenRefund"
						},
						{
							"name": "FlattenSalesCustomInfoRefund"
						},
						{
							"name": "FlattenSaleTendersRefund"
						},
						{
							"name": "FlattenEVRefund"
						},
						{
							"name": "FlattenEVSaleStartRefund"
						},
						{
							"name": "FlattenEVSaleItemRefund"
						},
						{
							"name": "FlattenEVSaleChoiceRefund"
						},
						{
							"name": "FlattenEvSetSaleTypeRefund"
						},
						{
							"name": "FlattenEVSaleTotalRefund"
						},
						{
							"name": "FlattenEVAddTenderRefund"
						},
						{
							"name": "FlattenEVSaleEndRefund"
						},
						{
							"name": "FlattenEVSaleEnd"
						},
						{
							"name": "FlattenSaleItem1"
						},
						{
							"name": "FlattenSaleItem2"
						},
						{
							"name": "FlattenSaleItem3"
						},
						{
							"name": "flatten1"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "flatten3"
						},
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filter3"
						},
						{
							"name": "filter4"
						},
						{
							"name": "filter5"
						},
						{
							"name": "filter6"
						},
						{
							"name": "filter7"
						},
						{
							"name": "filter8"
						},
						{
							"name": "filter9"
						},
						{
							"name": "filter10"
						},
						{
							"name": "filter11"
						},
						{
							"name": "filter12"
						},
						{
							"name": "filter13"
						},
						{
							"name": "filter14"
						},
						{
							"name": "filter15"
						},
						{
							"name": "filter16"
						},
						{
							"name": "filter17"
						},
						{
							"name": "filter18"
						},
						{
							"name": "filter19"
						},
						{
							"name": "filter20"
						},
						{
							"name": "filter21"
						},
						{
							"name": "filter22"
						},
						{
							"name": "filter23"
						},
						{
							"name": "filter24"
						},
						{
							"name": "filter25"
						},
						{
							"name": "filter26"
						},
						{
							"name": "filter27"
						},
						{
							"name": "filter28"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TLD as ({@businessDate} as integer, {@checkPoint} as boolean, {@dataComplete} as boolean, {@end} as boolean, {@hasMoreContent} as boolean, {@logVersion} as string, {@productionStatus} as string, {@storeId} as integer, {@swVersion} as string, Node as ({@id} as string, {@nodeStatus} as string, Event as ({@RegId} as integer, {@Time} as long, {@Type} as string, EV_Custom as (Code as string, Value as string), Ev_CancelSpecialTrx as ({@Type} as string), Ev_Custom as (Info as ({@code} as short, {@data} as string)), Ev_DrawerClose as ({@TotalOpenTime} as integer, {@UnauthorizedOpen} as boolean), Ev_SaleCustom as (Info as ({@name} as string, {@value} as string)), Ev_SetCOD as ({@COD} as string, {@POD} as string, {@WorkingMode} as string), TRX_Authorized_Cash_Drawer_Open as (Amount as double, Reason as string, Time as long, Type as string), TRX_BaseConfig as ({@POD} as string, {@POS} as string, Config as (AcceptNegativeQty as boolean, AcceptZeroPricePMix as boolean, CheckRefund as boolean, DecimalPlaces as short, FloatPriceTenderId as boolean, GrandTotalFlag as short, MenuPriceBasis as boolean, MinCirculatingAmount as double, StoreId as integer, StoreName as string, WeekDayBreakfastStartTime as short, WeekDayBreakfastStopTime as short, WeekEndBreakfastStartTime as short, WeekEndBreakfastStopTime as short), POSConfig as (CountTCsFullDiscEM as boolean, OverringBehaviour as boolean, RefundBehaviour as boolean)), TRX_DayClose as ({@BusinessDate} as integer), TRX_DayOpen as ({@BusinessDate} as integer), TRX_DayParts as ({@name} as string, DayPartFriday as ({@end} as string, {@start} as string), DayPartMonday as ({@end} as string, {@start} as string), DayPartSaturday as ({@end} as string, {@start} as string), DayPartSunday as ({@end} as string, {@start} as string), DayPartThursday as ({@end} as string, {@start} as string), DayPartTuesday as ({@end} as string, {@start} as string), DayPartWednesday as ({@end} as string, {@start} as string)), TRX_GetAuthorization as (Action as string, ExpirationDate as integer, IsLogged as boolean, ManagerID as short, ManagerName as string, Method as string, Password as string, SecurityLevel as short), TRX_InitGTotal as ({@amount} as double), TRX_OperLogin as (AutoLogin as boolean, CrewID as short, CrewName as string, CrewSecurityLevel as short, POD as string, RemotePOD as string), TRX_OperLogout as (AutoLogout as boolean, CrewID as short, CrewName as string), TRX_OrderNotRecalled as (OrderNotRecalled as ({@key} as string, {@major} as short, {@minor} as boolean, {@totalAmount} as double)[]), TRX_Price_Changed as (Time as long), TRX_Refund as ({@POD} as string, Order as ({@Timestamp} as long, {@booth} as boolean, {@endSaleDate} as integer, {@endSaleTime} as integer, {@fpFiscalReceiptNumber} as boolean, {@fpReceiptNumber} as boolean, {@key} as string, {@kind} as string, {@major} as short, {@minor} as boolean, {@nonProductAmount} as double, {@nonProductTax} as double, {@orderSrc} as boolean, {@receiptNumber} as short, {@saleType} as string, {@side} as string, {@startSaleDate} as integer, {@startSaleTime} as integer, {@totalAmount} as double, {@totalChargedTaxAmount} as double, {@totalTax} as double, {@totalTaxableAmount} as double, {@uniqueId} as string, CustomInfo as (Info as ({@name} as string, {@value} as string)[]), EventsDetail as (SaleEvent as ({@Time} as long, {@Type} as string, Ev_AddTender as (BaseAction as string, CardProviderID as string, CashlessData as string, CashlessTransactionID as string, FaceValue as double, Persisted as boolean, PreAuthorization as string, TenderAmount as double, TenderID as boolean), Ev_SaleAutoChoice as string, Ev_SaleChoice as (ChoiceCode as short, ProductCode as short, Quantity as boolean), Ev_SaleCustomInfo as (Info as ({@name} as string, {@value} as string)), Ev_SaleEnd as (Type as string), Ev_SaleGrillEnd as ({@Type} as string), Ev_SaleGrillOper as (ComponentCode as short, Operation as string, Quantity as boolean), Ev_SaleGrillRecipe as (ProductCode as short, Quantity as boolean, VMProductCode as short), Ev_SaleGrillStart as (ProductCode as short, Quantity as boolean, VMProductCode as short), Ev_SaleItem as (ProductCode as short, Quantity as short, UpdatedQuantity as boolean), Ev_SaleItemCancelled as (ForcedCancel as boolean, ProductCode as short, Quantity as boolean), Ev_SaleStart as (DisabledChoices as string, MultiOrder as boolean, TenderPersisted as boolean), Ev_SaleTotal as string, Ev_SetSaleType as (ForceExhibition as boolean, Type as string), TRX_GetAuthorization as (Action as string, ExpirationDate as integer, IsLogged as boolean, ManagerID as short, ManagerName as string, Method as string, Password as string, SecurityLevel as short))[]), Fiscal_Information as ({@TIN} as string, {@ZIP} as string, {@address} as string, {@name} as string), Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as short, {@BPTax} as short, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as integer, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as short, {@grillQty} as short, {@id} as integer, {@level} as short, {@qty} as short, {@qtyPromo} as short, {@qtyVoided} as short, {@solvedChoice} as integer, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as short, {@BPTax} as short, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as integer, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as short, {@grillQty} as short, {@id} as integer, {@isUpcharge} as boolean, {@level} as short, {@qty} as short, {@qtyPromo} as short, {@qtyVoided} as short, {@solvedChoice} as integer, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as short, {@BPTax} as short, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as integer, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as short, {@grillQty} as short, {@id} as integer, {@level} as short, {@qty} as short, {@qtyPromo} as short, {@qtyVoided} as short, {@solvedChoice} as integer, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, TaxChain as ({@BDAmount} as double, {@BDBaseAmount} as double, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short))[], TaxChain as ({@BDAmount} as double, {@BDBaseAmount} as double, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short))[], TaxChain as ({@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short))[], POSTimings as ({@itemsCount} as short, {@untilPay} as long, {@untilStore} as string, {@untilTotal} as long), TaxChain as ({@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short), Tenders as (Tender as (BaseAction as string, CardProviderID as string, CashlessData as string, CashlessTransactionID as string, DiscountDescription as string, FaceValue as double, ForeignCurrencyIndicator as boolean, PaymentChannel as string, Persisted as boolean, SubtotalOption as string, TaxOption as string, TenderAmount as double, TenderId as boolean, TenderKind as boolean, TenderName as string, TenderQuantity as boolean)), taxItem as ({@amount} as double, {@baseAmt} as double, {@desc} as string, {@id} as short, {@rate} as short))), TRX_RegTransfer as ({@Amount} as double, {@FaceValue} as double, {@OperType} as string, {@TenderID} as boolean, {@TenderName} as string, {@TransferType} as string), TRX_Sale as ({@POD} as string, {@RemPOD} as string, {@status} as string, Order as ({@Timestamp} as long, {@booth} as boolean, {@deliveryChannel} as string, {@endSaleDate} as integer, {@endSaleTime} as integer, {@foreignOrderId} as integer, {@fpFiscalReceiptNumber} as boolean, {@fpReceiptNumber} as boolean, {@key} as string, {@kind} as string, {@major} as short, {@minor} as short, {@nonProductAmount} as double, {@nonProductTax} as double, {@orderSrc} as short, {@paymentType} as boolean, {@receiptNumber} as short, {@saleType} as string, {@side} as string, {@startSaleDate} as integer, {@startSaleTime} as integer, {@totalAmount} as double, {@totalChargedTaxAmount} as double, {@totalTax} as double, {@totalTaxableAmount} as double, {@uniqueId} as string, COD as ({@name} as short, {@number} as boolean), CustomInfo as (Info as ({@name} as string, {@value} as string)[]), Customer as ({@greeting} as string, {@id} as string, {@loyaltyCardId} as string, {@loyaltyCardType} as boolean, {@nickname} as string), EventsDetail as (SaleEvent as ({@Time} as long, {@Type} as string, Ev_AddTender as (BaseAction as string, CardProviderID as string, CashlessData as string, CashlessTransactionID as string, FaceValue as double, Persisted as boolean, PreAuthorization as boolean, TenderAmount as double, TenderID as short), Ev_BackFromTotal as string, Ev_BreakValueMeal as (Components as (Product as ({@code} as short, {@quantity} as boolean)[]), ProductCode as short, Quantity as boolean), Ev_ChangeSizeSelection as (ProductCode as short, Quantity as short, SizeSelected as short), Ev_PromoItem as (Amount as double, ProductCode as short, Quantity as short, Type as string), Ev_SaleAutoChoice as string, Ev_SaleChoice as (ChoiceCode as short, ProductCode as short, Quantity as short), Ev_SaleClearChoice as (ChoiceCode as short, Quantity as short), Ev_SaleCustomInfo as (Info as ({@name} as string, {@value} as string)), Ev_SaleEnd as (Type as string), Ev_SaleGrillCancel as string, Ev_SaleGrillEnd as ({@Type} as string), Ev_SaleGrillOper as (ComponentCode as integer, Operation as string, Quantity as short), Ev_SaleGrillQualifier as (ComponentCode as short, Qualifier as boolean), Ev_SaleGrillRecipe as (ProductCode as short, Quantity as short, VMProductCode as short), Ev_SaleGrillStart as (ProductCode as short, Quantity as short, VMProductCode as short), Ev_SaleIncrementItemQty as (ProductCode as short, Quantity as short, SaleIndex as boolean), Ev_SaleItem as (ProductCode as short, Quantity as short, UpdatedQuantity as short), Ev_SaleItemCancelled as (ForcedCancel as boolean, ProductCode as short, Quantity as short), Ev_SaleRecalled as string, Ev_SaleStart as (DisabledChoices as string, MultiOrder as boolean, TenderPersisted as boolean), Ev_SaleStored as string, Ev_SaleTotal as string, Ev_SetSaleType as (ForceExhibition as boolean, Type as string), TRX_GetAuthorization as (Action as string, ExpirationDate as integer, IsLogged as boolean, ManagerID as short, ManagerName as string, Method as string, Password as string, SecurityLevel as short))[]), Fiscal_Information as ({@TIN} as string, {@ZIP} as string, {@address} as string, {@name} as string), Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as double, {@BPTax} as double, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as short, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as boolean, {@grillQty} as boolean, {@id} as short, {@level} as boolean, {@qty} as short, {@qtyPromo} as short, {@qtyVoided} as short, {@solvedChoice} as string, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as double, {@BPTax} as double, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as integer, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as boolean, {@grillQty} as short, {@id} as short, {@isUpcharge} as boolean, {@level} as boolean, {@qty} as short, {@qtyPromo} as short, {@qtyVoided} as short, {@solvedChoice} as integer, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as double, {@BPTax} as double, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as integer, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as short, {@grillQty} as short, {@id} as short, {@isUpcharge} as boolean, {@level} as short, {@qty} as short, {@qtyPromo} as short, {@qtyVoided} as short, {@solvedChoice} as integer, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, Promo as ({@id} as boolean, {@name} as string, {@qty} as short), TaxChain as ({@BDAmount} as string, {@BDBaseAmount} as string, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short))[], Offers as ({@beforeOfferPrice} as double, {@discountAmount} as double, {@discountType} as string, {@offerId} as integer), Promo as ({@id} as boolean, {@name} as string, {@qty} as short), PromotionApplied as ({@discountAmount} as double, {@discountType} as string, {@eligible} as boolean, {@offerId} as integer, {@originalItemPromoQty} as boolean, {@originalPrice} as double, {@originalProductCode} as string, {@promotionCounter} as boolean, {@promotionId} as integer), TaxChain as ({@BDAmount} as double, {@BDBaseAmount} as double, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short))[], Offers as ({@beforeOfferPrice} as double, {@discountAmount} as double, {@discountType} as string, {@offerId} as integer), Promo as ({@id} as boolean, {@name} as string, {@qty} as short), PromotionApplied as ({@discountAmount} as double, {@discountType} as string, {@eligible} as boolean, {@offerId} as integer, {@originalItemPromoQty} as boolean, {@originalPrice} as double, {@originalProductCode} as string, {@promotionCounter} as short, {@promotionId} as integer), TaxChain as ({@BDAmount} as double, {@BDBaseAmount} as double, {@BPAmount} as double, {@BPBaseAmount} as double, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short), discounts as (discount as ({@amount} as double, {@description} as string, {@id} as short, {@reduction} as double, {@type} as string, {@value} as double)))[], Offers as ({@applied} as boolean, {@customerId} as integer, {@customerType} as boolean, {@offerBarcodeType} as string, {@offerId} as integer, {@offerName} as string, {@offerType} as string, {@override} as boolean, {@promotionId} as integer)[], POSTimings as ({@itemsCount} as short, {@untilPay} as long, {@untilStore} as long, {@untilTotal} as long), Promotions as (Promotion as ({@countTowardsPromotionLimit} as boolean, {@discountAmount} as double, {@discountType} as string, {@exclusive} as boolean, {@offerId} as integer, {@promotionCounter} as short, {@promotionId} as integer, {@promotionName} as string, {@promotionOnTender} as boolean, {@returnedValue} as double)[]), Reduction as (AfterTotal as short, Amount as double, AmountAfterTotal as double, AmountBeforeTotal as double, BeforeTotal as short, Qty as short), TaxChain as ({@BDAmount} as double, {@BDBaseAmount} as double, {@BPAmount} as double, {@BPBaseAmount} as double, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short), Tenders as (Tender as (BaseAction as string, CardProviderID as string, CashlessData as string, CashlessTransactionID as string, DiscountDescription as string, FaceValue as double, ForeignCurrencyIndicator as boolean, PaymentChannel as string, Persisted as boolean, SourceTenders as (SourceTender as ({@sourceCode} as boolean, {@sourceValue} as double)), SubtotalOption as string, TaxOption as string, TenderAmount as double, TenderId as short, TenderKind as short, TenderName as string, TenderQuantity as short)[]), taxItem as ({@amount} as double, {@baseAmt} as double, {@desc} as string, {@id} as short, {@rate} as short))), TRX_SetPOD as ({@PODId} as string), TRX_SetSMState as ({@PODId} as string, CrewId as short, CrewName as string, CrewSecurityLevel as short, InitialFloat as double, LoginTime as integer, LogoutTime as integer, POSState as string), TRX_Show_Prices as (Time as long), TRX_Signature_Version as (CryptographyAlgorithm as string, PrivateKeyVersion as string), TRX_TaxTable as (TaxType as (Precision as short, Rounding as string, TaxBasis as string, TaxCalcType as string, TaxDescription as string, TaxId as short, TaxRate as short)[]), TRX_TenderTable as (TenderType as (CreditSales as ({@LegacyId} as short), CurrencyDecimals as short, DefaultHaloLimit as short, DefaultSkimLimit as short, ElectronicPayment as ({@LegacyId} as string), ForeignCurrency as ({@ExchangeRate} as double, {@LegacyId} as short, {@Orientation} as string, {@Precision} as boolean, {@Rounding} as string), GiftCoupon as ({@Amount} as short, {@LegacyId} as string, {@OperatorDefined} as boolean), OtherPayment as ({@LegacyId} as string), SubtotalOption as string, TaxOption as string, TenderCategory as string, TenderChange as ({@id} as boolean, {@maxAllowed} as double, {@roundToMinAmount} as string, {@type} as string), TenderFiscalIndex as short, TenderFlags as (TenderFlag as string[]), TenderId as short, TenderName as string)[]), TRX_UnaDrawerOpening as string, TRX_UpdateCustomCounter as ({@counterName} as string, {@counterValue} as double, {@operation} as string, {@operationValue} as double))[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     validationMode: 'none',",
						"     namespaces: true,",
						"     dateFormats: ['dd-MM-yyyy'],",
						"     timestampFormats: ['MM/dd/yyyy HH:mm:ss'],",
						"     preferredIntegralType: 'short',",
						"     preferredFractionalType: 'double') ~> XMLSourceFile",
						"XMLSourceFile foldDown(unroll(TLD.Node),",
						"     mapColumn(",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@checkPoint} = TLD.{@checkPoint},",
						"          {@dataComplete} = TLD.{@dataComplete},",
						"          {@end} = TLD.{@end},",
						"          {@hasMoreContent} = TLD.{@hasMoreContent},",
						"          {@logVersion} = TLD.{@logVersion},",
						"          {@productionStatus} = TLD.{@productionStatus},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@swVersion} = TLD.{@swVersion},",
						"          {@id} = TLD.Node.{@id},",
						"          {@nodeStatus} = TLD.Node.{@nodeStatus},",
						"          Event = TLD.Node.Event",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecNode",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          RecEventid = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@RegId} = TLD.Node.Event.{@RegId}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecEventNode",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          id = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@amount} = TLD.Node.Event.TRX_InitGTotal.{@amount}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXInitGlobal",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          id = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@PODId} = TLD.Node.Event.TRX_SetSMState.{@PODId},",
						"          POSState = TLD.Node.Event.TRX_SetSMState.POSState,",
						"          CrewId = TLD.Node.Event.TRX_SetSMState.CrewId,",
						"          CrewName = TLD.Node.Event.TRX_SetSMState.CrewName,",
						"          CrewSecurityLevel = TLD.Node.Event.TRX_SetSMState.CrewSecurityLevel,",
						"          LoginTime = TLD.Node.Event.TRX_SetSMState.LoginTime,",
						"          LogoutTime = TLD.Node.Event.TRX_SetSMState.LogoutTime,",
						"          InitialFloat = TLD.Node.Event.TRX_SetSMState.InitialFloat",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXSMSState",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@POD} = TLD.Node.Event.TRX_BaseConfig.{@POD},",
						"          MenuPriceBasis = TLD.Node.Event.TRX_BaseConfig.Config.MenuPriceBasis,",
						"          WeekEndBreakfastStartTime = TLD.Node.Event.TRX_BaseConfig.Config.WeekEndBreakfastStartTime,",
						"          WeekEndBreakfastStopTime = TLD.Node.Event.TRX_BaseConfig.Config.WeekEndBreakfastStopTime,",
						"          WeekDayBreakfastStartTime = TLD.Node.Event.TRX_BaseConfig.Config.WeekDayBreakfastStartTime,",
						"          WeekDayBreakfastStopTime = TLD.Node.Event.TRX_BaseConfig.Config.WeekDayBreakfastStopTime,",
						"          DecimalPlaces = TLD.Node.Event.TRX_BaseConfig.Config.DecimalPlaces,",
						"          CheckRefund = TLD.Node.Event.TRX_BaseConfig.Config.CheckRefund,",
						"          GrandTotalFlag = TLD.Node.Event.TRX_BaseConfig.Config.GrandTotalFlag,",
						"          StoreId = TLD.Node.Event.TRX_BaseConfig.Config.StoreId,",
						"          StoreName = TLD.Node.Event.TRX_BaseConfig.Config.StoreName,",
						"          AcceptNegativeQty = TLD.Node.Event.TRX_BaseConfig.Config.AcceptNegativeQty,",
						"          AcceptZeroPricePMix = TLD.Node.Event.TRX_BaseConfig.Config.AcceptZeroPricePMix,",
						"          FloatPriceTenderId = TLD.Node.Event.TRX_BaseConfig.Config.FloatPriceTenderId",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXBaseConfig",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@POD} = TLD.Node.Event.TRX_BaseConfig.{@POD},",
						"          CountTCsFullDiscEM = TLD.Node.Event.TRX_BaseConfig.POSConfig.CountTCsFullDiscEM,",
						"          RefundBehaviour = TLD.Node.Event.TRX_BaseConfig.POSConfig.RefundBehaviour,",
						"          OverringBehaviour = TLD.Node.Event.TRX_BaseConfig.POSConfig.OverringBehaviour",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXBaseConfigposconfig",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@id} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@name} = TLD.Node.Event.TRX_DayParts.{@name},",
						"          Mondayend = TLD.Node.Event.TRX_DayParts.DayPartMonday.{@end},",
						"          Mondaystart = TLD.Node.Event.TRX_DayParts.DayPartMonday.{@start},",
						"          Tuesdayend = TLD.Node.Event.TRX_DayParts.DayPartTuesday.{@end},",
						"          Tuesdaystart = TLD.Node.Event.TRX_DayParts.DayPartTuesday.{@start},",
						"          Wednesdayend = TLD.Node.Event.TRX_DayParts.DayPartWednesday.{@end},",
						"          Wednesdaystart = TLD.Node.Event.TRX_DayParts.DayPartWednesday.{@start},",
						"          Thursdayend = TLD.Node.Event.TRX_DayParts.DayPartThursday.{@end},",
						"          Thursdaystart = TLD.Node.Event.TRX_DayParts.DayPartThursday.{@start},",
						"          fridayend = TLD.Node.Event.TRX_DayParts.DayPartFriday.{@end},",
						"          fridaystart = TLD.Node.Event.TRX_DayParts.DayPartFriday.{@start},",
						"          saturdayend = TLD.Node.Event.TRX_DayParts.DayPartSaturday.{@end},",
						"          saturdaystart = TLD.Node.Event.TRX_DayParts.DayPartSaturday.{@start},",
						"          sundayend = TLD.Node.Event.TRX_DayParts.DayPartSunday.{@end},",
						"          sundaystart = TLD.Node.Event.TRX_DayParts.DayPartSunday.{@start},",
						"          POD = TLD.Node.Event.TRX_BaseConfig.{@POD}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXDayParts",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          TenderType = TLD.Node.Event.TRX_TenderTable.TenderType",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTrxTendertableTenderflag1",
						"FlattenRecTrxTendertableTenderflag1 foldDown(unroll(TenderType),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          EventType = {@Type},",
						"          TenderId = TenderType.TenderId,",
						"          TenderName = TenderType.TenderName,",
						"          TenderCategory = TenderType.TenderCategory,",
						"          TenderFlag = TenderType.TenderFlags.TenderFlag,",
						"          TenderType",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTrxTendertableTenderflag2",
						"FlattenRecTrxTendertableTenderflag2 foldDown(unroll(TenderFlag),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          EventType,",
						"          TenderId,",
						"          TenderName,",
						"          TenderCategory,",
						"          TenderFlag = TenderType.TenderFlags.TenderFlag",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTrxTendertableTenderflag3",
						"FlattenRecTrxTendertableTenderflag3 foldDown(unroll(TenderFlag),",
						"     mapColumn(",
						"          TenderFlag,",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          EventType,",
						"          TenderId,",
						"          TenderName,",
						"          TenderCategory",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTrxTendertableTenderflag4",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event.TRX_TaxTable.TaxType),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          TaxId = TLD.Node.Event.TRX_TaxTable.TaxType.TaxId,",
						"          TaxDescription = TLD.Node.Event.TRX_TaxTable.TaxType.TaxDescription,",
						"          TaxRate = TLD.Node.Event.TRX_TaxTable.TaxType.TaxRate,",
						"          TaxBasis = TLD.Node.Event.TRX_TaxTable.TaxType.TaxBasis,",
						"          TaxCalcType = TLD.Node.Event.TRX_TaxTable.TaxType.TaxCalcType,",
						"          {@Rounding} = TLD.Node.Event.TRX_TaxTable.TaxType.Rounding,",
						"          Precision = TLD.Node.Event.TRX_TaxTable.TaxType.Precision,",
						"          {sale.pod} = TLD.Node.Event.TRX_Sale.{@POD}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXTaxTabletype",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {TRX_DayOpen.Businessdate} = TLD.Node.Event.TRX_DayOpen.{@BusinessDate}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXDayOpen",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          ManagerID = TLD.Node.Event.TRX_GetAuthorization.ManagerID,",
						"          ManagerName = TLD.Node.Event.TRX_GetAuthorization.ManagerName,",
						"          SecurityLevel = TLD.Node.Event.TRX_GetAuthorization.SecurityLevel,",
						"          Password = TLD.Node.Event.TRX_GetAuthorization.Password,",
						"          IsLogged = TLD.Node.Event.TRX_GetAuthorization.IsLogged,",
						"          ExpirationDate = TLD.Node.Event.TRX_GetAuthorization.ExpirationDate",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXGetAuthorization",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          CrewID = TLD.Node.Event.TRX_OperLogin.CrewID,",
						"          CrewName = TLD.Node.Event.TRX_OperLogin.CrewName,",
						"          CrewSecurityLevel = TLD.Node.Event.TRX_OperLogin.CrewSecurityLevel,",
						"          POD = TLD.Node.Event.TRX_OperLogin.POD,",
						"          RemotePOD = TLD.Node.Event.TRX_OperLogin.RemotePOD,",
						"          AutoLogin = TLD.Node.Event.TRX_OperLogin.AutoLogin",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXOperLogin",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          businessdate = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@UnauthorizedOpen} = TLD.Node.Event.Ev_DrawerClose.{@UnauthorizedOpen},",
						"          {@TotalOpenTime} = TLD.Node.Event.Ev_DrawerClose.{@TotalOpenTime}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecEvDrawerClose",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          Businessdate = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@Amount} = TLD.Node.Event.TRX_RegTransfer.{@Amount},",
						"          {@FaceValue} = TLD.Node.Event.TRX_RegTransfer.{@FaceValue},",
						"          {@OperType} = TLD.Node.Event.TRX_RegTransfer.{@OperType},",
						"          {@TenderID} = TLD.Node.Event.TRX_RegTransfer.{@TenderID},",
						"          {@TenderName} = TLD.Node.Event.TRX_RegTransfer.{@TenderName},",
						"          {@TransferType} = TLD.Node.Event.TRX_RegTransfer.{@TransferType}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecRXRegTransfers",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@POD} = TLD.Node.Event.TRX_Sale.{@POD},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          EndsaleTime = TLD.Node.Event.TRX_Sale.Order.{@endSaleTime},",
						"          {@endSaleDate} = TLD.Node.Event.TRX_Sale.Order.{@endSaleDate},",
						"          {@startSaleTime} = TLD.Node.Event.TRX_Sale.Order.{@startSaleTime},",
						"          {@startSaleDate} = TLD.Node.Event.TRX_Sale.Order.{@startSaleDate},",
						"          {@orderSrc} = TLD.Node.Event.TRX_Sale.Order.{@orderSrc},",
						"          {@nonProductTax} = TLD.Node.Event.TRX_Sale.Order.{@nonProductTax},",
						"          {@totalTax} = TLD.Node.Event.TRX_Sale.Order.{@totalTax},",
						"          {@nonProductAmount} = TLD.Node.Event.TRX_Sale.Order.{@nonProductAmount},",
						"          {@totalAmount} = TLD.Node.Event.TRX_Sale.Order.{@totalAmount},",
						"          {@saleType} = TLD.Node.Event.TRX_Sale.Order.{@saleType},",
						"          {@booth} = TLD.Node.Event.TRX_Sale.Order.{@booth},",
						"          {@receiptNumber} = TLD.Node.Event.TRX_Sale.Order.{@receiptNumber},",
						"          {@side} = TLD.Node.Event.TRX_Sale.Order.{@side},",
						"          {@minor} = TLD.Node.Event.TRX_Sale.Order.{@minor},",
						"          {@major} = TLD.Node.Event.TRX_Sale.Order.{@major},",
						"          {@key} = TLD.Node.Event.TRX_Sale.Order.{@key},",
						"          {@kind} = TLD.Node.Event.TRX_Sale.Order.{@kind},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@Timestamp} = TLD.Node.Event.TRX_Sale.Order.{@Timestamp},",
						"          {@foreignOrderId} = TLD.Node.Event.TRX_Sale.Order.{@foreignOrderId},",
						"          {@untilStore} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilStore},",
						"          {@untilTotal} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilTotal},",
						"          {@untilPay} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilPay},",
						"          {@itemsCount} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@itemsCount},",
						"          TaxChainId = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@id},",
						"          {@amount} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@amount},",
						"          {@name} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@name},",
						"          {@baseAmount} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@baseAmount},",
						"          {@rate} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@rate},",
						"          Info = TLD.Node.Event.TRX_Refund.Order.CustomInfo.Info,",
						"          AfterTotal = TLD.Node.Event.TRX_Sale.Order.Reduction.AfterTotal,",
						"          Amount = TLD.Node.Event.TRX_Sale.Order.Reduction.Amount,",
						"          AmountAfterTotal = TLD.Node.Event.TRX_Sale.Order.Reduction.AmountAfterTotal,",
						"          AmountBeforeTotal = TLD.Node.Event.TRX_Sale.Order.Reduction.AmountBeforeTotal,",
						"          BeforeTotal = TLD.Node.Event.TRX_Sale.Order.Reduction.BeforeTotal,",
						"          Qty = TLD.Node.Event.TRX_Sale.Order.Reduction.Qty",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSalesCustomInfoDetail1",
						"FlattenSalesCustomInfoDetail1 foldDown(unroll(Info),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@status},",
						"          EndsaleTime,",
						"          {@endSaleDate},",
						"          {@startSaleTime},",
						"          {@startSaleDate},",
						"          {@orderSrc},",
						"          {@nonProductTax},",
						"          {@totalTax},",
						"          {@nonProductAmount},",
						"          {@totalAmount},",
						"          {@saleType},",
						"          {@booth},",
						"          {@receiptNumber},",
						"          {@side},",
						"          {@minor},",
						"          {@major},",
						"          {@key},",
						"          {@kind},",
						"          {@uniqueId},",
						"          {@Timestamp},",
						"          {@foreignOrderId},",
						"          {@untilStore},",
						"          {@untilTotal},",
						"          {@untilPay},",
						"          {@itemsCount},",
						"          TaxChainId,",
						"          {@amount},",
						"          {@name},",
						"          {@baseAmount},",
						"          {@rate},",
						"          customInfoname = Info.{@name},",
						"          custominfovalue = Info.{@value}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSalesCustomInfoDetail2",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion),",
						"     mapColumn(",
						"          BusinessDate = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@promotionId} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@promotionId},",
						"          {@promotionName} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@promotionName},",
						"          {@promotionCounter} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@promotionCounter},",
						"          {@discountType} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@discountType},",
						"          {@discountAmount} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@discountAmount},",
						"          {@offerId} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@offerId},",
						"          {@exclusive} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@exclusive},",
						"          {@promotionOnTender} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@promotionOnTender},",
						"          {@countTowardsPromotionLimit} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@countTowardsPromotionLimit},",
						"          {@returnedValue} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@returnedValue}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXOrderPromotions",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event.TRX_Sale.Order.Offers),",
						"     mapColumn(",
						"          Businessdate = TLD.{@businessDate},",
						"          Storeid = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@offerId} = TLD.Node.Event.TRX_Sale.Order.Offers.{@offerId},",
						"          {@customerId} = TLD.Node.Event.TRX_Sale.Order.Offers.{@customerId},",
						"          {@offerName} = TLD.Node.Event.TRX_Sale.Order.Offers.{@offerName},",
						"          {@override} = TLD.Node.Event.TRX_Sale.Order.Offers.{@override},",
						"          {@applied} = TLD.Node.Event.TRX_Sale.Order.Offers.{@applied},",
						"          {@promotionId} = TLD.Node.Event.TRX_Sale.Order.Offers.{@promotionId},",
						"          {@offerBarcodeType} = TLD.Node.Event.TRX_Sale.Order.Offers.{@offerBarcodeType}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXOrderCustOffers",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@Timestamp} = TLD.Node.Event.TRX_Sale.Order.{@Timestamp},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {Event.type} = TLD.Node.Event.{@Type},",
						"          {@POD} = TLD.Node.Event.TRX_Sale.{@POD},",
						"          {@saleType} = TLD.Node.Event.TRX_Sale.Order.{@saleType},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          Tender = TLD.Node.Event.TRX_Sale.Order.Tenders.Tender",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleTenderMain1",
						"FlattenSaleTenderMain1 foldDown(unroll(Tender),",
						"     mapColumn(",
						"          POS,",
						"          timestamp = {@Timestamp},",
						"          businessDate = {@businessDate},",
						"          storeId = {@storeId},",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          {Event.type},",
						"          POD = {@POD},",
						"          saleType = {@saleType},",
						"          status = {@status},",
						"          uniqueId = {@uniqueId},",
						"          baseaction = Tender.BaseAction,",
						"          Persisted = Tender.Persisted,",
						"          CardProviderID = Tender.CardProviderID,",
						"          CashlessData = Tender.CashlessData,",
						"          TaxOption = Tender.TaxOption,",
						"          SubtotalOption = Tender.SubtotalOption,",
						"          DiscountDescription = Tender.DiscountDescription,",
						"          CashlessTransactionID = Tender.CashlessTransactionID,",
						"          sourceValue = Tender.SourceTenders.SourceTender.{@sourceValue},",
						"          sourceCode = Tender.SourceTenders.SourceTender.{@sourceCode},",
						"          Tender",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleTenderMain2",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          SaleEvent = TLD.Node.Event.TRX_Sale.Order.EventsDetail.SaleEvent,",
						"          {@POD} = TLD.Node.Event.TRX_Sale.{@POD},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleStart1",
						"FlattenEVSaleStart1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          type = {@Type},",
						"          SaleEventtype = SaleEvent.{@Type},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          {@POD},",
						"          {@uniqueId},",
						"          DisabledChoices = SaleEvent.Ev_SaleStart.DisabledChoices,",
						"          TenderPersisted = SaleEvent.Ev_SaleStart.TenderPersisted,",
						"          MultiOrder = SaleEvent.Ev_SaleStart.MultiOrder,",
						"          {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleStart2",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          businessdate = TLD.{@businessDate},",
						"          storeid = TLD.{@storeId},",
						"          POS = TLD.Node.{@id},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          SaleEvent = TLD.Node.Event.TRX_Sale.Order.EventsDetail.SaleEvent,",
						"          {@POD} = TLD.Node.Event.TRX_Sale.{@POD},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@name} = TLD.Node.Event.Ev_SaleCustom.Info.{@name},",
						"          {@value} = TLD.Node.Event.Ev_SaleCustom.Info.{@value},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleChoice1",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          type = {@Type},",
						"          SaleEventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          {@uniqueId},",
						"          {@POD},",
						"          ChoiceCode = SaleEvent.Ev_SaleChoice.ChoiceCode,",
						"          ProductCode = SaleEvent.Ev_SaleChoice.ProductCode,",
						"          Quantity = SaleEvent.Ev_SaleChoice.Quantity,",
						"          {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleChoice2",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          SizeSelected = SaleEvent.Ev_ChangeSizeSelection.SizeSelected,",
						"          ProductCode = SaleEvent.Ev_ChangeSizeSelection.ProductCode,",
						"          Quantity = SaleEvent.Ev_ChangeSizeSelection.Quantity,",
						"          status = {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVChangeSizeSelection",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          {setsaletype.type} = SaleEvent.Ev_SetSaleType.Type,",
						"          ForceExhibition = SaleEvent.Ev_SetSaleType.ForceExhibition,",
						"          status = {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSetsaleType",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          Ev_SaleTotal = SaleEvent.Ev_SaleTotal,",
						"          status = {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleTotal",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleventtime = SaleEvent.{@Time},",
						"          saleventType = SaleEvent.{@Type},",
						"          TenderID = SaleEvent.Ev_AddTender.TenderID,",
						"          FaceValue = SaleEvent.Ev_AddTender.FaceValue,",
						"          TenderAmount = SaleEvent.Ev_AddTender.TenderAmount,",
						"          BaseAction = SaleEvent.Ev_AddTender.BaseAction,",
						"          Persisted = SaleEvent.Ev_AddTender.Persisted,",
						"          CardProviderID = SaleEvent.Ev_AddTender.CardProviderID,",
						"          CashlessData = SaleEvent.Ev_AddTender.CashlessData,",
						"          CashlessTransactionID = SaleEvent.Ev_AddTender.CashlessTransactionID,",
						"          PreAuthorization = SaleEvent.Ev_AddTender.PreAuthorization,",
						"          name = {@name},",
						"          value = {@value},",
						"          status = {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVAddTender",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          TenderType = TLD.Node.Event.TRX_TenderTable.TenderType",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXTenderTableType1",
						"FlattenRecTRXTenderTableType1 foldDown(unroll(TenderType),",
						"     mapColumn(",
						"          POS,",
						"          businessDate = {@businessDate},",
						"          storeId = {@storeId},",
						"          EventTime = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          {TenderType.tenderid} = TenderType.TenderId,",
						"          TenderFiscalIndex = TenderType.TenderFiscalIndex,",
						"          TenderName = TenderType.TenderName,",
						"          TenderCategory = TenderType.TenderCategory,",
						"          TaxOption = TenderType.TaxOption,",
						"          DefaultSkimLimit = TenderType.DefaultSkimLimit,",
						"          DefaultHaloLimit = TenderType.DefaultHaloLimit,",
						"          SubtotalOption = TenderType.SubtotalOption,",
						"          CurrencyDecimals = TenderType.CurrencyDecimals,",
						"          {tenderchange.type} = TenderType.TenderChange.{@type},",
						"          {tenderchange.id} = TenderType.TenderChange.{@id},",
						"          maxAllowed = TenderType.TenderChange.{@maxAllowed},",
						"          roundToMinAmount = TenderType.TenderChange.{@roundToMinAmount},",
						"          {creditsales.legacyid} = TenderType.CreditSales.{@LegacyId},",
						"          {foreigncurrency.legacyid} = TenderType.ForeignCurrency.{@LegacyId},",
						"          Rounding = TenderType.ForeignCurrency.{@Rounding},",
						"          Precision = TenderType.ForeignCurrency.{@Precision},",
						"          Orientation = TenderType.ForeignCurrency.{@Orientation},",
						"          ExchangeRate = TenderType.ForeignCurrency.{@ExchangeRate},",
						"          {electronicpayment.legacyid} = TenderType.ElectronicPayment.{@LegacyId},",
						"          {Giftcupon.legacyid} = TenderType.GiftCoupon.{@LegacyId},",
						"          Amount = TenderType.GiftCoupon.{@Amount},",
						"          OperatorDefined = TenderType.GiftCoupon.{@OperatorDefined}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXTenderTableType2",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          {info.value} = SaleEvent.Ev_SaleCustomInfo.Info.{@value},",
						"          {info.name} = SaleEvent.Ev_SaleCustomInfo.Info.{@name},",
						"          {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenCustomInfo",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          businessDate = TLD.{@businessDate},",
						"          storeId = TLD.{@storeId},",
						"          Time = TLD.Node.Event.{@Time},",
						"          RegId = TLD.Node.Event.{@RegId},",
						"          Type = TLD.Node.Event.{@Type},",
						"          {Info.code} = TLD.Node.Event.Ev_Custom.Info.{@code},",
						"          {Info.data} = TLD.Node.Event.Ev_Custom.Info.{@data}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecEVCustom",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@Timestamp} = TLD.Node.Event.TRX_Sale.Order.{@Timestamp},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          MainPOD = TLD.Node.Event.TRX_Sale.{@POD},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          {@endSaleTime} = TLD.Node.Event.TRX_Sale.Order.{@endSaleTime},",
						"          {@endSaleDate} = TLD.Node.Event.TRX_Sale.Order.{@endSaleDate},",
						"          {@startSaleTime} = TLD.Node.Event.TRX_Sale.Order.{@startSaleTime},",
						"          {@startSaleDate} = TLD.Node.Event.TRX_Sale.Order.{@startSaleDate},",
						"          {@orderSrc} = TLD.Node.Event.TRX_Sale.Order.{@orderSrc},",
						"          {@nonProductTax} = TLD.Node.Event.TRX_Sale.Order.{@nonProductTax},",
						"          {@totalTax} = TLD.Node.Event.TRX_Sale.Order.{@totalTax},",
						"          {@nonProductAmount} = TLD.Node.Event.TRX_Sale.Order.{@nonProductAmount},",
						"          {@totalAmount} = TLD.Node.Event.TRX_Sale.Order.{@totalAmount},",
						"          {@saleType} = TLD.Node.Event.TRX_Sale.Order.{@saleType},",
						"          {@booth} = TLD.Node.Event.TRX_Sale.Order.{@booth},",
						"          {@receiptNumber} = TLD.Node.Event.TRX_Sale.Order.{@receiptNumber},",
						"          {@side} = TLD.Node.Event.TRX_Sale.Order.{@side},",
						"          {@minor} = TLD.Node.Event.TRX_Sale.Order.{@minor},",
						"          {@major} = TLD.Node.Event.TRX_Sale.Order.{@major},",
						"          {@key} = TLD.Node.Event.TRX_Sale.Order.{@key},",
						"          {@kind} = TLD.Node.Event.TRX_Sale.Order.{@kind},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@foreignOrderId} = TLD.Node.Event.TRX_Sale.Order.{@foreignOrderId},",
						"          {@untilStore} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilStore},",
						"          {@untilTotal} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilTotal},",
						"          {@untilPay} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilPay},",
						"          {@itemsCount} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@itemsCount},",
						"          taxchainid = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@id},",
						"          taxchainamount = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@amount},",
						"          taxchainname = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@name},",
						"          {@baseAmount} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@baseAmount},",
						"          {@rate} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@rate}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXSaleOrder",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saletime = SaleEvent.{@Time},",
						"          saletype = SaleEvent.{@Type},",
						"          ProductCode = SaleEvent.Ev_SaleItem.ProductCode,",
						"          Quantity = SaleEvent.Ev_SaleItem.Quantity,",
						"          UpdatedQuantity = SaleEvent.Ev_SaleItem.UpdatedQuantity,",
						"          status = {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleItem",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          TLD = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@id} = TLD.Node.{@id},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@POD} = TLD.Node.Event.TRX_Refund.{@POD},",
						"          {@endSaleTime} = TLD.Node.Event.TRX_Refund.Order.{@endSaleTime},",
						"          {@endSaleDate} = TLD.Node.Event.TRX_Refund.Order.{@endSaleDate},",
						"          {@startSaleTime} = TLD.Node.Event.TRX_Refund.Order.{@startSaleTime},",
						"          {@startSaleDate} = TLD.Node.Event.TRX_Refund.Order.{@startSaleDate},",
						"          {@orderSrc} = TLD.Node.Event.TRX_Refund.Order.{@orderSrc},",
						"          {@nonProductTax} = TLD.Node.Event.TRX_Refund.Order.{@nonProductTax},",
						"          {@totalTax} = TLD.Node.Event.TRX_Refund.Order.{@totalTax},",
						"          {@nonProductAmount} = TLD.Node.Event.TRX_Refund.Order.{@nonProductAmount},",
						"          {@totalAmount} = TLD.Node.Event.TRX_Refund.Order.{@totalAmount},",
						"          {@saleType} = TLD.Node.Event.TRX_Refund.Order.{@saleType},",
						"          {@booth} = TLD.Node.Event.TRX_Refund.Order.{@booth},",
						"          {@receiptNumber} = TLD.Node.Event.TRX_Refund.Order.{@receiptNumber},",
						"          {@side} = TLD.Node.Event.TRX_Refund.Order.{@side},",
						"          {@minor} = TLD.Node.Event.TRX_Refund.Order.{@minor},",
						"          {@major} = TLD.Node.Event.TRX_Refund.Order.{@major},",
						"          {@key} = TLD.Node.Event.TRX_Refund.Order.{@key},",
						"          {@kind} = TLD.Node.Event.TRX_Refund.Order.{@kind},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Refund.Order.{@uniqueId},",
						"          {@untilStore} = TLD.Node.Event.TRX_Refund.Order.POSTimings.{@untilStore},",
						"          {@untilPay} = TLD.Node.Event.TRX_Refund.Order.POSTimings.{@untilPay},",
						"          {@untilTotal} = TLD.Node.Event.TRX_Refund.Order.POSTimings.{@untilTotal},",
						"          {@itemsCount} = TLD.Node.Event.TRX_Refund.Order.POSTimings.{@itemsCount},",
						"          TAXchainid = TLD.Node.Event.TRX_Refund.Order.TaxChain.{@id},",
						"          {@amount} = TLD.Node.Event.TRX_Refund.Order.TaxChain.{@amount},",
						"          {@name} = TLD.Node.Event.TRX_Refund.Order.TaxChain.{@name},",
						"          {@baseAmount} = TLD.Node.Event.TRX_Refund.Order.TaxChain.{@baseAmount},",
						"          {@rate} = TLD.Node.Event.TRX_Refund.Order.TaxChain.{@rate},",
						"          Info = TLD.Node.Event.TRX_Refund.Order.CustomInfo.Info,",
						"          SaleEvent = TLD.Node.Event.TRX_Refund.Order.EventsDetail.SaleEvent",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRefund",
						"FlattenRefund foldDown(unroll(Info),",
						"     mapColumn(",
						"          TLD,",
						"          {@storeId},",
						"          {@id},",
						"          {@RegId},",
						"          {@Type},",
						"          {@Time},",
						"          {@POD},",
						"          {@endSaleTime},",
						"          {@endSaleDate},",
						"          {@startSaleTime},",
						"          {@startSaleDate},",
						"          {@orderSrc},",
						"          {@nonProductTax},",
						"          {@totalTax},",
						"          {@nonProductAmount},",
						"          {@totalAmount},",
						"          {@saleType},",
						"          {@booth},",
						"          {@receiptNumber},",
						"          {@side},",
						"          {@minor},",
						"          {@major},",
						"          {@key},",
						"          {@kind},",
						"          {@uniqueId},",
						"          {@untilStore},",
						"          {@untilPay},",
						"          {@untilTotal},",
						"          {@itemsCount},",
						"          TAXchainid,",
						"          {@amount},",
						"          {@name},",
						"          {@baseAmount},",
						"          {@rate},",
						"          {info.name} = Info.{@name},",
						"          {info.value} = Info.{@value}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSalesCustomInfoRefund",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          businessdate = TLD.{@businessDate},",
						"          POD = TLD.Node.Event.TRX_Refund.{@POD},",
						"          Timestamp = TLD.Node.Event.TRX_Refund.Order.{@Timestamp},",
						"          {@storeId} = TLD.{@storeId},",
						"          POS = TLD.Node.{@id},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Refund.Order.{@uniqueId},",
						"          TenderId = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TenderId,",
						"          TenderKind = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TenderKind,",
						"          TenderName = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TenderName,",
						"          TenderQuantity = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TenderQuantity,",
						"          FaceValue = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.FaceValue,",
						"          TenderAmount = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TenderAmount,",
						"          BaseAction = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.BaseAction,",
						"          Persisted = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.Persisted,",
						"          CardProviderID = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.CardProviderID,",
						"          CashlessData = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.CashlessData,",
						"          CashlessTransactionID = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.CashlessTransactionID,",
						"          TaxOption = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TaxOption,",
						"          SubtotalOption = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.SubtotalOption,",
						"          DiscountDescription = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.DiscountDescription,",
						"          saleType = TLD.Node.Event.TRX_Refund.Order.{@saleType}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleTendersRefund",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@POD} = TLD.Node.Event.TRX_Refund.{@POD},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Refund.Order.{@uniqueId},",
						"          SaleEvent = TLD.Node.Event.TRX_Refund.Order.EventsDetail.SaleEvent",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          DisabledChoices = SaleEvent.Ev_SaleStart.DisabledChoices,",
						"          MultiOrder = SaleEvent.Ev_SaleStart.MultiOrder,",
						"          TenderPersisted = SaleEvent.Ev_SaleStart.TenderPersisted",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleStartRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          ProductCode = SaleEvent.Ev_SaleItem.ProductCode,",
						"          Quantity = SaleEvent.Ev_SaleItem.Quantity,",
						"          UpdatedQuantity = SaleEvent.Ev_SaleItem.UpdatedQuantity",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleItemRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          ChoiceCode = SaleEvent.Ev_SaleChoice.ChoiceCode,",
						"          ProductCode = SaleEvent.Ev_SaleChoice.ProductCode,",
						"          Quantity = SaleEvent.Ev_SaleChoice.Quantity",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleChoiceRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          ForceExhibition = SaleEvent.Ev_SetSaleType.ForceExhibition,",
						"          {set.sale.Type} = SaleEvent.Ev_SetSaleType.Type",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEvSetSaleTypeRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          SaleEventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          Ev_SaleTotal = SaleEvent.Ev_SaleTotal",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleTotalRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          TenderID = SaleEvent.Ev_AddTender.TenderID,",
						"          FaceValue = SaleEvent.Ev_AddTender.FaceValue,",
						"          TenderAmount = SaleEvent.Ev_AddTender.TenderAmount,",
						"          BaseAction = SaleEvent.Ev_AddTender.BaseAction,",
						"          Persisted = SaleEvent.Ev_AddTender.Persisted,",
						"          CardProviderID = SaleEvent.Ev_AddTender.CardProviderID,",
						"          CashlessData = SaleEvent.Ev_AddTender.CashlessData,",
						"          CashlessTransactionID = SaleEvent.Ev_AddTender.CashlessTransactionID,",
						"          PreAuthorization = SaleEvent.Ev_AddTender.PreAuthorization",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVAddTenderRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          SaleEventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          saleendType = SaleEvent.Ev_SaleEnd.Type",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleEndRefund",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {SaleEvent.time} = SaleEvent.{@Time},",
						"          {saleevent.type} = SaleEvent.{@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          {@name},",
						"          {@value},",
						"          {@status},",
						"          SALEENDType = SaleEvent.Ev_SaleEnd.Type",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleEnd",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event.TRX_Sale.Order.Item),",
						"     mapColumn(",
						"          businessDate = TLD.{@businessDate},",
						"          storeId = TLD.{@storeId},",
						"          pos = TLD.Node.{@id},",
						"          RegId = TLD.Node.Event.{@RegId},",
						"          Time = TLD.Node.Event.{@Time},",
						"          Type = TLD.Node.Event.{@Type},",
						"          itemBDPrice = TLD.Node.Event.TRX_Sale.Order.Item.{@BDPrice},",
						"          itemBDTax = TLD.Node.Event.TRX_Sale.Order.Item.{@BDTax},",
						"          itemBPPrice = TLD.Node.Event.TRX_Sale.Order.Item.{@BPPrice},",
						"          itemBPTax = TLD.Node.Event.TRX_Sale.Order.Item.{@BPTax},",
						"          itemaction = TLD.Node.Event.TRX_Sale.Order.Item.{@action},",
						"          itemcategory = TLD.Node.Event.TRX_Sale.Order.Item.{@category},",
						"          itemchgAfterTotal = TLD.Node.Event.TRX_Sale.Order.Item.{@chgAfterTotal},",
						"          itemcode = TLD.Node.Event.TRX_Sale.Order.Item.{@code},",
						"          itemdayPart = TLD.Node.Event.TRX_Sale.Order.Item.{@dayPart},",
						"          itemdepartment = TLD.Node.Event.TRX_Sale.Order.Item.{@department},",
						"          itemdepartmentClass = TLD.Node.Event.TRX_Sale.Order.Item.{@departmentClass},",
						"          itemdepartmentSubClass = TLD.Node.Event.TRX_Sale.Order.Item.{@departmentSubClass},",
						"          itemdescription = TLD.Node.Event.TRX_Sale.Order.Item.{@description},",
						"          itemdisplayOrder = TLD.Node.Event.TRX_Sale.Order.Item.{@displayOrder},",
						"          itemfamilyGroup = TLD.Node.Event.TRX_Sale.Order.Item.{@familyGroup},",
						"          itemgrillModifier = TLD.Node.Event.TRX_Sale.Order.Item.{@grillModifier},",
						"          itemgrillQty = TLD.Node.Event.TRX_Sale.Order.Item.{@grillQty},",
						"          itemid = TLD.Node.Event.TRX_Sale.Order.Item.{@id},",
						"          itemlevel = TLD.Node.Event.TRX_Sale.Order.Item.{@level},",
						"          itemqty = TLD.Node.Event.TRX_Sale.Order.Item.{@qty},",
						"          itemqtyPromo = TLD.Node.Event.TRX_Sale.Order.Item.{@qtyPromo},",
						"          itemqtyVoided = TLD.Node.Event.TRX_Sale.Order.Item.{@qtyVoided},",
						"          itemsolvedChoice = TLD.Node.Event.TRX_Sale.Order.Item.{@solvedChoice},",
						"          itemtotalPrice = TLD.Node.Event.TRX_Sale.Order.Item.{@totalPrice},",
						"          itemtotalTax = TLD.Node.Event.TRX_Sale.Order.Item.{@totalTax},",
						"          itemtype = TLD.Node.Event.TRX_Sale.Order.Item.{@type},",
						"          itemunitPrice = TLD.Node.Event.TRX_Sale.Order.Item.{@unitPrice},",
						"          itemunitTax = TLD.Node.Event.TRX_Sale.Order.Item.{@unitTax},",
						"          Itemitem = TLD.Node.Event.TRX_Sale.Order.Item.Item,",
						"          itemtaxchainid = TLD.Node.Event.TRX_Sale.Order.Item.TaxChain.{@id},",
						"          itemtaxchainamount = TLD.Node.Event.TRX_Sale.Order.Item.TaxChain.{@amount},",
						"          itemtaxchainbaseAmount = TLD.Node.Event.TRX_Sale.Order.Item.TaxChain.{@baseAmount},",
						"          itemtaxchainname = TLD.Node.Event.TRX_Sale.Order.Item.TaxChain.{@name},",
						"          itemtaxchainrate = TLD.Node.Event.TRX_Sale.Order.Item.TaxChain.{@rate},",
						"          beforeOfferPrice = TLD.Node.Event.TRX_Sale.Order.Item.Offers.{@beforeOfferPrice},",
						"          discountAmount = TLD.Node.Event.TRX_Sale.Order.Item.Offers.{@discountAmount},",
						"          discountType = TLD.Node.Event.TRX_Sale.Order.Item.Offers.{@discountType},",
						"          offerId = TLD.Node.Event.TRX_Sale.Order.Item.Offers.{@offerId},",
						"          POD = TLD.Node.Event.TRX_Sale.{@POD},",
						"          status = TLD.Node.Event.TRX_Sale.{@status},",
						"          Timestamp = TLD.Node.Event.TRX_Sale.Order.{@Timestamp},",
						"          uniqueId = TLD.Node.Event.TRX_Sale.Order.{@uniqueId}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleItem1",
						"FlattenSaleItem1 foldDown(unroll(Itemitem),",
						"     mapColumn(",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          itemBDPrice,",
						"          itemBDTax,",
						"          itemBPPrice,",
						"          itemBPTax,",
						"          itemaction,",
						"          itemcategory,",
						"          itemchgAfterTotal,",
						"          itemcode,",
						"          itemdayPart,",
						"          itemdepartment,",
						"          itemdepartmentClass,",
						"          itemdepartmentSubClass,",
						"          itemdescription,",
						"          itemdisplayOrder,",
						"          itemfamilyGroup,",
						"          itemgrillModifier,",
						"          itemgrillQty,",
						"          itemid,",
						"          itemlevel,",
						"          itemqty,",
						"          itemqtyPromo,",
						"          itemqtyVoided,",
						"          itemsolvedChoice,",
						"          itemtotalPrice,",
						"          itemtotalTax,",
						"          itemtype,",
						"          itemunitPrice,",
						"          itemunitTax,",
						"          itemitemBDPrice = Itemitem.{@BDPrice},",
						"          itemitemBDTax = Itemitem.{@BDTax},",
						"          itemitemBPPrice = Itemitem.{@BPPrice},",
						"          itemitemBPTax = Itemitem.{@BPTax},",
						"          itemitemaction = Itemitem.{@action},",
						"          itemitemcategory = Itemitem.{@category},",
						"          itemitemchgAfterTotal = Itemitem.{@chgAfterTotal},",
						"          itemitemcode = Itemitem.{@code},",
						"          itemitemdayPart = Itemitem.{@dayPart},",
						"          itemitemdepartment = Itemitem.{@department},",
						"          itemitemdepartmentClass = Itemitem.{@departmentClass},",
						"          itemitemdepartmentSubClass = Itemitem.{@departmentSubClass},",
						"          itemitemdescription = Itemitem.{@description},",
						"          itemitemdisplayOrder = Itemitem.{@displayOrder},",
						"          itemitemfamilyGroup = Itemitem.{@familyGroup},",
						"          itemitemgrillModifier = Itemitem.{@grillModifier},",
						"          itemitemgrillQty = Itemitem.{@grillQty},",
						"          itemitemid = Itemitem.{@id},",
						"          itemitemisUpcharge = Itemitem.{@isUpcharge},",
						"          itemitemlevel = Itemitem.{@level},",
						"          itemitemqty = Itemitem.{@qty},",
						"          itemitemqtyPromo = Itemitem.{@qtyPromo},",
						"          itemitemqtyVoided = Itemitem.{@qtyVoided},",
						"          itemitemsolvedChoice = Itemitem.{@solvedChoice},",
						"          itemitemtotalPrice = Itemitem.{@totalPrice},",
						"          itemitemtotalTax = Itemitem.{@totalTax},",
						"          itemitemtype = Itemitem.{@type},",
						"          itemitemunitPrice = Itemitem.{@unitPrice},",
						"          itemitemunitTax = Itemitem.{@unitTax},",
						"          tItem = Itemitem.Item,",
						"          itemitemtaxchainamount = Itemitem.TaxChain.{@amount},",
						"          itemitemtaxchainbaseAmount = Itemitem.TaxChain.{@baseAmount},",
						"          itemitemtaxchainid = Itemitem.TaxChain.{@id},",
						"          itemitemtaxchainname = Itemitem.TaxChain.{@name},",
						"          itemitemtaxchainrate = Itemitem.TaxChain.{@rate},",
						"          itemtaxchainid,",
						"          itemtaxchainamount,",
						"          itemtaxchainbaseAmount,",
						"          itemtaxchainname,",
						"          itemtaxchainrate,",
						"          beforeOfferPrice,",
						"          discountAmount,",
						"          discountType,",
						"          offerId,",
						"          status,",
						"          POD,",
						"          Timestamp,",
						"          uniqueId",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleItem2",
						"FlattenSaleItem2 foldDown(unroll(tItem),",
						"     mapColumn(",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          itemBDPrice,",
						"          itemBDTax,",
						"          itemBPPrice,",
						"          itemBPTax,",
						"          itemaction,",
						"          itemcategory,",
						"          itemchgAfterTotal,",
						"          itemcode,",
						"          itemdayPart,",
						"          itemdepartment,",
						"          itemdepartmentClass,",
						"          itemdepartmentSubClass,",
						"          itemdescription,",
						"          itemdisplayOrder,",
						"          itemfamilyGroup,",
						"          itemgrillModifier,",
						"          itemgrillQty,",
						"          itemid,",
						"          itemlevel,",
						"          itemqty,",
						"          itemqtyPromo,",
						"          itemqtyVoided,",
						"          itemsolvedChoice,",
						"          itemtotalPrice,",
						"          itemtotalTax,",
						"          itemtype,",
						"          itemunitPrice,",
						"          itemunitTax,",
						"          itemitemBDPrice,",
						"          itemitemBDTax,",
						"          itemitemBPPrice,",
						"          itemitemBPTax,",
						"          itemitemaction,",
						"          itemitemcategory,",
						"          itemitemchgAfterTotal,",
						"          itemitemcode,",
						"          itemitemdayPart,",
						"          itemitemdepartment,",
						"          itemitemdepartmentClass,",
						"          itemitemdepartmentSubClass,",
						"          itemitemdescription,",
						"          itemitemdisplayOrder,",
						"          itemitemfamilyGroup,",
						"          itemitemgrillModifier,",
						"          itemitemgrillQty,",
						"          itemitemid,",
						"          itemitemisUpcharge,",
						"          itemitemlevel,",
						"          itemitemqty,",
						"          itemitemqtyPromo,",
						"          itemitemsolvedChoice,",
						"          itemitemtotalPrice,",
						"          itemitemtotalTax,",
						"          itemitemtype,",
						"          itemitemunitPrice,",
						"          itemitemunitTax,",
						"          titemBDPrice = tItem.{@BDPrice},",
						"          titemBDTax = tItem.{@BDTax},",
						"          titemBPPrice = tItem.{@BPPrice},",
						"          titemBPTax = tItem.{@BPTax},",
						"          titemaction = tItem.{@action},",
						"          titemcategory = tItem.{@category},",
						"          titemchgAfterTotal = tItem.{@chgAfterTotal},",
						"          titemcode = tItem.{@code},",
						"          titemdayPart = tItem.{@dayPart},",
						"          titemdepartment = tItem.{@department},",
						"          titemdepartmentClass = tItem.{@departmentClass},",
						"          titemdepartmentSubClass = tItem.{@departmentSubClass},",
						"          titemdescription = tItem.{@description},",
						"          titemdisplayOrder = tItem.{@displayOrder},",
						"          titemfamilyGroup = tItem.{@familyGroup},",
						"          titemgrillModifier = tItem.{@grillModifier},",
						"          titemgrillQty = tItem.{@grillQty},",
						"          titemid = tItem.{@id},",
						"          titemisUpcharge = tItem.{@isUpcharge},",
						"          titemlevel = tItem.{@level},",
						"          titemqty = tItem.{@qty},",
						"          titemqtyPromo = tItem.{@qtyPromo},",
						"          titemqtyVoided = tItem.{@qtyVoided},",
						"          titemsolvedChoice = tItem.{@solvedChoice},",
						"          titemtotalPrice = tItem.{@totalPrice},",
						"          titemtotalTax = tItem.{@totalTax},",
						"          titemtype = tItem.{@type},",
						"          titemunitPrice = tItem.{@unitPrice},",
						"          titemunitTax = tItem.{@unitTax},",
						"          titemtaxchainamount = tItem.TaxChain.{@amount},",
						"          titemtaxchainbaseAmount = tItem.TaxChain.{@baseAmount},",
						"          titemtaxchainid = tItem.TaxChain.{@id},",
						"          titemtaxchainname = tItem.TaxChain.{@name},",
						"          titemtaxchainrate = tItem.TaxChain.{@rate},",
						"          itemitemtaxchainamount,",
						"          itemitemtaxchainbaseAmount,",
						"          itemitemtaxchainid,",
						"          itemitemtaxchainname,",
						"          itemitemtaxchainrate,",
						"          itemtaxchainid,",
						"          itemtaxchainamount,",
						"          temtaxchainbaseAmount = itemtaxchainbaseAmount,",
						"          itemtaxchainname,",
						"          itemtaxchainrate,",
						"          beforeOfferPrice,",
						"          discountAmount,",
						"          discountType,",
						"          offerId,",
						"          uniqueId,",
						"          status,",
						"          POD,",
						"          Timestamp",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleItem3",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event.TRX_Refund.Order.Item, TLD.Node.Event.TRX_Refund.Order.Item),",
						"     mapColumn(",
						"          itemBDPrice = TLD.Node.Event.TRX_Refund.Order.Item.{@BDPrice},",
						"          storeId = TLD.{@storeId},",
						"          businessDate = TLD.{@businessDate},",
						"          pos = TLD.Node.{@id},",
						"          POD = TLD.Node.Event.TRX_Refund.{@POD},",
						"          RegId = TLD.Node.Event.{@RegId},",
						"          Time = TLD.Node.Event.{@Time},",
						"          Type = TLD.Node.Event.{@Type},",
						"          uniqueId = TLD.Node.Event.TRX_Refund.Order.{@uniqueId},",
						"          itemBDTax = TLD.Node.Event.TRX_Refund.Order.Item.{@BDTax},",
						"          itemBPPrice = TLD.Node.Event.TRX_Refund.Order.Item.{@BPPrice},",
						"          itemBPTax = TLD.Node.Event.TRX_Refund.Order.Item.{@BPTax},",
						"          itemaction = TLD.Node.Event.TRX_Refund.Order.Item.{@action},",
						"          itemcategory = TLD.Node.Event.TRX_Refund.Order.Item.{@category},",
						"          itemchgAfterTotal = TLD.Node.Event.TRX_Refund.Order.Item.{@chgAfterTotal},",
						"          itemcode = TLD.Node.Event.TRX_Refund.Order.Item.{@code},",
						"          itemdayPart = TLD.Node.Event.TRX_Refund.Order.Item.{@dayPart},",
						"          itemdepartment = TLD.Node.Event.TRX_Refund.Order.Item.{@department},",
						"          itemdepartmentClass = TLD.Node.Event.TRX_Refund.Order.Item.{@departmentClass},",
						"          itemdepartmentSubClass = TLD.Node.Event.TRX_Refund.Order.Item.{@departmentSubClass},",
						"          itemdescription = TLD.Node.Event.TRX_Refund.Order.Item.{@description},",
						"          itemdisplayOrder = TLD.Node.Event.TRX_Refund.Order.Item.{@displayOrder},",
						"          itemfamilyGroup = TLD.Node.Event.TRX_Refund.Order.Item.{@familyGroup},",
						"          itemgrillModifier = TLD.Node.Event.TRX_Refund.Order.Item.{@grillModifier},",
						"          itemgrillQty = TLD.Node.Event.TRX_Refund.Order.Item.{@grillQty},",
						"          itemid = TLD.Node.Event.TRX_Refund.Order.Item.{@id},",
						"          itemlevel = TLD.Node.Event.TRX_Refund.Order.Item.{@level},",
						"          itemqty = TLD.Node.Event.TRX_Refund.Order.Item.{@qty},",
						"          itemqtyPromo = TLD.Node.Event.TRX_Refund.Order.Item.{@qtyPromo},",
						"          itemsolvedChoice = TLD.Node.Event.TRX_Refund.Order.Item.{@solvedChoice},",
						"          itemtotalPrice = TLD.Node.Event.TRX_Refund.Order.Item.{@totalPrice},",
						"          itemtotalTax = TLD.Node.Event.TRX_Refund.Order.Item.{@totalTax},",
						"          itemtype = TLD.Node.Event.TRX_Refund.Order.Item.{@type},",
						"          itemunitPrice = TLD.Node.Event.TRX_Refund.Order.Item.{@unitPrice},",
						"          itemunitTax = TLD.Node.Event.TRX_Refund.Order.Item.{@unitTax},",
						"          Itemitem = TLD.Node.Event.TRX_Refund.Order.Item.Item,",
						"          taxchainid = TLD.Node.Event.TRX_Refund.Order.Item.TaxChain.{@id},",
						"          taxchainamount = TLD.Node.Event.TRX_Refund.Order.Item.TaxChain.{@amount},",
						"          taxchainname = TLD.Node.Event.TRX_Refund.Order.Item.TaxChain.{@name},",
						"          taxchainbaseAmount = TLD.Node.Event.TRX_Refund.Order.Item.TaxChain.{@baseAmount},",
						"          taxchainrate = TLD.Node.Event.TRX_Refund.Order.Item.TaxChain.{@rate},",
						"          itemqtyVoided = TLD.Node.Event.TRX_Refund.Order.Item.{@qtyVoided}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 foldDown(unroll(Itemitem),",
						"     mapColumn(",
						"          itemBDPrice = Itemitem.{@BDPrice},",
						"          itemBDTax = Itemitem.{@BDTax},",
						"          itemBPPrice = Itemitem.{@BPPrice},",
						"          itemBPTax = Itemitem.{@BPTax},",
						"          itemaction = Itemitem.{@action},",
						"          itemcategory = Itemitem.{@category},",
						"          itemchgAfterTotal = Itemitem.{@chgAfterTotal},",
						"          itemcode = Itemitem.{@code},",
						"          itemdayPart = Itemitem.{@dayPart},",
						"          itemdepartment = Itemitem.{@department},",
						"          itemdepartmentClass = Itemitem.{@departmentClass},",
						"          itemdepartmentSubClass = Itemitem.{@departmentSubClass},",
						"          itemdescription = Itemitem.{@description},",
						"          itemdisplayOrder = Itemitem.{@displayOrder},",
						"          itemfamilyGroup = Itemitem.{@familyGroup},",
						"          itemgrillModifier = Itemitem.{@grillModifier},",
						"          itemgrillQty = Itemitem.{@grillQty},",
						"          itemid = Itemitem.{@id},",
						"          itemisUpcharge = Itemitem.{@isUpcharge},",
						"          itemlevel = Itemitem.{@level},",
						"          itemqty = Itemitem.{@qty},",
						"          itemqtyPromo = Itemitem.{@qtyPromo},",
						"          itemsolvedChoice = Itemitem.{@solvedChoice},",
						"          itemtotalPrice = Itemitem.{@totalPrice},",
						"          itemtotalTax = Itemitem.{@totalTax},",
						"          itemtype = Itemitem.{@type},",
						"          itemunitPrice = Itemitem.{@unitPrice},",
						"          itemunitTax = Itemitem.{@unitTax},",
						"          tItem = Itemitem.Item,",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          POD,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          uniqueId,",
						"          itemtaxchainid = Itemitem.TaxChain.{@id},",
						"          itemtaxchainamount = Itemitem.TaxChain.{@amount},",
						"          itemtaxchainname = Itemitem.TaxChain.{@name},",
						"          itemtaxchainbaseAmount = Itemitem.TaxChain.{@baseAmount},",
						"          itemtaxchainrate = Itemitem.TaxChain.{@rate},",
						"          itemqtyVoidedd = Itemitem.{@qtyVoided}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten2 foldDown(unroll(tItem),",
						"     mapColumn(",
						"          itemBDPrice = tItem.{@BDPrice},",
						"          itemBDTax = tItem.{@BDTax},",
						"          itemBPPrice = tItem.{@BPPrice},",
						"          itemBPTax = tItem.{@BPTax},",
						"          itemaction = tItem.{@action},",
						"          itemcategory = tItem.{@category},",
						"          itemchgAfterTotal = tItem.{@chgAfterTotal},",
						"          itemcode = tItem.{@code},",
						"          itemdayPart = tItem.{@dayPart},",
						"          itemdepartment = tItem.{@department},",
						"          itemdepartmentClass = tItem.{@departmentClass},",
						"          itemdepartmentSubClass = tItem.{@departmentSubClass},",
						"          itemdescription = tItem.{@description},",
						"          itemdisplayOrder = tItem.{@displayOrder},",
						"          itemfamilyGroup = tItem.{@familyGroup},",
						"          itemgrillModifier = tItem.{@grillModifier},",
						"          itemgrillQty = tItem.{@grillQty},",
						"          itemid = tItem.{@id},",
						"          itemlevel = tItem.{@level},",
						"          itemqty = tItem.{@qty},",
						"          itemqtyPromo = tItem.{@qtyPromo},",
						"          itemsolvedChoice = tItem.{@solvedChoice},",
						"          itemtotalPrice = tItem.{@totalPrice},",
						"          itemtotalTax = tItem.{@totalTax},",
						"          itemtype = tItem.{@type},",
						"          itemunitPrice = tItem.{@unitPrice},",
						"          itemunitTax = tItem.{@unitTax},",
						"          itemtaxchainid = tItem.TaxChain.{@id},",
						"          itemtaxchainamount = tItem.TaxChain.{@amount},",
						"          itemtaxchainname = tItem.TaxChain.{@name},",
						"          itemtaxchainbaseAmount = tItem.TaxChain.{@baseAmount},",
						"          itemtaxchainrate = tItem.TaxChain.{@rate},",
						"          storeId,",
						"          businessDate,",
						"          pos,",
						"          POD,",
						"          uniqueId,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          qtyVoidedd = tItem.{@qtyVoided}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"FlattenSaleItem1 filter(equals(Type, 'TRX_Sale')) ~> filter1",
						"FlattenSaleItem3 filter(equals(Type, 'TRX_Sale')) ~> filter2",
						"FlattenSaleItem2 filter(equals(Type, 'TRX_Sale')) ~> filter3",
						"flatten1 filter(equals(Type, 'TRX_Refund')) ~> filter4",
						"flatten3 filter(equals(Type, 'TRX_Refund')) ~> filter5",
						"flatten2 filter(equals(Type, 'TRX_Refund')) ~> filter6",
						"FlattenEVSaleEndRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter7",
						"FlattenEVAddTenderRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter8",
						"FlattenEVSaleTotalRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter9",
						"FlattenEvSetSaleTypeRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter10",
						"FlattenEVSaleChoiceRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter11",
						"FlattenEVSaleItemRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter12",
						"FlattenEVSaleStartRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter13",
						"FlattenSaleTendersRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter14",
						"FlattenSalesCustomInfoRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter15",
						"FlattenRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter16",
						"FlattenRecTRXSaleOrder filter(equals({@Type}, 'TRX_Sale')) ~> filter17",
						"FlattenEVSaleEnd filter(equals({@Type}, 'TRX_Sale')) ~> filter18",
						"FlattenEVSaleItem filter(equals({@Type}, 'TRX_Sale')) ~> filter19",
						"FlattenEVAddTender filter(equals({@Type}, 'TRX_Sale')) ~> filter20",
						"FlattenEVSaleTotal filter(equals({@Type}, 'TRX_Sale')) ~> filter21",
						"FlattenEVSetsaleType filter(equals({@Type}, 'TRX_Sale')) ~> filter22",
						"FlattenEVChangeSizeSelection filter(equals({@Type}, 'TRX_Sale')) ~> filter23",
						"FlattenEVSaleChoice2 filter(equals(type, 'TRX_Sale')) ~> filter24",
						"FlattenEVSaleStart2 filter(equals(type, 'TRX_Sale')) ~> filter25",
						"FlattenSalesCustomInfoDetail1 filter(equals({@Type}, 'TRX_Sale')) ~> filter26",
						"FlattenSalesCustomInfoDetail2 filter(equals({@Type}, 'TRX_Sale')) ~> filter27",
						"FlattenSalesCustomInfoDetail1 filter(equals({@Type}, 'TRX_Sale')) ~> filter28",
						"XMLSourceFile sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTLDProductionStatus.businessdate} = TLD.{@businessDate},",
						"          {RecTLDProductionStatus.checkPoint} = TLD.{@checkPoint},",
						"          {RecTLDProductionStatus.Isend} = TLD.{@end},",
						"          {RecTLDProductionStatus.logVersion} = TLD.{@productionStatus},",
						"          {RecTLDProductionStatus.storeId} = TLD.{@storeId},",
						"          {RecTLDProductionStatus.swVersion} = TLD.{@swVersion},",
						"          status = TLD.{@productionStatus}",
						"     )) ~> RecTLDProductionStatus",
						"FlattenRecNode sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecNode.businessDate} = {@businessDate},",
						"          {RecNode.storeId} = {@storeId},",
						"          {RecNode.id} = {@id},",
						"          {RecNode.nodestatus} = {@nodeStatus}",
						"     )) ~> RecNode",
						"FlattenRecEventNode sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecEvent.id} = RecEventid,",
						"          {RecEvent.businessDate} = {@businessDate},",
						"          {RecEvent.storeId} = {@storeId},",
						"          {RecEvent.Event_Time} = {@Time},",
						"          {RecEvent.Type} = {@Type},",
						"          {RecEvent.RegId} = {@RegId}",
						"     )) ~> RecEvent",
						"FlattenRecTRXInitGlobal sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTRX_InitGTotal.id} = id,",
						"          {RecTRX_InitGTotal.businessDate} = {@businessDate},",
						"          {RecTRX_InitGTotal.storeId} = {@storeId},",
						"          {RecTRX_InitGTotal.Event_Time} = {@Time},",
						"          {RecTRX_InitGTotal.Type} = {@Type},",
						"          {RecTRX_InitGTotal.RegId} = {@RegId},",
						"          {RecTRX_InitGTotal.amount} = {@amount}",
						"     )) ~> RecTRXInitGTotal",
						"FlattenTRXSMSState sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTRX_SetSMState.id} = id,",
						"          {RecTRX_SetSMState.businessDate} = {@businessDate},",
						"          {RecTRX_SetSMState.storeId} = {@storeId},",
						"          {RecTRX_SetSMState.Event_Time} = {@Time},",
						"          {RecTRX_SetSMState.Type} = {@Type},",
						"          {RecTRX_SetSMState.RegId} = {@RegId},",
						"          {RecTRX_SetSMState.PODId} = {@PODId},",
						"          {RecTRX_SetSMState.POSState} = POSState,",
						"          {RecTRX_SetSMState.CrewId} = CrewId,",
						"          {RecTRX_SetSMState.CrewName} = CrewName,",
						"          {RecTRX_SetSMState.CrewSecurityLevel} = CrewSecurityLevel,",
						"          {RecTRX_SetSMState.LoginTime} = LoginTime,",
						"          {RecTRX_SetSMState.LogoutTime} = LogoutTime,",
						"          {RecTRX_SetSMState.InitialFloat} = InitialFloat",
						"     )) ~> RecTRXSetSMState",
						"FlattenTRXBaseConfig sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {Rec_TRX_BaseConfig.POS} = POS,",
						"          {Rec_TRX_BaseConfig.businessDate} = {@businessDate},",
						"          {Rec_TRX_BaseConfig.Event_Time} = {@Time},",
						"          {Rec_TRX_BaseConfig.RegId} = {@RegId},",
						"          {Rec_TRX_BaseConfig.Type} = {@Type},",
						"          {Rec_TRX_BaseConfig.POD} = {@POD},",
						"          {Rec_TRX_BaseConfig.MenuPriceBasis} = MenuPriceBasis,",
						"          {Rec_TRX_BaseConfig.WeekEndBreakfastStartTime} = WeekEndBreakfastStartTime,",
						"          {Rec_TRX_BaseConfig.WeekEndBreakfastStopTime} = WeekEndBreakfastStopTime,",
						"          {Rec_TRX_BaseConfig.WeekDayBreakfastStartTime} = WeekDayBreakfastStartTime,",
						"          {Rec_TRX_BaseConfig.WeekDayBreakfastStopTime} = WeekDayBreakfastStopTime,",
						"          {Rec_TRX_BaseConfig.DecimalPlaces} = DecimalPlaces,",
						"          {Rec_TRX_BaseConfig.CheckRefund} = CheckRefund,",
						"          {Rec_TRX_BaseConfig.GrandTotalFlag} = GrandTotalFlag,",
						"          {Rec_TRX_BaseConfig.StoreId} = StoreId,",
						"          {Rec_TRX_BaseConfig.StoreName} = StoreName,",
						"          {Rec_TRX_BaseConfig.AcceptNegativeQty} = AcceptNegativeQty,",
						"          {Rec_TRX_BaseConfig.AcceptZeroPricePMix} = AcceptZeroPricePMix,",
						"          {Rec_TRX_BaseConfig.FloatPriceTenderId} = FloatPriceTenderId",
						"     )) ~> RecTRXBaseConfig",
						"FlattenTRXBaseConfigposconfig sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTRXBaseConfigposconfig.POS} = POS,",
						"          {RecTRXBaseConfigposconfig.businessDate} = {@businessDate},",
						"          {RecTRXBaseConfigposconfig.storeId} = {@storeId},",
						"          {RecTRXBaseConfigposconfig.Time} = {@Time},",
						"          {RecTRXBaseConfigposconfig.RegId} = {@RegId},",
						"          {RecTRXBaseConfigposconfig.Type} = {@Type},",
						"          {RecTRXBaseConfigposconfig.POD} = {@POD},",
						"          {RecTRXBaseConfigposconfig.CountTCsFullDiscEM} = CountTCsFullDiscEM,",
						"          {RecTRXBaseConfigposconfig.RefundBehaviour} = RefundBehaviour,",
						"          {RecTRXBaseConfigposconfig.OverringBehaviour} = OverringBehaviour",
						"     )) ~> RecTRXBaseConfigposconfig",
						"FlattenRecTRXDayParts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          DaypartsPOS = POS,",
						"          DaypartsbusinessDate = {@businessDate},",
						"          DaypartsstoreId = {@storeId},",
						"          Event_Time = {@Time},",
						"          Regid = {@id},",
						"          EventType = {@Type},",
						"          name = {@name},",
						"          Mondayend,",
						"          Mondaystart,",
						"          Tuesdayend,",
						"          Tuesdaystart,",
						"          Wednesdayend,",
						"          Wednesdaystart,",
						"          Thursdayend,",
						"          Thursdaystart,",
						"          fridayend,",
						"          fridaystart,",
						"          saturdayend,",
						"          saturdaystart,",
						"          sundayend,",
						"          sundaystart,",
						"          pod = POD",
						"     )) ~> RecTRXDayParts",
						"FlattenRecTrxTendertableTenderflag4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          Rec_tendertable_tenderflagTenderFlag = TenderFlag,",
						"          POS,",
						"          {RecTRX_tendertable_tenderflag.businessDate} = {@businessDate},",
						"          {RecTRX_tendertable_tenderflag.storeId} = {@storeId},",
						"          {RecTRX_tendertable_tenderflag.Time} = {@Time},",
						"          {RecTRX_tendertable_tenderflag.RegId} = {@RegId},",
						"          EventType,",
						"          TenderId,",
						"          TenderName,",
						"          TenderCategory",
						"     )) ~> RecTrxTendertableTenderflag",
						"FlattenRecTRXTaxTabletype sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTRXTaxTable.POS} = POS,",
						"          {RecTRXTaxTable.businessDate} = {@businessDate},",
						"          RecTRXTaxTablestoreId = {@storeId},",
						"          RecTRXTaxTableTime = {@Time},",
						"          RecTRXTaxTableRegId = {@RegId},",
						"          RecTRXTaxTableType = {@Type},",
						"          POD = {sale.pod},",
						"          {RecTRXTaxTable.TaxId} = TaxId,",
						"          TaxDescription,",
						"          TaxRate,",
						"          TaxBasis,",
						"          TaxCalcType,",
						"          {RecTRXTaxTable.Rounding} = {@Rounding},",
						"          Precision",
						"     )) ~> RecTRXTaxTabletype",
						"FlattenRecTRXDayOpen sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          RecTRX_DayOpenPOS = POS,",
						"          {main.businessDate} = {@businessDate},",
						"          {RecTRX_DayOpen.storeId} = {@storeId},",
						"          RecTRX_DayOpenEventTime = {@Time},",
						"          RecTRX_DayOpenRegId = {@RegId},",
						"          {RecTRX_DayOpen.Type} = {@Type},",
						"          {RecTRX_DayOpen.Businessdatesub} = {TRX_DayOpen.Businessdate}",
						"     )) ~> RecTRXDayOpen",
						"FlattenTRXGetAuthorization sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          businessDate = {@businessDate},",
						"          {TRXGetAuthorization.storeId} = {@storeId},",
						"          {TRXGetAuthorization.EventTime} = {@Time},",
						"          {TRXGetAuthorization.RegId} = {@RegId},",
						"          {TRXGetAuthorization.Type} = {@Type},",
						"          ManagerID,",
						"          ManagerName,",
						"          SecurityLevel,",
						"          Password,",
						"          IsLogged,",
						"          ExpirationDate",
						"     )) ~> TRXGetAuthorization",
						"FlattenTRXOperLogin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {TRXOperLogin.POS} = POS,",
						"          businessdate = {@businessDate},",
						"          {TRXOperLogin.storeId} = {@storeId},",
						"          {TRXOperLogin.eventTime} = {@Time},",
						"          TRXOperLoginRegId = {@RegId},",
						"          {TRXOperLogin.eventType} = {@Type},",
						"          CrewID,",
						"          CrewName,",
						"          CrewSecurityLevel,",
						"          POD,",
						"          RemotePOD,",
						"          AutoLogin",
						"     )) ~> TRXOperLogin",
						"FlattenRecEvDrawerClose sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          RecEvDrawerclosePOS = POS,",
						"          businessdate,",
						"          {RecEvDrawerclose.storeId} = {@storeId},",
						"          {RecEvDrawerclose.eventTime} = {@Time},",
						"          RecEvDrawercloseRegId = {@RegId},",
						"          RecEvDrawercloseEventType = {@Type},",
						"          UnauthorizedOpen = {@UnauthorizedOpen},",
						"          TotalOpenTime = {@TotalOpenTime}",
						"     )) ~> RecEvDrawerclosee",
						"FlattenRecRXRegTransfers sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecRXRegTransfers.Businessdate} = Businessdate,",
						"          {RecRXRegTransfers.storeId} = {@storeId},",
						"          {RecRXRegTransfers.RegId} = {@RegId},",
						"          {RecRXRegTransfers.eventTime} = {@Time},",
						"          {RecRXRegTransfers.eventType} = {@Type},",
						"          {RecRXRegTransfers.Amount} = {@Amount},",
						"          {RecRXRegTransfers.FaceValue} = {@FaceValue},",
						"          {RecRXRegTransfers.OperType} = {@OperType},",
						"          {RecRXRegTransfers.TenderID} = {@TenderID},",
						"          {RecRXRegTransfers.TenderName} = {@TenderName},",
						"          {RecRXRegTransfers.TransferType} = {@TransferType}",
						"     )) ~> RecRXRegTransfers",
						"filter26 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          RECTRXsalebusinessDate = {@businessDate},",
						"          RECTRXsalestoreId = {@storeId},",
						"          RECTRXsaleEventTime = {@Time},",
						"          RECTRXsaleRegId = {@RegId},",
						"          RECTRXsaleEventType = {@Type},",
						"          RECTRXsalePOD = {@POD},",
						"          RECTRXsalestatus = {@status},",
						"          EndsaleTime,",
						"          RECTRXsaleendSaleDate = {@endSaleDate},",
						"          RECTRXsalestartSaleTime = {@startSaleTime},",
						"          RECTRXsalestartSaleDate = {@startSaleDate},",
						"          RECTRXsaleorderSrc = {@orderSrc},",
						"          nonProductTax = {@nonProductTax},",
						"          totalTax = {@totalTax},",
						"          nonProductAmount = {@nonProductAmount},",
						"          totalAmount = {@totalAmount},",
						"          saleType = {@saleType},",
						"          booth = {@booth},",
						"          receiptNumber = {@receiptNumber},",
						"          side = {@side},",
						"          minor = {@minor},",
						"          major = {@major},",
						"          key = {@key},",
						"          kind = {@kind},",
						"          uniqueId = {@uniqueId},",
						"          Timestamp = {@Timestamp},",
						"          foreignOrderId = {@foreignOrderId},",
						"          untilStore = {@untilStore},",
						"          untilTotal = {@untilTotal},",
						"          untilPay = {@untilPay},",
						"          itemsCount = {@itemsCount},",
						"          TaxChainId,",
						"          amount = {@amount},",
						"          name = {@name},",
						"          baseAmount = {@baseAmount},",
						"          rate = {@rate}",
						"     )) ~> RECTRXsale",
						"filter27 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          SalesCustomInfoDetailbusinessDate = {@businessDate},",
						"          SalesCustomInfoDetailstoreId = {@storeId},",
						"          SalesCustomInfoDetailEventTime = {@Time},",
						"          SalesCustomInfoDetailRegId = {@RegId},",
						"          {SalesCustomInfoDetail.Type} = {@Type},",
						"          {SalesCustomInfoDetail.totalAmount} = {@totalAmount},",
						"          {SalesCustomInfoDetail.receiptNumber} = {@receiptNumber},",
						"          {SalesCustomInfoDetail.minor} = {@minor},",
						"          major = {@major},",
						"          key = {@key},",
						"          kind = {@kind},",
						"          uniqueId = {@uniqueId},",
						"          Timestamp = {@Timestamp},",
						"          foreignOrderId = {@foreignOrderId},",
						"          customInfoname,",
						"          custominfovalue,",
						"          status = {@status}",
						"     )) ~> SalesCustomInfoDetail",
						"FlattenTRXOrderPromotions sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          BusinessDate,",
						"          {TRXOrderPromotions.storeId} = {@storeId},",
						"          {TRXOrderPromotions.PromotionTime} = {@Time},",
						"          RegId = {@RegId},",
						"          TRXOrderPromotionsType = {@Type},",
						"          uniqueId = {@uniqueId},",
						"          promotionId = {@promotionId},",
						"          promotionName = {@promotionName},",
						"          promotionCounter = {@promotionCounter},",
						"          discountType = {@discountType},",
						"          discountAmount = {@discountAmount},",
						"          offerId = {@offerId},",
						"          exclusive = {@exclusive},",
						"          promotionOnTender = {@promotionOnTender},",
						"          countTowardsPromotionLimit = {@countTowardsPromotionLimit},",
						"          returnedValue = {@returnedValue},",
						"          status = {@status}",
						"     )) ~> TRXOrderPromotions",
						"FlattenTRXOrderCustOffers sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          TRXOrderCustOffersBusinessdate = Businessdate,",
						"          Storeid,",
						"          {TRXOrderCustOffers.offerTime} = {@Time},",
						"          RegId = {@RegId},",
						"          TRXOrderCustOffersType = {@Type},",
						"          uniqueId = {@uniqueId},",
						"          offerId = {@offerId},",
						"          customerId = {@customerId},",
						"          offerName = {@offerName},",
						"          override = {@override},",
						"          applied = {@applied},",
						"          promotionId = {@promotionId},",
						"          offerBarcodeType = {@offerBarcodeType},",
						"          status = {@status}",
						"     )) ~> TRXOrderCustOffers",
						"filter28 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTRXReduction.POS} = POS,",
						"          {RecTRXReduction.businessDate} = {@businessDate},",
						"          RecTRXReductionstoreId = {@storeId},",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          EndsaleTime,",
						"          endSaleDate = {@endSaleDate},",
						"          startSaleTime = {@startSaleTime},",
						"          startSaleDate = {@startSaleDate},",
						"          nonProductAmount = {@nonProductAmount},",
						"          totalAmount = {@totalAmount},",
						"          saleType = {@saleType},",
						"          receiptNumber = {@receiptNumber},",
						"          side = {@side},",
						"          minor = {@minor},",
						"          major = {@major},",
						"          key = {@key},",
						"          kind = {@kind},",
						"          uniqueId = {@uniqueId},",
						"          foreignOrderId = {@foreignOrderId},",
						"          AfterTotal,",
						"          Amount,",
						"          AmountAfterTotal,",
						"          AmountBeforeTotal,",
						"          BeforeTotal,",
						"          Qty,",
						"          status = {@status},",
						"          itemcount = {@itemsCount}",
						"     )) ~> RecTRXReduction",
						"filter25 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          EvsalestartPOS = POS,",
						"          EvsalestartbusinessDate = {@businessDate},",
						"          EvsalestartstoreId = {@storeId},",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          type,",
						"          SaleEventtype,",
						"          saleeventtime,",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          DisabledChoices,",
						"          TenderPersisted,",
						"          MultiOrder,",
						"          status = {@status}",
						"     )) ~> EVSaleStart",
						"filter24 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {Evsalechoice.businessdate} = businessdate,",
						"          {Evsalechoice.storeid} = storeid,",
						"          POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          type,",
						"          SaleEventtime,",
						"          saleeventtype,",
						"          uniqueId = {@uniqueId},",
						"          POD = {@POD},",
						"          ChoiceCode,",
						"          ProductCode,",
						"          Quantity,",
						"          status = {@status}",
						"     )) ~> EVSaleChoice",
						"filter23 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {Evchangesizeselection.businessdate} = businessdate,",
						"          {Evchangesizeselection.storeid} = storeid,",
						"          POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          SizeSelected,",
						"          ProductCode,",
						"          Quantity,",
						"          status",
						"     )) ~> EVChangeSizeSelection",
						"filter22 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {Evsetsaletype.businessdate} = businessdate,",
						"          Evsetsaletypestoreid = storeid,",
						"          POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          setsaletype = {setsaletype.type},",
						"          ForceExhibition,",
						"          status",
						"     )) ~> EVSetsaleType",
						"filter21 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {EvSaleTotal.businessdate} = businessdate,",
						"          {EvSaleTotal.storeid} = storeid,",
						"          POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          Ev_SaleTotal,",
						"          status",
						"     )) ~> EVSaleTotal",
						"filter20 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          saleventtime,",
						"          saleventType,",
						"          TenderID,",
						"          FaceValue,",
						"          TenderAmount,",
						"          BaseAction,",
						"          Persisted,",
						"          CardProviderID,",
						"          CashlessData,",
						"          CashlessTransactionID,",
						"          PreAuthorization,",
						"          name,",
						"          value,",
						"          status",
						"     )) ~> EVAddTender",
						"FlattenRecTRXTenderTableType2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTrxtendertable.POS} = POS,",
						"          {RecTrxtendertable.businessDate} = businessDate,",
						"          {RecTrxtendertable.storeId} = storeId,",
						"          EventTime,",
						"          RegId,",
						"          Type,",
						"          tenderid = {TenderType.tenderid},",
						"          TenderFiscalIndex,",
						"          TenderName,",
						"          TenderCategory,",
						"          TaxOption,",
						"          DefaultSkimLimit,",
						"          DefaultHaloLimit,",
						"          SubtotalOption,",
						"          CurrencyDecimals,",
						"          tenderchangetype = {tenderchange.type},",
						"          tenderchangeid = {tenderchange.id},",
						"          maxAllowed,",
						"          roundToMinAmount,",
						"          {Creditsales.legacyid} = {creditsales.legacyid},",
						"          {foreigncurrency.legacyid},",
						"          Rounding,",
						"          Precision,",
						"          Orientation,",
						"          ExchangeRate,",
						"          {electronicpayment.legacyid},",
						"          {Giftcupon.legacyid},",
						"          Amount,",
						"          OperatorDefined",
						"     )) ~> RecTRXTenderTableType",
						"FlattenCustomInfo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {custominfo.businessdate} = businessdate,",
						"          {custominfo.storeid} = storeid,",
						"          {custominfo.POS} = POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          value = {info.value},",
						"          name = {info.name},",
						"          status = {@status}",
						"     )) ~> CustomInfo",
						"FlattenRecEVCustom sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RECEVcustominfo.POS} = POS,",
						"          {RECEVcustominfo..businessDate} = businessDate,",
						"          {RECEVcustominfo.storeId} = storeId,",
						"          Time,",
						"          RegId,",
						"          Type,",
						"          code = {Info.code},",
						"          data = {Info.data}",
						"     )) ~> RecEVCustom",
						"filter17 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          RecTRXSaleorderPOS = POS,",
						"          Timestamp = {@Timestamp},",
						"          RecTRXSaleorderbusinessDate = {@businessDate},",
						"          RecTRXSalestoreId = {@storeId},",
						"          RecTRXSaleEventTime = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = MainPOD,",
						"          status = {@status},",
						"          endSaleTime = {@endSaleTime},",
						"          endSaleDate = {@endSaleDate},",
						"          startSaleTime = {@startSaleTime},",
						"          startSaleDate = {@startSaleDate},",
						"          orderSrc = {@orderSrc},",
						"          nonProductTax = {@nonProductTax},",
						"          totalTax = {@totalTax},",
						"          nonProductAmount = {@nonProductAmount},",
						"          totalAmount = {@totalAmount},",
						"          saleType = {@saleType},",
						"          booth = {@booth},",
						"          receiptNumber = {@receiptNumber},",
						"          side = {@side},",
						"          minor = {@minor},",
						"          major = {@major},",
						"          key = {@key},",
						"          kind = {@kind},",
						"          uniqueId = {@uniqueId},",
						"          foreignOrderId = {@foreignOrderId},",
						"          untilStore = {@untilStore},",
						"          untilTotal = {@untilTotal},",
						"          untilPay = {@untilPay},",
						"          itemsCount = {@itemsCount},",
						"          taxchainid,",
						"          taxchainamount,",
						"          taxchainname,",
						"          baseAmount = {@baseAmount},",
						"          rate = {@rate}",
						"     )) ~> RecTRXSaleOrder",
						"filter19 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {evsaleitem.businessdate} = businessdate,",
						"          {evsaleitem.storeid} = storeid,",
						"          evsaleitemPOS = POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          saletime,",
						"          saletype,",
						"          ProductCode,",
						"          Quantity,",
						"          UpdatedQuantity,",
						"          status",
						"     )) ~> EVSaleItem",
						"FlattenSaleTenderMain2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          saletenderPOS = POS,",
						"          timestamp,",
						"          saletenderbusinessDate = businessDate,",
						"          saletenderstoreId = storeId,",
						"          saletenderTime = Time,",
						"          RegId,",
						"          type = {Event.type},",
						"          POD,",
						"          saleType,",
						"          status,",
						"          uniqueId,",
						"          baseaction,",
						"          Persisted,",
						"          CardProviderID,",
						"          CashlessData,",
						"          TaxOption,",
						"          SubtotalOption,",
						"          DiscountDescription,",
						"          CashlessTransactionID,",
						"          sourceValue,",
						"          sourceCode,",
						"          tenderBaseAction = Tender.BaseAction,",
						"          facevalue = Tender.FaceValue,",
						"          TenderAmount = Tender.TenderAmount,",
						"          TenderId = Tender.TenderId,",
						"          TenderKind = Tender.TenderKind,",
						"          TenderName = Tender.TenderName,",
						"          TenderQuantity = Tender.TenderQuantity",
						"     )) ~> SaleTenderMain",
						"filter16 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          Businessdate = TLD,",
						"          storeId = {@storeId},",
						"          POS = {@id},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          Time = {@Time},",
						"          POD = {@POD},",
						"          endSaleTime = {@endSaleTime},",
						"          endSaleDate = {@endSaleDate},",
						"          startSaleTime = {@startSaleTime},",
						"          startSaleDate = {@startSaleDate},",
						"          orderSrc = {@orderSrc},",
						"          nonProductTax = {@nonProductTax},",
						"          {@totalTax},",
						"          {@nonProductAmount},",
						"          {@totalAmount},",
						"          {@saleType},",
						"          {@booth},",
						"          {@receiptNumber},",
						"          {@side},",
						"          {@minor},",
						"          {@major},",
						"          {@key},",
						"          {@kind},",
						"          {@uniqueId},",
						"          {@untilStore},",
						"          {@untilPay},",
						"          {@untilTotal},",
						"          {@itemsCount},",
						"          TAXchainid,",
						"          {@amount},",
						"          {@name},",
						"          {@baseAmount},",
						"          {@rate}",
						"     )) ~> SalesTAXRefund",
						"filter15 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          Businessdate = TLD,",
						"          {@storeId},",
						"          {@id},",
						"          {@RegId},",
						"          {@Type},",
						"          {@Time},",
						"          {@POD},",
						"          {@endSaleTime},",
						"          {@endSaleDate},",
						"          {@startSaleTime},",
						"          {@startSaleDate},",
						"          {@orderSrc},",
						"          {@nonProductTax},",
						"          {@totalTax},",
						"          {@nonProductAmount},",
						"          {@totalAmount},",
						"          {@saleType},",
						"          {@booth},",
						"          {@receiptNumber},",
						"          {@side},",
						"          {@minor},",
						"          {@major},",
						"          {@key},",
						"          {@kind},",
						"          {@uniqueId},",
						"          {@untilStore},",
						"          {@untilPay},",
						"          {@untilTotal},",
						"          {@itemsCount},",
						"          TAXchainid,",
						"          {@amount},",
						"          {@name},",
						"          {@baseAmount},",
						"          {@rate},",
						"          name = {info.name},",
						"          value = {info.value}",
						"     )) ~> SalesCustomInfoRefund",
						"filter14 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessdate,",
						"          saleType,",
						"          POD,",
						"          Timestamp,",
						"          {@storeId},",
						"          POS,",
						"          {@RegId},",
						"          {@Time},",
						"          {@Type},",
						"          {@uniqueId},",
						"          TenderId,",
						"          TenderKind,",
						"          TenderName,",
						"          TenderQuantity,",
						"          FaceValue,",
						"          TenderAmount,",
						"          BaseAction,",
						"          Persisted,",
						"          CardProviderID,",
						"          CashlessData,",
						"          CashlessTransactionID,",
						"          TaxOption,",
						"          SubtotalOption,",
						"          DiscountDescription",
						"     )) ~> SaleTendersRefund",
						"filter13 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          {@uniqueId},",
						"          TenderPersisted,",
						"          DisabledChoices,",
						"          MultiOrder",
						"     )) ~> EVSaleStartRefund",
						"filter12 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          UpdatedQuantity,",
						"          ProductCode,",
						"          Quantity",
						"     )) ~> EVSaleItemRefund",
						"filter11 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          Quantity,",
						"          ChoiceCode,",
						"          ProductCode",
						"     )) ~> EVSaleChoiceRefund",
						"filter10 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          ForceExhibition,",
						"          Type = {set.sale.Type}",
						"     )) ~> EvSetSaleTypeRefund",
						"filter9 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          SaleEventtime,",
						"          saleeventtype,",
						"          Ev_SaleTotal",
						"     )) ~> EVSaleTotalRefund",
						"filter8 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          TenderID,",
						"          FaceValue,",
						"          TenderAmount,",
						"          BaseAction,",
						"          Persisted,",
						"          CardProviderID,",
						"          CashlessData,",
						"          CashlessTransactionID,",
						"          PreAuthorization",
						"     )) ~> EVAddTenderRefund",
						"filter7 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          SaleEventtime,",
						"          saleeventtype,",
						"          saleendType",
						"     )) ~> EVSaleEndRefund",
						"filter18 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          saleventtime = {SaleEvent.time},",
						"          saleeventtype = {saleevent.type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          {@name},",
						"          {@value},",
						"          {@status},",
						"          SALEENDType",
						"     )) ~> EVSaleEnd",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          itemBDPrice,",
						"          itemBDTax,",
						"          itemBPPrice,",
						"          itemBPTax,",
						"          itemaction,",
						"          itemcategory,",
						"          itemchgAfterTotal,",
						"          itemcode,",
						"          itemdayPart,",
						"          itemdepartment,",
						"          itemdepartmentSubClass,",
						"          itemdescription,",
						"          itemdisplayOrder,",
						"          itemfamilyGroup,",
						"          itemgrillModifier,",
						"          itemgrillQty,",
						"          itemid,",
						"          itemlevel,",
						"          itemqty,",
						"          itemqtyPromo,",
						"          itemsolvedChoice,",
						"          itemtotalPrice,",
						"          itemtotalTax,",
						"          itemtype,",
						"          itemunitPrice,",
						"          itemunitTax,",
						"          itemtaxchainid,",
						"          itemtaxchainamount,",
						"          itemtaxchainbaseAmount,",
						"          itemtaxchainname,",
						"          itemtaxchainrate,",
						"          beforeOfferPrice,",
						"          discountAmount,",
						"          discountType,",
						"          offerId,",
						"          POD,",
						"          status,",
						"          Timestamp,",
						"          uniqueId,",
						"          qtyVoided = itemqtyVoided",
						"     )) ~> SaleItem1",
						"filter3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          itemBDPrice = itemitemBDPrice,",
						"          itemBDTax = itemitemBDTax,",
						"          itemBPPrice = itemitemBPPrice,",
						"          itemBPTax = itemitemBPTax,",
						"          itemaction = itemitemaction,",
						"          itemcategory = itemitemcategory,",
						"          itemchgAfterTotal = itemitemchgAfterTotal,",
						"          itemcode = itemitemcode,",
						"          itemdayPart = itemitemdayPart,",
						"          itemdepartment = itemitemdepartment,",
						"          itemdepartmentClass = itemitemdepartmentClass,",
						"          itemdepartmentSubClass = itemitemdepartmentSubClass,",
						"          itemdescription = itemitemdescription,",
						"          itemdisplayOrder = itemitemdisplayOrder,",
						"          itemfamilyGroup = itemitemfamilyGroup,",
						"          itemgrillModifier = itemitemgrillModifier,",
						"          itemgrillQty = itemitemgrillQty,",
						"          itemid = itemitemid,",
						"          itemlevel = itemitemlevel,",
						"          itemqty = itemitemqty,",
						"          itemqtyPromo = itemitemqtyPromo,",
						"          itemqtyVoided = itemitemqtyVoided,",
						"          itemsolvedChoice = itemitemsolvedChoice,",
						"          itemtotalPrice = itemitemtotalPrice,",
						"          itemtotalTax = itemitemtotalTax,",
						"          itemtype = itemitemtype,",
						"          itemunitPrice = itemitemunitPrice,",
						"          itemunitTax = itemitemunitTax,",
						"          itemtaxchainamount = itemitemtaxchainamount,",
						"          itemtaxchainbaseAmount = itemitemtaxchainbaseAmount,",
						"          itemtaxchainid = itemitemtaxchainid,",
						"          itemtaxchainname = itemitemtaxchainname,",
						"          itemtaxchainrate = itemitemtaxchainrate,",
						"          beforeOfferPrice,",
						"          discountAmount,",
						"          discountType,",
						"          offerId,",
						"          uniqueId,",
						"          status,",
						"          POD,",
						"          Timestamp",
						"     )) ~> SaleItem2",
						"filter2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          itemBDTax = titemBDTax,",
						"          itemBDPrice = titemBDPrice,",
						"          itemBPPrice = titemBPPrice,",
						"          itemBPTax = titemBPTax,",
						"          itemaction = titemaction,",
						"          itemcategory = titemcategory,",
						"          itemchgAfterTotal = titemchgAfterTotal,",
						"          itemcode = titemcode,",
						"          itemdayPart = titemdayPart,",
						"          itemdepartment = titemdepartment,",
						"          titemdepartmentClass,",
						"          itemdepartmentSubClass = titemdepartmentSubClass,",
						"          itemdescription = titemdescription,",
						"          itemdisplayOrder = titemdisplayOrder,",
						"          itemfamilyGroup = titemfamilyGroup,",
						"          itemgrillModifier = titemgrillModifier,",
						"          itemgrillQty = titemgrillQty,",
						"          itemid = titemid,",
						"          itemlevel = titemlevel,",
						"          itemqty = titemqty,",
						"          itemqtyPromo = titemqtyPromo,",
						"          itemqtyVoided = titemqtyVoided,",
						"          itemsolvedChoice = titemsolvedChoice,",
						"          itemtotalPrice = titemtotalPrice,",
						"          itemtotalTax = titemtotalTax,",
						"          itemtype = titemtype,",
						"          itemunitPrice = titemunitPrice,",
						"          itemunitTax = titemunitTax,",
						"          itemtaxchainamount = titemtaxchainamount,",
						"          itemtaxchainid = titemtaxchainid,",
						"          itemtaxchainbaseAmount = titemtaxchainbaseAmount,",
						"          itemtaxchainname = titemtaxchainname,",
						"          itemtaxchainrate = titemtaxchainrate,",
						"          beforeOfferPrice,",
						"          discountAmount,",
						"          discountType,",
						"          offerId,",
						"          uniqueId,",
						"          status,",
						"          POD,",
						"          Timestamp",
						"     )) ~> SaleItem3",
						"filter4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          itemBDPrice,",
						"          storeId,",
						"          businessDate,",
						"          pos,",
						"          POD,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          uniqueId,",
						"          itemBDTax,",
						"          itemBPPrice,",
						"          itemBPTax,",
						"          itemaction,",
						"          itemcategory,",
						"          itemchgAfterTotal,",
						"          itemcode,",
						"          itemdayPart,",
						"          itemdepartment,",
						"          itemdepartmentClass,",
						"          itemdepartmentSubClass,",
						"          itemdescription,",
						"          itemdisplayOrder,",
						"          itemfamilyGroup,",
						"          itemgrillModifier,",
						"          itemgrillQty,",
						"          itemid,",
						"          itemlevel,",
						"          itemqty,",
						"          itemqtyPromo,",
						"          itemsolvedChoice,",
						"          itemtotalPrice,",
						"          itemtotalTax,",
						"          itemtype,",
						"          itemunitPrice,",
						"          itemunitTax,",
						"          taxchainid,",
						"          taxchainamount,",
						"          taxchainname,",
						"          taxchainbaseAmount,",
						"          taxchainrate,",
						"          itemqtyVoided",
						"     )) ~> refund1final",
						"filter6 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          itemBDPrice,",
						"          itemBDTax,",
						"          itemBPPrice,",
						"          itemBPTax,",
						"          itemaction,",
						"          itemcategory,",
						"          itemchgAfterTotal,",
						"          itemcode,",
						"          itemdayPart,",
						"          itemdepartment,",
						"          itemdepartmentClass,",
						"          itemdepartmentSubClass,",
						"          itemdescription,",
						"          itemdisplayOrder,",
						"          itemfamilyGroup,",
						"          itemgrillModifier,",
						"          itemgrillQty,",
						"          itemid,",
						"          itemisUpcharge,",
						"          itemlevel,",
						"          itemqty,",
						"          itemqtyPromo,",
						"          itemsolvedChoice,",
						"          itemtotalPrice,",
						"          itemtotalTax,",
						"          itemtype,",
						"          itemunitPrice,",
						"          itemunitTax,",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          POD,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          uniqueId,",
						"          itemtaxchainid,",
						"          itemtaxchainamount,",
						"          itemtaxchainname,",
						"          itemtaxchainbaseAmount,",
						"          itemtaxchainrate,",
						"          itemqtyVoided = itemqtyVoidedd",
						"     )) ~> refund2final",
						"filter5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          itemBDPrice,",
						"          itemBDTax,",
						"          itemBPPrice,",
						"          itemBPTax,",
						"          itemaction,",
						"          itemcategory,",
						"          itemchgAfterTotal,",
						"          itemcode,",
						"          itemdayPart,",
						"          itemdepartment,",
						"          itemdepartmentClass,",
						"          itemdepartmentSubClass,",
						"          itemdescription,",
						"          itemdisplayOrder,",
						"          itemfamilyGroup,",
						"          itemgrillModifier,",
						"          itemgrillQty,",
						"          itemid,",
						"          itemlevel,",
						"          itemqty,",
						"          itemqtyPromo,",
						"          itemsolvedChoice,",
						"          itemtotalPrice,",
						"          itemtotalTax,",
						"          itemtype,",
						"          itemunitPrice,",
						"          itemunitTax,",
						"          itemtaxchainid,",
						"          itemtaxchainamount,",
						"          itemtaxchainname,",
						"          itemtaxchainbaseAmount,",
						"          itemtaxchainrate,",
						"          storeId,",
						"          businessDate,",
						"          pos,",
						"          POD,",
						"          uniqueId,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          qtyVoided = qtyVoidedd",
						"     )) ~> refund3check"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RFS_SALES_STLD_XML')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RFS_SALES_DATAFLOW_test')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RFS_SALES_STLD_XML",
								"type": "DatasetReference"
							},
							"name": "XMLSourceFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTLDProductionStatus"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecNode"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecEvent"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXInitGTotal"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXSetSMState"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXBaseConfig"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXBaseConfigposconfig"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXDayParts"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTrxTendertableTenderflag"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXTaxTabletype"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXDayOpen"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "TRXGetAuthorization"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "TRXOperLogin"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecEvDrawerclosee"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecRXRegTransfers"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RECTRXsale"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SalesCustomInfoDetail"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "TRXOrderPromotions"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "TRXOrderCustOffers"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXReduction"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleStart"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleChoice"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVChangeSizeSelection"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSetsaleType"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleTotal"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVAddTender"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXTenderTableType"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "CustomInfo"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecEVCustom"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXSaleOrder"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleItem"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SaleTenderMain"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SalesTAXRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SalesCustomInfoRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SaleTendersRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleStartRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleItemRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleChoiceRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EvSetSaleTypeRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleTotalRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVAddTenderRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleEndRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleEnd"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SaleItem1"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SaleItem2"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SaleItem3"
						}
					],
					"transformations": [
						{
							"name": "FlattenRecNode"
						},
						{
							"name": "FlattenRecEventNode"
						},
						{
							"name": "FlattenRecTRXInitGlobal"
						},
						{
							"name": "FlattenTRXSMSState"
						},
						{
							"name": "FlattenTRXBaseConfig"
						},
						{
							"name": "FlattenTRXBaseConfigposconfig"
						},
						{
							"name": "FlattenRecTRXDayParts"
						},
						{
							"name": "FlattenRecTrxTendertableTenderflag1"
						},
						{
							"name": "FlattenRecTrxTendertableTenderflag2"
						},
						{
							"name": "FlattenRecTrxTendertableTenderflag3"
						},
						{
							"name": "FlattenRecTrxTendertableTenderflag4"
						},
						{
							"name": "FlattenRecTRXTaxTabletype"
						},
						{
							"name": "FlattenRecTRXDayOpen"
						},
						{
							"name": "FlattenTRXGetAuthorization"
						},
						{
							"name": "FlattenTRXOperLogin"
						},
						{
							"name": "FlattenRecEvDrawerClose"
						},
						{
							"name": "FlattenRecRXRegTransfers"
						},
						{
							"name": "FlattenSalesCustomInfoDetail1"
						},
						{
							"name": "FlattenSalesCustomInfoDetail2"
						},
						{
							"name": "FlattenTRXOrderPromotions"
						},
						{
							"name": "FlattenTRXOrderCustOffers"
						},
						{
							"name": "FlattenSaleTenderMain1"
						},
						{
							"name": "FlattenSaleTenderMain2"
						},
						{
							"name": "FlattenEVSaleStart1"
						},
						{
							"name": "FlattenEVSaleStart2"
						},
						{
							"name": "FlattenEVSaleChoice1"
						},
						{
							"name": "FlattenEVSaleChoice2"
						},
						{
							"name": "FlattenEVChangeSizeSelection"
						},
						{
							"name": "FlattenEVSetsaleType"
						},
						{
							"name": "FlattenEVSaleTotal"
						},
						{
							"name": "FlattenEVAddTender"
						},
						{
							"name": "FlattenRecTRXTenderTableType1"
						},
						{
							"name": "FlattenRecTRXTenderTableType2"
						},
						{
							"name": "FlattenCustomInfo"
						},
						{
							"name": "FlattenRecEVCustom"
						},
						{
							"name": "FlattenRecTRXSaleOrder"
						},
						{
							"name": "FlattenEVSaleItem"
						},
						{
							"name": "FlattenRefund"
						},
						{
							"name": "FlattenSalesCustomInfoRefund"
						},
						{
							"name": "FlattenSaleTendersRefund"
						},
						{
							"name": "FlattenEVRefund"
						},
						{
							"name": "FlattenEVSaleStartRefund"
						},
						{
							"name": "FlattenEVSaleItemRefund"
						},
						{
							"name": "FlattenEVSaleChoiceRefund"
						},
						{
							"name": "FlattenEvSetSaleTypeRefund"
						},
						{
							"name": "FlattenEVSaleTotalRefund"
						},
						{
							"name": "FlattenEVAddTenderRefund"
						},
						{
							"name": "FlattenEVSaleEndRefund"
						},
						{
							"name": "FlattenEVSaleEnd"
						},
						{
							"name": "FlattenSaleItem1"
						},
						{
							"name": "FlattenSaleItem2"
						},
						{
							"name": "FlattenSaleItem3"
						},
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filter3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TLD as ({@businessDate} as integer, {@checkPoint} as boolean, {@dataComplete} as boolean, {@end} as boolean, {@hasMoreContent} as boolean, {@logVersion} as string, {@productionStatus} as string, {@storeId} as integer, {@swVersion} as string, Node as ({@id} as string, {@nodeStatus} as string, Event as ({@RegId} as integer, {@Time} as long, {@Type} as string, EV_Custom as (Code as string, Value as string), Ev_CancelSpecialTrx as ({@Type} as string), Ev_Custom as (Info as ({@code} as short, {@data} as string)), Ev_DrawerClose as ({@TotalOpenTime} as integer, {@UnauthorizedOpen} as boolean), Ev_SaleCustom as (Info as ({@name} as string, {@value} as string)), Ev_SetCOD as ({@COD} as string, {@POD} as string, {@WorkingMode} as string), TRX_Authorized_Cash_Drawer_Open as (Amount as double, Reason as string, Time as long, Type as string), TRX_BaseConfig as ({@POD} as string, {@POS} as string, Config as (AcceptNegativeQty as boolean, AcceptZeroPricePMix as boolean, CheckRefund as boolean, DecimalPlaces as short, FloatPriceTenderId as boolean, GrandTotalFlag as short, MenuPriceBasis as boolean, MinCirculatingAmount as double, StoreId as integer, StoreName as string, WeekDayBreakfastStartTime as short, WeekDayBreakfastStopTime as short, WeekEndBreakfastStartTime as short, WeekEndBreakfastStopTime as short), POSConfig as (CountTCsFullDiscEM as boolean, OverringBehaviour as boolean, RefundBehaviour as boolean)), TRX_DayClose as ({@BusinessDate} as integer), TRX_DayOpen as ({@BusinessDate} as integer), TRX_DayParts as ({@name} as string, DayPartFriday as ({@end} as string, {@start} as string), DayPartMonday as ({@end} as string, {@start} as string), DayPartSaturday as ({@end} as string, {@start} as string), DayPartSunday as ({@end} as string, {@start} as string), DayPartThursday as ({@end} as string, {@start} as string), DayPartTuesday as ({@end} as string, {@start} as string), DayPartWednesday as ({@end} as string, {@start} as string)), TRX_GetAuthorization as (Action as string, ExpirationDate as integer, IsLogged as boolean, ManagerID as short, ManagerName as string, Method as string, Password as string, SecurityLevel as short), TRX_InitGTotal as ({@amount} as double), TRX_OperLogin as (AutoLogin as boolean, CrewID as short, CrewName as string, CrewSecurityLevel as short, POD as string, RemotePOD as string), TRX_OperLogout as (AutoLogout as boolean, CrewID as short, CrewName as string), TRX_OrderNotRecalled as (OrderNotRecalled as ({@key} as string, {@major} as short, {@minor} as boolean, {@totalAmount} as double)[]), TRX_Price_Changed as (Time as long), TRX_Refund as ({@POD} as string, Order as ({@Timestamp} as long, {@booth} as boolean, {@endSaleDate} as integer, {@endSaleTime} as integer, {@fpFiscalReceiptNumber} as boolean, {@fpReceiptNumber} as boolean, {@key} as string, {@kind} as string, {@major} as short, {@minor} as boolean, {@nonProductAmount} as double, {@nonProductTax} as double, {@orderSrc} as boolean, {@receiptNumber} as short, {@saleType} as string, {@side} as string, {@startSaleDate} as integer, {@startSaleTime} as integer, {@totalAmount} as double, {@totalChargedTaxAmount} as double, {@totalTax} as double, {@totalTaxableAmount} as double, {@uniqueId} as string, CustomInfo as (Info as ({@name} as string, {@value} as string)[]), EventsDetail as (SaleEvent as ({@Time} as long, {@Type} as string, Ev_AddTender as (BaseAction as string, CardProviderID as string, CashlessData as string, CashlessTransactionID as string, FaceValue as double, Persisted as boolean, PreAuthorization as string, TenderAmount as double, TenderID as boolean), Ev_SaleAutoChoice as string, Ev_SaleChoice as (ChoiceCode as short, ProductCode as short, Quantity as boolean), Ev_SaleCustomInfo as (Info as ({@name} as string, {@value} as string)), Ev_SaleEnd as (Type as string), Ev_SaleGrillEnd as ({@Type} as string), Ev_SaleGrillOper as (ComponentCode as short, Operation as string, Quantity as boolean), Ev_SaleGrillRecipe as (ProductCode as short, Quantity as boolean, VMProductCode as short), Ev_SaleGrillStart as (ProductCode as short, Quantity as boolean, VMProductCode as short), Ev_SaleItem as (ProductCode as short, Quantity as short, UpdatedQuantity as boolean), Ev_SaleItemCancelled as (ForcedCancel as boolean, ProductCode as short, Quantity as boolean), Ev_SaleStart as (DisabledChoices as string, MultiOrder as boolean, TenderPersisted as boolean), Ev_SaleTotal as string, Ev_SetSaleType as (ForceExhibition as boolean, Type as string), TRX_GetAuthorization as (Action as string, ExpirationDate as integer, IsLogged as boolean, ManagerID as short, ManagerName as string, Method as string, Password as string, SecurityLevel as short))[]), Fiscal_Information as ({@TIN} as string, {@ZIP} as string, {@address} as string, {@name} as string), Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as short, {@BPTax} as short, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as integer, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as short, {@grillQty} as short, {@id} as integer, {@level} as short, {@qty} as short, {@qtyPromo} as short, {@solvedChoice} as integer, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as short, {@BPTax} as short, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as integer, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as short, {@grillQty} as short, {@id} as integer, {@isUpcharge} as boolean, {@level} as short, {@qty} as short, {@qtyPromo} as short, {@solvedChoice} as integer, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as short, {@BPTax} as short, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as integer, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as short, {@grillQty} as short, {@id} as integer, {@level} as short, {@qty} as short, {@qtyPromo} as short, {@solvedChoice} as integer, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, TaxChain as ({@BDAmount} as double, {@BDBaseAmount} as double, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short))[], TaxChain as ({@BDAmount} as double, {@BDBaseAmount} as double, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short))[], TaxChain as ({@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short))[], POSTimings as ({@itemsCount} as short, {@untilPay} as long, {@untilStore} as string, {@untilTotal} as long), TaxChain as ({@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short), Tenders as (Tender as (BaseAction as string, CardProviderID as string, CashlessData as string, CashlessTransactionID as string, DiscountDescription as string, FaceValue as double, ForeignCurrencyIndicator as boolean, PaymentChannel as string, Persisted as boolean, SubtotalOption as string, TaxOption as string, TenderAmount as double, TenderId as boolean, TenderKind as boolean, TenderName as string, TenderQuantity as boolean)), taxItem as ({@amount} as double, {@baseAmt} as double, {@desc} as string, {@id} as short, {@rate} as short))), TRX_RegTransfer as ({@Amount} as double, {@FaceValue} as double, {@OperType} as string, {@TenderID} as boolean, {@TenderName} as string, {@TransferType} as string), TRX_Sale as ({@POD} as string, {@RemPOD} as string, {@status} as string, Order as ({@Timestamp} as long, {@booth} as boolean, {@deliveryChannel} as string, {@endSaleDate} as integer, {@endSaleTime} as integer, {@foreignOrderId} as integer, {@fpFiscalReceiptNumber} as boolean, {@fpReceiptNumber} as boolean, {@key} as string, {@kind} as string, {@major} as short, {@minor} as short, {@nonProductAmount} as double, {@nonProductTax} as double, {@orderSrc} as short, {@paymentType} as boolean, {@receiptNumber} as short, {@saleType} as string, {@side} as string, {@startSaleDate} as integer, {@startSaleTime} as integer, {@totalAmount} as double, {@totalChargedTaxAmount} as double, {@totalTax} as double, {@totalTaxableAmount} as double, {@uniqueId} as string, COD as ({@name} as short, {@number} as boolean), CustomInfo as (Info as ({@name} as string, {@value} as string)[]), Customer as ({@greeting} as string, {@id} as string, {@loyaltyCardId} as string, {@loyaltyCardType} as boolean, {@nickname} as string), EventsDetail as (SaleEvent as ({@Time} as long, {@Type} as string, Ev_AddTender as (BaseAction as string, CardProviderID as string, CashlessData as string, CashlessTransactionID as string, FaceValue as double, Persisted as boolean, PreAuthorization as boolean, TenderAmount as double, TenderID as short), Ev_BackFromTotal as string, Ev_BreakValueMeal as (Components as (Product as ({@code} as short, {@quantity} as boolean)[]), ProductCode as short, Quantity as boolean), Ev_ChangeSizeSelection as (ProductCode as short, Quantity as short, SizeSelected as short), Ev_PromoItem as (Amount as double, ProductCode as short, Quantity as short, Type as string), Ev_SaleAutoChoice as string, Ev_SaleChoice as (ChoiceCode as short, ProductCode as short, Quantity as short), Ev_SaleClearChoice as (ChoiceCode as short, Quantity as short), Ev_SaleCustomInfo as (Info as ({@name} as string, {@value} as string)), Ev_SaleEnd as (Type as string), Ev_SaleGrillCancel as string, Ev_SaleGrillEnd as ({@Type} as string), Ev_SaleGrillOper as (ComponentCode as integer, Operation as string, Quantity as short), Ev_SaleGrillQualifier as (ComponentCode as short, Qualifier as boolean), Ev_SaleGrillRecipe as (ProductCode as short, Quantity as short, VMProductCode as short), Ev_SaleGrillStart as (ProductCode as short, Quantity as short, VMProductCode as short), Ev_SaleIncrementItemQty as (ProductCode as short, Quantity as short, SaleIndex as boolean), Ev_SaleItem as (ProductCode as short, Quantity as short, UpdatedQuantity as short), Ev_SaleItemCancelled as (ForcedCancel as boolean, ProductCode as short, Quantity as short), Ev_SaleRecalled as string, Ev_SaleStart as (DisabledChoices as string, MultiOrder as boolean, TenderPersisted as boolean), Ev_SaleStored as string, Ev_SaleTotal as string, Ev_SetSaleType as (ForceExhibition as boolean, Type as string), TRX_GetAuthorization as (Action as string, ExpirationDate as integer, IsLogged as boolean, ManagerID as short, ManagerName as string, Method as string, Password as string, SecurityLevel as short))[]), Fiscal_Information as ({@TIN} as string, {@ZIP} as string, {@address} as string, {@name} as string), Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as double, {@BPTax} as double, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as short, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as boolean, {@grillQty} as boolean, {@id} as short, {@level} as boolean, {@qty} as short, {@qtyPromo} as short, {@qtyVoided} as short, {@solvedChoice} as string, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as double, {@BPTax} as double, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as integer, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as boolean, {@grillQty} as short, {@id} as short, {@isUpcharge} as boolean, {@level} as boolean, {@qty} as short, {@qtyPromo} as short, {@qtyVoided} as short, {@solvedChoice} as integer, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as double, {@BPTax} as double, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as integer, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as short, {@grillQty} as short, {@id} as short, {@isUpcharge} as boolean, {@level} as short, {@qty} as short, {@qtyPromo} as short, {@qtyVoided} as short, {@solvedChoice} as integer, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, Promo as ({@id} as boolean, {@name} as string, {@qty} as short), TaxChain as ({@BDAmount} as string, {@BDBaseAmount} as string, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short))[], Offers as ({@beforeOfferPrice} as double, {@discountAmount} as double, {@discountType} as string, {@offerId} as integer), Promo as ({@id} as boolean, {@name} as string, {@qty} as short), PromotionApplied as ({@discountAmount} as double, {@discountType} as string, {@eligible} as boolean, {@offerId} as integer, {@originalItemPromoQty} as boolean, {@originalPrice} as double, {@originalProductCode} as string, {@promotionCounter} as boolean, {@promotionId} as integer), TaxChain as ({@BDAmount} as double, {@BDBaseAmount} as double, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short))[], Offers as ({@beforeOfferPrice} as double, {@discountAmount} as double, {@discountType} as string, {@offerId} as integer), Promo as ({@id} as boolean, {@name} as string, {@qty} as short), PromotionApplied as ({@discountAmount} as double, {@discountType} as string, {@eligible} as boolean, {@offerId} as integer, {@originalItemPromoQty} as boolean, {@originalPrice} as double, {@originalProductCode} as string, {@promotionCounter} as short, {@promotionId} as integer), TaxChain as ({@BDAmount} as double, {@BDBaseAmount} as double, {@BPAmount} as double, {@BPBaseAmount} as double, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short), discounts as (discount as ({@amount} as double, {@description} as string, {@id} as short, {@reduction} as double, {@type} as string, {@value} as double)))[], Offers as ({@applied} as boolean, {@customerId} as integer, {@customerType} as boolean, {@offerBarcodeType} as string, {@offerId} as integer, {@offerName} as string, {@offerType} as string, {@override} as boolean, {@promotionId} as integer)[], POSTimings as ({@itemsCount} as short, {@untilPay} as long, {@untilStore} as long, {@untilTotal} as long), Promotions as (Promotion as ({@countTowardsPromotionLimit} as boolean, {@discountAmount} as double, {@discountType} as string, {@exclusive} as boolean, {@offerId} as integer, {@promotionCounter} as short, {@promotionId} as integer, {@promotionName} as string, {@promotionOnTender} as boolean, {@returnedValue} as double)[]), Reduction as (AfterTotal as short, Amount as double, AmountAfterTotal as double, AmountBeforeTotal as double, BeforeTotal as short, Qty as short), TaxChain as ({@BDAmount} as double, {@BDBaseAmount} as double, {@BPAmount} as double, {@BPBaseAmount} as double, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short), Tenders as (Tender as (BaseAction as string, CardProviderID as string, CashlessData as string, CashlessTransactionID as string, DiscountDescription as string, FaceValue as double, ForeignCurrencyIndicator as boolean, PaymentChannel as string, Persisted as boolean, SourceTenders as (SourceTender as ({@sourceCode} as boolean, {@sourceValue} as double)), SubtotalOption as string, TaxOption as string, TenderAmount as double, TenderId as short, TenderKind as short, TenderName as string, TenderQuantity as short)[]), taxItem as ({@amount} as double, {@baseAmt} as double, {@desc} as string, {@id} as short, {@rate} as short))), TRX_SetPOD as ({@PODId} as string), TRX_SetSMState as ({@PODId} as string, CrewId as short, CrewName as string, CrewSecurityLevel as short, InitialFloat as double, LoginTime as integer, LogoutTime as integer, POSState as string), TRX_Show_Prices as (Time as long), TRX_Signature_Version as (CryptographyAlgorithm as string, PrivateKeyVersion as string), TRX_TaxTable as (TaxType as (Precision as short, Rounding as string, TaxBasis as string, TaxCalcType as string, TaxDescription as string, TaxId as short, TaxRate as short)[]), TRX_TenderTable as (TenderType as (CreditSales as ({@LegacyId} as short), CurrencyDecimals as short, DefaultHaloLimit as short, DefaultSkimLimit as short, ElectronicPayment as ({@LegacyId} as string), ForeignCurrency as ({@ExchangeRate} as double, {@LegacyId} as short, {@Orientation} as string, {@Precision} as boolean, {@Rounding} as string), GiftCoupon as ({@Amount} as short, {@LegacyId} as string, {@OperatorDefined} as boolean), OtherPayment as ({@LegacyId} as string), SubtotalOption as string, TaxOption as string, TenderCategory as string, TenderChange as ({@id} as boolean, {@maxAllowed} as double, {@roundToMinAmount} as string, {@type} as string), TenderFiscalIndex as short, TenderFlags as (TenderFlag as string[]), TenderId as short, TenderName as string)[]), TRX_UnaDrawerOpening as string, TRX_UpdateCustomCounter as ({@counterName} as string, {@counterValue} as double, {@operation} as string, {@operationValue} as double))[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     validationMode: 'none',",
						"     namespaces: true,",
						"     dateFormats: ['dd-MM-yyyy'],",
						"     timestampFormats: ['MM/dd/yyyy HH:mm:ss'],",
						"     preferredIntegralType: 'short',",
						"     preferredFractionalType: 'double') ~> XMLSourceFile",
						"XMLSourceFile foldDown(unroll(TLD.Node),",
						"     mapColumn(",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@checkPoint} = TLD.{@checkPoint},",
						"          {@dataComplete} = TLD.{@dataComplete},",
						"          {@end} = TLD.{@end},",
						"          {@hasMoreContent} = TLD.{@hasMoreContent},",
						"          {@logVersion} = TLD.{@logVersion},",
						"          {@productionStatus} = TLD.{@productionStatus},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@swVersion} = TLD.{@swVersion},",
						"          {@id} = TLD.Node.{@id},",
						"          {@nodeStatus} = TLD.Node.{@nodeStatus},",
						"          Event = TLD.Node.Event",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecNode",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          RecEventid = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@RegId} = TLD.Node.Event.{@RegId}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecEventNode",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          id = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@amount} = TLD.Node.Event.TRX_InitGTotal.{@amount}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXInitGlobal",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          id = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@PODId} = TLD.Node.Event.TRX_SetSMState.{@PODId},",
						"          POSState = TLD.Node.Event.TRX_SetSMState.POSState,",
						"          CrewId = TLD.Node.Event.TRX_SetSMState.CrewId,",
						"          CrewName = TLD.Node.Event.TRX_SetSMState.CrewName,",
						"          CrewSecurityLevel = TLD.Node.Event.TRX_SetSMState.CrewSecurityLevel,",
						"          LoginTime = TLD.Node.Event.TRX_SetSMState.LoginTime,",
						"          LogoutTime = TLD.Node.Event.TRX_SetSMState.LogoutTime,",
						"          InitialFloat = TLD.Node.Event.TRX_SetSMState.InitialFloat",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXSMSState",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@POD} = TLD.Node.Event.TRX_BaseConfig.{@POD},",
						"          MenuPriceBasis = TLD.Node.Event.TRX_BaseConfig.Config.MenuPriceBasis,",
						"          WeekEndBreakfastStartTime = TLD.Node.Event.TRX_BaseConfig.Config.WeekEndBreakfastStartTime,",
						"          WeekEndBreakfastStopTime = TLD.Node.Event.TRX_BaseConfig.Config.WeekEndBreakfastStopTime,",
						"          WeekDayBreakfastStartTime = TLD.Node.Event.TRX_BaseConfig.Config.WeekDayBreakfastStartTime,",
						"          WeekDayBreakfastStopTime = TLD.Node.Event.TRX_BaseConfig.Config.WeekDayBreakfastStopTime,",
						"          DecimalPlaces = TLD.Node.Event.TRX_BaseConfig.Config.DecimalPlaces,",
						"          CheckRefund = TLD.Node.Event.TRX_BaseConfig.Config.CheckRefund,",
						"          GrandTotalFlag = TLD.Node.Event.TRX_BaseConfig.Config.GrandTotalFlag,",
						"          StoreId = TLD.Node.Event.TRX_BaseConfig.Config.StoreId,",
						"          StoreName = TLD.Node.Event.TRX_BaseConfig.Config.StoreName,",
						"          AcceptNegativeQty = TLD.Node.Event.TRX_BaseConfig.Config.AcceptNegativeQty,",
						"          AcceptZeroPricePMix = TLD.Node.Event.TRX_BaseConfig.Config.AcceptZeroPricePMix,",
						"          FloatPriceTenderId = TLD.Node.Event.TRX_BaseConfig.Config.FloatPriceTenderId",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXBaseConfig",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@POD} = TLD.Node.Event.TRX_BaseConfig.{@POD},",
						"          CountTCsFullDiscEM = TLD.Node.Event.TRX_BaseConfig.POSConfig.CountTCsFullDiscEM,",
						"          RefundBehaviour = TLD.Node.Event.TRX_BaseConfig.POSConfig.RefundBehaviour,",
						"          OverringBehaviour = TLD.Node.Event.TRX_BaseConfig.POSConfig.OverringBehaviour",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXBaseConfigposconfig",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@id} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@name} = TLD.Node.Event.TRX_DayParts.{@name},",
						"          Mondayend = TLD.Node.Event.TRX_DayParts.DayPartMonday.{@end},",
						"          Mondaystart = TLD.Node.Event.TRX_DayParts.DayPartMonday.{@start},",
						"          Tuesdayend = TLD.Node.Event.TRX_DayParts.DayPartTuesday.{@end},",
						"          Tuesdaystart = TLD.Node.Event.TRX_DayParts.DayPartTuesday.{@start},",
						"          Wednesdayend = TLD.Node.Event.TRX_DayParts.DayPartWednesday.{@end},",
						"          Wednesdaystart = TLD.Node.Event.TRX_DayParts.DayPartWednesday.{@start},",
						"          Thursdayend = TLD.Node.Event.TRX_DayParts.DayPartThursday.{@end},",
						"          Thursdaystart = TLD.Node.Event.TRX_DayParts.DayPartThursday.{@start},",
						"          fridayend = TLD.Node.Event.TRX_DayParts.DayPartFriday.{@end},",
						"          fridaystart = TLD.Node.Event.TRX_DayParts.DayPartFriday.{@start},",
						"          saturdayend = TLD.Node.Event.TRX_DayParts.DayPartSaturday.{@end},",
						"          saturdaystart = TLD.Node.Event.TRX_DayParts.DayPartSaturday.{@start},",
						"          sundayend = TLD.Node.Event.TRX_DayParts.DayPartSunday.{@end},",
						"          sundaystart = TLD.Node.Event.TRX_DayParts.DayPartSunday.{@start},",
						"          POD = TLD.Node.Event.TRX_BaseConfig.{@POD}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXDayParts",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          TenderType = TLD.Node.Event.TRX_TenderTable.TenderType",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTrxTendertableTenderflag1",
						"FlattenRecTrxTendertableTenderflag1 foldDown(unroll(TenderType),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          EventType = {@Type},",
						"          TenderId = TenderType.TenderId,",
						"          TenderName = TenderType.TenderName,",
						"          TenderCategory = TenderType.TenderCategory,",
						"          TenderFlag = TenderType.TenderFlags.TenderFlag,",
						"          TenderType",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTrxTendertableTenderflag2",
						"FlattenRecTrxTendertableTenderflag2 foldDown(unroll(TenderFlag),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          EventType,",
						"          TenderId,",
						"          TenderName,",
						"          TenderCategory,",
						"          TenderFlag = TenderType.TenderFlags.TenderFlag",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTrxTendertableTenderflag3",
						"FlattenRecTrxTendertableTenderflag3 foldDown(unroll(TenderFlag),",
						"     mapColumn(",
						"          TenderFlag,",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          EventType,",
						"          TenderId,",
						"          TenderName,",
						"          TenderCategory",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTrxTendertableTenderflag4",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event.TRX_TaxTable.TaxType),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          TaxId = TLD.Node.Event.TRX_TaxTable.TaxType.TaxId,",
						"          TaxDescription = TLD.Node.Event.TRX_TaxTable.TaxType.TaxDescription,",
						"          TaxRate = TLD.Node.Event.TRX_TaxTable.TaxType.TaxRate,",
						"          TaxBasis = TLD.Node.Event.TRX_TaxTable.TaxType.TaxBasis,",
						"          TaxCalcType = TLD.Node.Event.TRX_TaxTable.TaxType.TaxCalcType,",
						"          {@Rounding} = TLD.Node.Event.TRX_TaxTable.TaxType.Rounding,",
						"          Precision = TLD.Node.Event.TRX_TaxTable.TaxType.Precision,",
						"          {sale.pod} = TLD.Node.Event.TRX_Sale.{@POD}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXTaxTabletype",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {TRX_DayOpen.Businessdate} = TLD.Node.Event.TRX_DayOpen.{@BusinessDate}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXDayOpen",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          ManagerID = TLD.Node.Event.TRX_GetAuthorization.ManagerID,",
						"          ManagerName = TLD.Node.Event.TRX_GetAuthorization.ManagerName,",
						"          SecurityLevel = TLD.Node.Event.TRX_GetAuthorization.SecurityLevel,",
						"          Password = TLD.Node.Event.TRX_GetAuthorization.Password,",
						"          IsLogged = TLD.Node.Event.TRX_GetAuthorization.IsLogged,",
						"          ExpirationDate = TLD.Node.Event.TRX_GetAuthorization.ExpirationDate",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXGetAuthorization",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          CrewID = TLD.Node.Event.TRX_OperLogin.CrewID,",
						"          CrewName = TLD.Node.Event.TRX_OperLogin.CrewName,",
						"          CrewSecurityLevel = TLD.Node.Event.TRX_OperLogin.CrewSecurityLevel,",
						"          POD = TLD.Node.Event.TRX_OperLogin.POD,",
						"          RemotePOD = TLD.Node.Event.TRX_OperLogin.RemotePOD,",
						"          AutoLogin = TLD.Node.Event.TRX_OperLogin.AutoLogin",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXOperLogin",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          businessdate = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@UnauthorizedOpen} = TLD.Node.Event.Ev_DrawerClose.{@UnauthorizedOpen},",
						"          {@TotalOpenTime} = TLD.Node.Event.Ev_DrawerClose.{@TotalOpenTime}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecEvDrawerClose",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          Businessdate = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@Amount} = TLD.Node.Event.TRX_RegTransfer.{@Amount},",
						"          {@FaceValue} = TLD.Node.Event.TRX_RegTransfer.{@FaceValue},",
						"          {@OperType} = TLD.Node.Event.TRX_RegTransfer.{@OperType},",
						"          {@TenderID} = TLD.Node.Event.TRX_RegTransfer.{@TenderID},",
						"          {@TenderName} = TLD.Node.Event.TRX_RegTransfer.{@TenderName},",
						"          {@TransferType} = TLD.Node.Event.TRX_RegTransfer.{@TransferType}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecRXRegTransfers",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@POD} = TLD.Node.Event.TRX_Sale.{@POD},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          EndsaleTime = TLD.Node.Event.TRX_Sale.Order.{@endSaleTime},",
						"          {@endSaleDate} = TLD.Node.Event.TRX_Sale.Order.{@endSaleDate},",
						"          {@startSaleTime} = TLD.Node.Event.TRX_Sale.Order.{@startSaleTime},",
						"          {@startSaleDate} = TLD.Node.Event.TRX_Sale.Order.{@startSaleDate},",
						"          {@orderSrc} = TLD.Node.Event.TRX_Sale.Order.{@orderSrc},",
						"          {@nonProductTax} = TLD.Node.Event.TRX_Sale.Order.{@nonProductTax},",
						"          {@totalTax} = TLD.Node.Event.TRX_Sale.Order.{@totalTax},",
						"          {@nonProductAmount} = TLD.Node.Event.TRX_Sale.Order.{@nonProductAmount},",
						"          {@totalAmount} = TLD.Node.Event.TRX_Sale.Order.{@totalAmount},",
						"          {@saleType} = TLD.Node.Event.TRX_Sale.Order.{@saleType},",
						"          {@booth} = TLD.Node.Event.TRX_Sale.Order.{@booth},",
						"          {@receiptNumber} = TLD.Node.Event.TRX_Sale.Order.{@receiptNumber},",
						"          {@side} = TLD.Node.Event.TRX_Sale.Order.{@side},",
						"          {@minor} = TLD.Node.Event.TRX_Sale.Order.{@minor},",
						"          {@major} = TLD.Node.Event.TRX_Sale.Order.{@major},",
						"          {@key} = TLD.Node.Event.TRX_Sale.Order.{@key},",
						"          {@kind} = TLD.Node.Event.TRX_Sale.Order.{@kind},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@Timestamp} = TLD.Node.Event.TRX_Sale.Order.{@Timestamp},",
						"          {@foreignOrderId} = TLD.Node.Event.TRX_Sale.Order.{@foreignOrderId},",
						"          {@untilStore} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilStore},",
						"          {@untilTotal} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilTotal},",
						"          {@untilPay} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilPay},",
						"          {@itemsCount} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@itemsCount},",
						"          TaxChainId = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@id},",
						"          {@amount} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@amount},",
						"          {@name} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@name},",
						"          {@baseAmount} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@baseAmount},",
						"          {@rate} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@rate},",
						"          Info = TLD.Node.Event.TRX_Refund.Order.CustomInfo.Info,",
						"          AfterTotal = TLD.Node.Event.TRX_Sale.Order.Reduction.AfterTotal,",
						"          Amount = TLD.Node.Event.TRX_Sale.Order.Reduction.Amount,",
						"          AmountAfterTotal = TLD.Node.Event.TRX_Sale.Order.Reduction.AmountAfterTotal,",
						"          AmountBeforeTotal = TLD.Node.Event.TRX_Sale.Order.Reduction.AmountBeforeTotal,",
						"          BeforeTotal = TLD.Node.Event.TRX_Sale.Order.Reduction.BeforeTotal,",
						"          Qty = TLD.Node.Event.TRX_Sale.Order.Reduction.Qty",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSalesCustomInfoDetail1",
						"FlattenSalesCustomInfoDetail1 foldDown(unroll(Info),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@status},",
						"          EndsaleTime,",
						"          {@endSaleDate},",
						"          {@startSaleTime},",
						"          {@startSaleDate},",
						"          {@orderSrc},",
						"          {@nonProductTax},",
						"          {@totalTax},",
						"          {@nonProductAmount},",
						"          {@totalAmount},",
						"          {@saleType},",
						"          {@booth},",
						"          {@receiptNumber},",
						"          {@side},",
						"          {@minor},",
						"          {@major},",
						"          {@key},",
						"          {@kind},",
						"          {@uniqueId},",
						"          {@Timestamp},",
						"          {@foreignOrderId},",
						"          {@untilStore},",
						"          {@untilTotal},",
						"          {@untilPay},",
						"          {@itemsCount},",
						"          TaxChainId,",
						"          {@amount},",
						"          {@name},",
						"          {@baseAmount},",
						"          {@rate},",
						"          customInfoname = Info.{@name},",
						"          custominfovalue = Info.{@value}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSalesCustomInfoDetail2",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion),",
						"     mapColumn(",
						"          BusinessDate = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@promotionId} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@promotionId},",
						"          {@promotionName} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@promotionName},",
						"          {@promotionCounter} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@promotionCounter},",
						"          {@discountType} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@discountType},",
						"          {@discountAmount} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@discountAmount},",
						"          {@offerId} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@offerId},",
						"          {@exclusive} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@exclusive},",
						"          {@promotionOnTender} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@promotionOnTender},",
						"          {@countTowardsPromotionLimit} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@countTowardsPromotionLimit},",
						"          {@returnedValue} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@returnedValue}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXOrderPromotions",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event.TRX_Sale.Order.Offers),",
						"     mapColumn(",
						"          Businessdate = TLD.{@businessDate},",
						"          Storeid = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@offerId} = TLD.Node.Event.TRX_Sale.Order.Offers.{@offerId},",
						"          {@customerId} = TLD.Node.Event.TRX_Sale.Order.Offers.{@customerId},",
						"          {@offerName} = TLD.Node.Event.TRX_Sale.Order.Offers.{@offerName},",
						"          {@override} = TLD.Node.Event.TRX_Sale.Order.Offers.{@override},",
						"          {@applied} = TLD.Node.Event.TRX_Sale.Order.Offers.{@applied},",
						"          {@promotionId} = TLD.Node.Event.TRX_Sale.Order.Offers.{@promotionId},",
						"          {@offerBarcodeType} = TLD.Node.Event.TRX_Sale.Order.Offers.{@offerBarcodeType}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXOrderCustOffers",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@Timestamp} = TLD.Node.Event.TRX_Sale.Order.{@Timestamp},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {Event.type} = TLD.Node.Event.{@Type},",
						"          {@POD} = TLD.Node.Event.TRX_Sale.{@POD},",
						"          {@saleType} = TLD.Node.Event.TRX_Sale.Order.{@saleType},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          Tender = TLD.Node.Event.TRX_Sale.Order.Tenders.Tender",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleTenderMain1",
						"FlattenSaleTenderMain1 foldDown(unroll(Tender),",
						"     mapColumn(",
						"          POS,",
						"          timestamp = {@Timestamp},",
						"          businessDate = {@businessDate},",
						"          storeId = {@storeId},",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          {Event.type},",
						"          POD = {@POD},",
						"          saleType = {@saleType},",
						"          status = {@status},",
						"          uniqueId = {@uniqueId},",
						"          baseaction = Tender.BaseAction,",
						"          Persisted = Tender.Persisted,",
						"          CardProviderID = Tender.CardProviderID,",
						"          CashlessData = Tender.CashlessData,",
						"          TaxOption = Tender.TaxOption,",
						"          SubtotalOption = Tender.SubtotalOption,",
						"          DiscountDescription = Tender.DiscountDescription,",
						"          CashlessTransactionID = Tender.CashlessTransactionID,",
						"          sourceValue = Tender.SourceTenders.SourceTender.{@sourceValue},",
						"          sourceCode = Tender.SourceTenders.SourceTender.{@sourceCode},",
						"          Tender",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleTenderMain2",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          SaleEvent = TLD.Node.Event.TRX_Sale.Order.EventsDetail.SaleEvent,",
						"          {@POD} = TLD.Node.Event.TRX_Sale.{@POD},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleStart1",
						"FlattenEVSaleStart1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          type = {@Type},",
						"          SaleEventtype = SaleEvent.{@Type},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          {@POD},",
						"          {@uniqueId},",
						"          DisabledChoices = SaleEvent.Ev_SaleStart.DisabledChoices,",
						"          TenderPersisted = SaleEvent.Ev_SaleStart.TenderPersisted,",
						"          MultiOrder = SaleEvent.Ev_SaleStart.MultiOrder,",
						"          {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleStart2",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          businessdate = TLD.{@businessDate},",
						"          storeid = TLD.{@storeId},",
						"          POS = TLD.Node.{@id},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          SaleEvent = TLD.Node.Event.TRX_Sale.Order.EventsDetail.SaleEvent,",
						"          {@POD} = TLD.Node.Event.TRX_Sale.{@POD},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@name} = TLD.Node.Event.Ev_SaleCustom.Info.{@name},",
						"          {@value} = TLD.Node.Event.Ev_SaleCustom.Info.{@value},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleChoice1",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          type = {@Type},",
						"          SaleEventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          {@uniqueId},",
						"          {@POD},",
						"          ChoiceCode = SaleEvent.Ev_SaleChoice.ChoiceCode,",
						"          ProductCode = SaleEvent.Ev_SaleChoice.ProductCode,",
						"          Quantity = SaleEvent.Ev_SaleChoice.Quantity,",
						"          {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleChoice2",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          SizeSelected = SaleEvent.Ev_ChangeSizeSelection.SizeSelected,",
						"          ProductCode = SaleEvent.Ev_ChangeSizeSelection.ProductCode,",
						"          Quantity = SaleEvent.Ev_ChangeSizeSelection.Quantity,",
						"          status = {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVChangeSizeSelection",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          {setsaletype.type} = SaleEvent.Ev_SetSaleType.Type,",
						"          ForceExhibition = SaleEvent.Ev_SetSaleType.ForceExhibition,",
						"          status = {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSetsaleType",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          Ev_SaleTotal = SaleEvent.Ev_SaleTotal,",
						"          status = {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleTotal",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleventtime = SaleEvent.{@Time},",
						"          saleventType = SaleEvent.{@Type},",
						"          TenderID = SaleEvent.Ev_AddTender.TenderID,",
						"          FaceValue = SaleEvent.Ev_AddTender.FaceValue,",
						"          TenderAmount = SaleEvent.Ev_AddTender.TenderAmount,",
						"          BaseAction = SaleEvent.Ev_AddTender.BaseAction,",
						"          Persisted = SaleEvent.Ev_AddTender.Persisted,",
						"          CardProviderID = SaleEvent.Ev_AddTender.CardProviderID,",
						"          CashlessData = SaleEvent.Ev_AddTender.CashlessData,",
						"          CashlessTransactionID = SaleEvent.Ev_AddTender.CashlessTransactionID,",
						"          PreAuthorization = SaleEvent.Ev_AddTender.PreAuthorization,",
						"          name = {@name},",
						"          value = {@value},",
						"          status = {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVAddTender",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          TenderType = TLD.Node.Event.TRX_TenderTable.TenderType",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXTenderTableType1",
						"FlattenRecTRXTenderTableType1 foldDown(unroll(TenderType),",
						"     mapColumn(",
						"          POS,",
						"          businessDate = {@businessDate},",
						"          storeId = {@storeId},",
						"          EventTime = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          {TenderType.tenderid} = TenderType.TenderId,",
						"          TenderFiscalIndex = TenderType.TenderFiscalIndex,",
						"          TenderName = TenderType.TenderName,",
						"          TenderCategory = TenderType.TenderCategory,",
						"          TaxOption = TenderType.TaxOption,",
						"          DefaultSkimLimit = TenderType.DefaultSkimLimit,",
						"          DefaultHaloLimit = TenderType.DefaultHaloLimit,",
						"          SubtotalOption = TenderType.SubtotalOption,",
						"          CurrencyDecimals = TenderType.CurrencyDecimals,",
						"          {tenderchange.type} = TenderType.TenderChange.{@type},",
						"          {tenderchange.id} = TenderType.TenderChange.{@id},",
						"          maxAllowed = TenderType.TenderChange.{@maxAllowed},",
						"          roundToMinAmount = TenderType.TenderChange.{@roundToMinAmount},",
						"          {creditsales.legacyid} = TenderType.CreditSales.{@LegacyId},",
						"          {foreigncurrency.legacyid} = TenderType.ForeignCurrency.{@LegacyId},",
						"          Rounding = TenderType.ForeignCurrency.{@Rounding},",
						"          Precision = TenderType.ForeignCurrency.{@Precision},",
						"          Orientation = TenderType.ForeignCurrency.{@Orientation},",
						"          ExchangeRate = TenderType.ForeignCurrency.{@ExchangeRate},",
						"          {electronicpayment.legacyid} = TenderType.ElectronicPayment.{@LegacyId},",
						"          {Giftcupon.legacyid} = TenderType.GiftCoupon.{@LegacyId},",
						"          Amount = TenderType.GiftCoupon.{@Amount},",
						"          OperatorDefined = TenderType.GiftCoupon.{@OperatorDefined}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXTenderTableType2",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          {info.value} = SaleEvent.Ev_SaleCustomInfo.Info.{@value},",
						"          {info.name} = SaleEvent.Ev_SaleCustomInfo.Info.{@name},",
						"          {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenCustomInfo",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          businessDate = TLD.{@businessDate},",
						"          storeId = TLD.{@storeId},",
						"          Time = TLD.Node.Event.{@Time},",
						"          RegId = TLD.Node.Event.{@RegId},",
						"          Type = TLD.Node.Event.{@Type},",
						"          {Info.code} = TLD.Node.Event.Ev_Custom.Info.{@code},",
						"          {Info.data} = TLD.Node.Event.Ev_Custom.Info.{@data}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecEVCustom",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@Timestamp} = TLD.Node.Event.TRX_Sale.Order.{@Timestamp},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          MainPOD = TLD.Node.Event.TRX_Sale.{@POD},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          {@endSaleTime} = TLD.Node.Event.TRX_Sale.Order.{@endSaleTime},",
						"          {@endSaleDate} = TLD.Node.Event.TRX_Sale.Order.{@endSaleDate},",
						"          {@startSaleTime} = TLD.Node.Event.TRX_Sale.Order.{@startSaleTime},",
						"          {@startSaleDate} = TLD.Node.Event.TRX_Sale.Order.{@startSaleDate},",
						"          {@orderSrc} = TLD.Node.Event.TRX_Sale.Order.{@orderSrc},",
						"          {@nonProductTax} = TLD.Node.Event.TRX_Sale.Order.{@nonProductTax},",
						"          {@totalTax} = TLD.Node.Event.TRX_Sale.Order.{@totalTax},",
						"          {@nonProductAmount} = TLD.Node.Event.TRX_Sale.Order.{@nonProductAmount},",
						"          {@totalAmount} = TLD.Node.Event.TRX_Sale.Order.{@totalAmount},",
						"          {@saleType} = TLD.Node.Event.TRX_Sale.Order.{@saleType},",
						"          {@booth} = TLD.Node.Event.TRX_Sale.Order.{@booth},",
						"          {@receiptNumber} = TLD.Node.Event.TRX_Sale.Order.{@receiptNumber},",
						"          {@side} = TLD.Node.Event.TRX_Sale.Order.{@side},",
						"          {@minor} = TLD.Node.Event.TRX_Sale.Order.{@minor},",
						"          {@major} = TLD.Node.Event.TRX_Sale.Order.{@major},",
						"          {@key} = TLD.Node.Event.TRX_Sale.Order.{@key},",
						"          {@kind} = TLD.Node.Event.TRX_Sale.Order.{@kind},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@foreignOrderId} = TLD.Node.Event.TRX_Sale.Order.{@foreignOrderId},",
						"          {@untilStore} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilStore},",
						"          {@untilTotal} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilTotal},",
						"          {@untilPay} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilPay},",
						"          {@itemsCount} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@itemsCount},",
						"          taxchainid = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@id},",
						"          taxchainamount = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@amount},",
						"          taxchainname = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@name},",
						"          {@baseAmount} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@baseAmount},",
						"          {@rate} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@rate}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXSaleOrder",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saletime = SaleEvent.{@Time},",
						"          saletype = SaleEvent.{@Type},",
						"          ProductCode = SaleEvent.Ev_SaleItem.ProductCode,",
						"          Quantity = SaleEvent.Ev_SaleItem.Quantity,",
						"          UpdatedQuantity = SaleEvent.Ev_SaleItem.UpdatedQuantity,",
						"          status = {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleItem",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          TLD = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@id} = TLD.Node.{@id},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@POD} = TLD.Node.Event.TRX_Refund.{@POD},",
						"          {@endSaleTime} = TLD.Node.Event.TRX_Refund.Order.{@endSaleTime},",
						"          {@endSaleDate} = TLD.Node.Event.TRX_Refund.Order.{@endSaleDate},",
						"          {@startSaleTime} = TLD.Node.Event.TRX_Refund.Order.{@startSaleTime},",
						"          {@startSaleDate} = TLD.Node.Event.TRX_Refund.Order.{@startSaleDate},",
						"          {@orderSrc} = TLD.Node.Event.TRX_Refund.Order.{@orderSrc},",
						"          {@nonProductTax} = TLD.Node.Event.TRX_Refund.Order.{@nonProductTax},",
						"          {@totalTax} = TLD.Node.Event.TRX_Refund.Order.{@totalTax},",
						"          {@nonProductAmount} = TLD.Node.Event.TRX_Refund.Order.{@nonProductAmount},",
						"          {@totalAmount} = TLD.Node.Event.TRX_Refund.Order.{@totalAmount},",
						"          {@saleType} = TLD.Node.Event.TRX_Refund.Order.{@saleType},",
						"          {@booth} = TLD.Node.Event.TRX_Refund.Order.{@booth},",
						"          {@receiptNumber} = TLD.Node.Event.TRX_Refund.Order.{@receiptNumber},",
						"          {@side} = TLD.Node.Event.TRX_Refund.Order.{@side},",
						"          {@minor} = TLD.Node.Event.TRX_Refund.Order.{@minor},",
						"          {@major} = TLD.Node.Event.TRX_Refund.Order.{@major},",
						"          {@key} = TLD.Node.Event.TRX_Refund.Order.{@key},",
						"          {@kind} = TLD.Node.Event.TRX_Refund.Order.{@kind},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Refund.Order.{@uniqueId},",
						"          {@untilStore} = TLD.Node.Event.TRX_Refund.Order.POSTimings.{@untilStore},",
						"          {@untilPay} = TLD.Node.Event.TRX_Refund.Order.POSTimings.{@untilPay},",
						"          {@untilTotal} = TLD.Node.Event.TRX_Refund.Order.POSTimings.{@untilTotal},",
						"          {@itemsCount} = TLD.Node.Event.TRX_Refund.Order.POSTimings.{@itemsCount},",
						"          TAXchainid = TLD.Node.Event.TRX_Refund.Order.TaxChain.{@id},",
						"          {@amount} = TLD.Node.Event.TRX_Refund.Order.TaxChain.{@amount},",
						"          {@name} = TLD.Node.Event.TRX_Refund.Order.TaxChain.{@name},",
						"          {@baseAmount} = TLD.Node.Event.TRX_Refund.Order.TaxChain.{@baseAmount},",
						"          {@rate} = TLD.Node.Event.TRX_Refund.Order.TaxChain.{@rate},",
						"          Info = TLD.Node.Event.TRX_Refund.Order.CustomInfo.Info,",
						"          SaleEvent = TLD.Node.Event.TRX_Refund.Order.EventsDetail.SaleEvent",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRefund",
						"FlattenRefund foldDown(unroll(Info),",
						"     mapColumn(",
						"          TLD,",
						"          {@storeId},",
						"          {@id},",
						"          {@RegId},",
						"          {@Type},",
						"          {@Time},",
						"          {@POD},",
						"          {@endSaleTime},",
						"          {@endSaleDate},",
						"          {@startSaleTime},",
						"          {@startSaleDate},",
						"          {@orderSrc},",
						"          {@nonProductTax},",
						"          {@totalTax},",
						"          {@nonProductAmount},",
						"          {@totalAmount},",
						"          {@saleType},",
						"          {@booth},",
						"          {@receiptNumber},",
						"          {@side},",
						"          {@minor},",
						"          {@major},",
						"          {@key},",
						"          {@kind},",
						"          {@uniqueId},",
						"          {@untilStore},",
						"          {@untilPay},",
						"          {@untilTotal},",
						"          {@itemsCount},",
						"          TAXchainid,",
						"          {@amount},",
						"          {@name},",
						"          {@baseAmount},",
						"          {@rate},",
						"          {info.name} = Info.{@name},",
						"          {info.value} = Info.{@value}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSalesCustomInfoRefund",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          businessdate = TLD.{@businessDate},",
						"          POD = TLD.Node.Event.TRX_Refund.{@POD},",
						"          Timestamp = TLD.Node.Event.TRX_Refund.Order.{@Timestamp},",
						"          {@storeId} = TLD.{@storeId},",
						"          POS = TLD.Node.{@id},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Refund.Order.{@uniqueId},",
						"          TenderId = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TenderId,",
						"          TenderKind = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TenderKind,",
						"          TenderName = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TenderName,",
						"          TenderQuantity = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TenderQuantity,",
						"          FaceValue = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.FaceValue,",
						"          TenderAmount = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TenderAmount,",
						"          BaseAction = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.BaseAction,",
						"          Persisted = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.Persisted,",
						"          CardProviderID = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.CardProviderID,",
						"          CashlessData = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.CashlessData,",
						"          CashlessTransactionID = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.CashlessTransactionID,",
						"          TaxOption = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TaxOption,",
						"          SubtotalOption = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.SubtotalOption,",
						"          DiscountDescription = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.DiscountDescription,",
						"          saleType = TLD.Node.Event.TRX_Refund.Order.{@saleType}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleTendersRefund",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@POD} = TLD.Node.Event.TRX_Refund.{@POD},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Refund.Order.{@uniqueId},",
						"          SaleEvent = TLD.Node.Event.TRX_Refund.Order.EventsDetail.SaleEvent",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          DisabledChoices = SaleEvent.Ev_SaleStart.DisabledChoices,",
						"          MultiOrder = SaleEvent.Ev_SaleStart.MultiOrder,",
						"          TenderPersisted = SaleEvent.Ev_SaleStart.TenderPersisted",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleStartRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          ProductCode = SaleEvent.Ev_SaleItem.ProductCode,",
						"          Quantity = SaleEvent.Ev_SaleItem.Quantity,",
						"          UpdatedQuantity = SaleEvent.Ev_SaleItem.UpdatedQuantity",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleItemRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          ChoiceCode = SaleEvent.Ev_SaleChoice.ChoiceCode,",
						"          ProductCode = SaleEvent.Ev_SaleChoice.ProductCode,",
						"          Quantity = SaleEvent.Ev_SaleChoice.Quantity",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleChoiceRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          ForceExhibition = SaleEvent.Ev_SetSaleType.ForceExhibition,",
						"          {set.sale.Type} = SaleEvent.Ev_SetSaleType.Type",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEvSetSaleTypeRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          SaleEventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          Ev_SaleTotal = SaleEvent.Ev_SaleTotal",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleTotalRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          TenderID = SaleEvent.Ev_AddTender.TenderID,",
						"          FaceValue = SaleEvent.Ev_AddTender.FaceValue,",
						"          TenderAmount = SaleEvent.Ev_AddTender.TenderAmount,",
						"          BaseAction = SaleEvent.Ev_AddTender.BaseAction,",
						"          Persisted = SaleEvent.Ev_AddTender.Persisted,",
						"          CardProviderID = SaleEvent.Ev_AddTender.CardProviderID,",
						"          CashlessData = SaleEvent.Ev_AddTender.CashlessData,",
						"          CashlessTransactionID = SaleEvent.Ev_AddTender.CashlessTransactionID,",
						"          PreAuthorization = SaleEvent.Ev_AddTender.PreAuthorization",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVAddTenderRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          SaleEventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          saleendType = SaleEvent.Ev_SaleEnd.Type",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleEndRefund",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {SaleEvent.time} = SaleEvent.{@Time},",
						"          {saleevent.type} = SaleEvent.{@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          {@name},",
						"          {@value},",
						"          {@status},",
						"          SALEENDType = SaleEvent.Ev_SaleEnd.Type",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleEnd",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event.TRX_Sale.Order.Item),",
						"     mapColumn(",
						"          businessDate = TLD.{@businessDate},",
						"          storeId = TLD.{@storeId},",
						"          pos = TLD.Node.{@id},",
						"          RegId = TLD.Node.Event.{@RegId},",
						"          Time = TLD.Node.Event.{@Time},",
						"          Type = TLD.Node.Event.{@Type},",
						"          itemBDPrice = TLD.Node.Event.TRX_Sale.Order.Item.{@BDPrice},",
						"          itemBDTax = TLD.Node.Event.TRX_Sale.Order.Item.{@BDTax},",
						"          itemBPPrice = TLD.Node.Event.TRX_Sale.Order.Item.{@BPPrice},",
						"          itemBPTax = TLD.Node.Event.TRX_Sale.Order.Item.{@BPTax},",
						"          itemaction = TLD.Node.Event.TRX_Sale.Order.Item.{@action},",
						"          itemcategory = TLD.Node.Event.TRX_Sale.Order.Item.{@category},",
						"          itemchgAfterTotal = TLD.Node.Event.TRX_Sale.Order.Item.{@chgAfterTotal},",
						"          itemcode = TLD.Node.Event.TRX_Sale.Order.Item.{@code},",
						"          itemdayPart = TLD.Node.Event.TRX_Sale.Order.Item.{@dayPart},",
						"          itemdepartment = TLD.Node.Event.TRX_Sale.Order.Item.{@department},",
						"          itemdepartmentClass = TLD.Node.Event.TRX_Sale.Order.Item.{@departmentClass},",
						"          itemdepartmentSubClass = TLD.Node.Event.TRX_Sale.Order.Item.{@departmentSubClass},",
						"          itemdescription = TLD.Node.Event.TRX_Sale.Order.Item.{@description},",
						"          itemdisplayOrder = TLD.Node.Event.TRX_Sale.Order.Item.{@displayOrder},",
						"          itemfamilyGroup = TLD.Node.Event.TRX_Sale.Order.Item.{@familyGroup},",
						"          itemgrillModifier = TLD.Node.Event.TRX_Sale.Order.Item.{@grillModifier},",
						"          itemgrillQty = TLD.Node.Event.TRX_Sale.Order.Item.{@grillQty},",
						"          itemid = TLD.Node.Event.TRX_Sale.Order.Item.{@id},",
						"          itemlevel = TLD.Node.Event.TRX_Sale.Order.Item.{@level},",
						"          itemqty = TLD.Node.Event.TRX_Sale.Order.Item.{@qty},",
						"          itemqtyPromo = TLD.Node.Event.TRX_Sale.Order.Item.{@qtyPromo},",
						"          itemqtyVoided = TLD.Node.Event.TRX_Sale.Order.Item.{@qtyVoided},",
						"          itemsolvedChoice = TLD.Node.Event.TRX_Sale.Order.Item.{@solvedChoice},",
						"          itemtotalPrice = TLD.Node.Event.TRX_Sale.Order.Item.{@totalPrice},",
						"          itemtotalTax = TLD.Node.Event.TRX_Sale.Order.Item.{@totalTax},",
						"          itemtype = TLD.Node.Event.TRX_Sale.Order.Item.{@type},",
						"          itemunitPrice = TLD.Node.Event.TRX_Sale.Order.Item.{@unitPrice},",
						"          itemunitTax = TLD.Node.Event.TRX_Sale.Order.Item.{@unitTax},",
						"          Itemitem = TLD.Node.Event.TRX_Sale.Order.Item.Item,",
						"          itemtaxchainid = TLD.Node.Event.TRX_Sale.Order.Item.TaxChain.{@id},",
						"          itemtaxchainamount = TLD.Node.Event.TRX_Sale.Order.Item.TaxChain.{@amount},",
						"          itemtaxchainbaseAmount = TLD.Node.Event.TRX_Sale.Order.Item.TaxChain.{@baseAmount},",
						"          itemtaxchainname = TLD.Node.Event.TRX_Sale.Order.Item.TaxChain.{@name},",
						"          itemtaxchainrate = TLD.Node.Event.TRX_Sale.Order.Item.TaxChain.{@rate},",
						"          beforeOfferPrice = TLD.Node.Event.TRX_Sale.Order.Item.Offers.{@beforeOfferPrice},",
						"          discountAmount = TLD.Node.Event.TRX_Sale.Order.Item.Offers.{@discountAmount},",
						"          discountType = TLD.Node.Event.TRX_Sale.Order.Item.Offers.{@discountType},",
						"          offerId = TLD.Node.Event.TRX_Sale.Order.Item.Offers.{@offerId},",
						"          POD = TLD.Node.Event.TRX_Sale.{@POD},",
						"          status = TLD.Node.Event.TRX_Sale.{@status},",
						"          Timestamp = TLD.Node.Event.TRX_Sale.Order.{@Timestamp},",
						"          uniqueId = TLD.Node.Event.TRX_Sale.Order.{@uniqueId}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleItem1",
						"FlattenSaleItem1 foldDown(unroll(Itemitem),",
						"     mapColumn(",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          itemBDPrice,",
						"          itemBDTax,",
						"          itemBPPrice,",
						"          itemBPTax,",
						"          itemaction,",
						"          itemcategory,",
						"          itemchgAfterTotal,",
						"          itemcode,",
						"          itemdayPart,",
						"          itemdepartment,",
						"          itemdepartmentClass,",
						"          itemdepartmentSubClass,",
						"          itemdescription,",
						"          itemdisplayOrder,",
						"          itemfamilyGroup,",
						"          itemgrillModifier,",
						"          itemgrillQty,",
						"          itemid,",
						"          itemlevel,",
						"          itemqty,",
						"          itemqtyPromo,",
						"          itemqtyVoided,",
						"          itemsolvedChoice,",
						"          itemtotalPrice,",
						"          itemtotalTax,",
						"          itemtype,",
						"          itemunitPrice,",
						"          itemunitTax,",
						"          itemitemBDPrice = Itemitem.{@BDPrice},",
						"          itemitemBDTax = Itemitem.{@BDTax},",
						"          itemitemBPPrice = Itemitem.{@BPPrice},",
						"          itemitemBPTax = Itemitem.{@BPTax},",
						"          itemitemaction = Itemitem.{@action},",
						"          itemitemcategory = Itemitem.{@category},",
						"          itemitemchgAfterTotal = Itemitem.{@chgAfterTotal},",
						"          itemitemcode = Itemitem.{@code},",
						"          itemitemdayPart = Itemitem.{@dayPart},",
						"          itemitemdepartment = Itemitem.{@department},",
						"          itemitemdepartmentClass = Itemitem.{@departmentClass},",
						"          itemitemdepartmentSubClass = Itemitem.{@departmentSubClass},",
						"          itemitemdescription = Itemitem.{@description},",
						"          itemitemdisplayOrder = Itemitem.{@displayOrder},",
						"          itemitemfamilyGroup = Itemitem.{@familyGroup},",
						"          itemitemgrillModifier = Itemitem.{@grillModifier},",
						"          itemitemgrillQty = Itemitem.{@grillQty},",
						"          itemitemid = Itemitem.{@id},",
						"          itemitemisUpcharge = Itemitem.{@isUpcharge},",
						"          itemitemlevel = Itemitem.{@level},",
						"          itemitemqty = Itemitem.{@qty},",
						"          itemitemqtyPromo = Itemitem.{@qtyPromo},",
						"          itemitemqtyVoided = Itemitem.{@qtyVoided},",
						"          itemitemsolvedChoice = Itemitem.{@solvedChoice},",
						"          itemitemtotalPrice = Itemitem.{@totalPrice},",
						"          itemitemtotalTax = Itemitem.{@totalTax},",
						"          itemitemtype = Itemitem.{@type},",
						"          itemitemunitPrice = Itemitem.{@unitPrice},",
						"          itemitemunitTax = Itemitem.{@unitTax},",
						"          tItem = Itemitem.Item,",
						"          itemitemtaxchainamount = Itemitem.TaxChain.{@amount},",
						"          itemitemtaxchainbaseAmount = Itemitem.TaxChain.{@baseAmount},",
						"          itemitemtaxchainid = Itemitem.TaxChain.{@id},",
						"          itemitemtaxchainname = Itemitem.TaxChain.{@name},",
						"          itemitemtaxchainrate = Itemitem.TaxChain.{@rate},",
						"          itemtaxchainid,",
						"          itemtaxchainamount,",
						"          itemtaxchainbaseAmount,",
						"          itemtaxchainname,",
						"          itemtaxchainrate,",
						"          beforeOfferPrice,",
						"          discountAmount,",
						"          discountType,",
						"          offerId,",
						"          status,",
						"          POD,",
						"          Timestamp,",
						"          uniqueId",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleItem2",
						"FlattenSaleItem2 foldDown(unroll(tItem),",
						"     mapColumn(",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          itemBDPrice,",
						"          itemBDTax,",
						"          itemBPPrice,",
						"          itemBPTax,",
						"          itemaction,",
						"          itemcategory,",
						"          itemchgAfterTotal,",
						"          itemcode,",
						"          itemdayPart,",
						"          itemdepartment,",
						"          itemdepartmentClass,",
						"          itemdepartmentSubClass,",
						"          itemdescription,",
						"          itemdisplayOrder,",
						"          itemfamilyGroup,",
						"          itemgrillModifier,",
						"          itemgrillQty,",
						"          itemid,",
						"          itemlevel,",
						"          itemqty,",
						"          itemqtyPromo,",
						"          itemqtyVoided,",
						"          itemsolvedChoice,",
						"          itemtotalPrice,",
						"          itemtotalTax,",
						"          itemtype,",
						"          itemunitPrice,",
						"          itemunitTax,",
						"          itemitemBDPrice,",
						"          itemitemBDTax,",
						"          itemitemBPPrice,",
						"          itemitemBPTax,",
						"          itemitemaction,",
						"          itemitemcategory,",
						"          itemitemchgAfterTotal,",
						"          itemitemcode,",
						"          itemitemdayPart,",
						"          itemitemdepartment,",
						"          itemitemdepartmentClass,",
						"          itemitemdepartmentSubClass,",
						"          itemitemdescription,",
						"          itemitemdisplayOrder,",
						"          itemitemfamilyGroup,",
						"          itemitemgrillModifier,",
						"          itemitemgrillQty,",
						"          itemitemid,",
						"          itemitemisUpcharge,",
						"          itemitemlevel,",
						"          itemitemqty,",
						"          itemitemqtyPromo,",
						"          itemitemsolvedChoice,",
						"          itemitemtotalPrice,",
						"          itemitemtotalTax,",
						"          itemitemtype,",
						"          itemitemunitPrice,",
						"          itemitemunitTax,",
						"          titemBDPrice = tItem.{@BDPrice},",
						"          titemBDTax = tItem.{@BDTax},",
						"          titemBPPrice = tItem.{@BPPrice},",
						"          titemBPTax = tItem.{@BPTax},",
						"          titemaction = tItem.{@action},",
						"          titemcategory = tItem.{@category},",
						"          titemchgAfterTotal = tItem.{@chgAfterTotal},",
						"          titemcode = tItem.{@code},",
						"          titemdayPart = tItem.{@dayPart},",
						"          titemdepartment = tItem.{@department},",
						"          titemdepartmentClass = tItem.{@departmentClass},",
						"          titemdepartmentSubClass = tItem.{@departmentSubClass},",
						"          titemdescription = tItem.{@description},",
						"          titemdisplayOrder = tItem.{@displayOrder},",
						"          titemfamilyGroup = tItem.{@familyGroup},",
						"          titemgrillModifier = tItem.{@grillModifier},",
						"          titemgrillQty = tItem.{@grillQty},",
						"          titemid = tItem.{@id},",
						"          titemisUpcharge = tItem.{@isUpcharge},",
						"          titemlevel = tItem.{@level},",
						"          titemqty = tItem.{@qty},",
						"          titemqtyPromo = tItem.{@qtyPromo},",
						"          titemqtyVoided = tItem.{@qtyVoided},",
						"          titemsolvedChoice = tItem.{@solvedChoice},",
						"          titemtotalPrice = tItem.{@totalPrice},",
						"          titemtotalTax = tItem.{@totalTax},",
						"          titemtype = tItem.{@type},",
						"          titemunitPrice = tItem.{@unitPrice},",
						"          titemunitTax = tItem.{@unitTax},",
						"          titemtaxchainamount = tItem.TaxChain.{@amount},",
						"          titemtaxchainbaseAmount = tItem.TaxChain.{@baseAmount},",
						"          titemtaxchainid = tItem.TaxChain.{@id},",
						"          titemtaxchainname = tItem.TaxChain.{@name},",
						"          titemtaxchainrate = tItem.TaxChain.{@rate},",
						"          itemitemtaxchainamount,",
						"          itemitemtaxchainbaseAmount,",
						"          itemitemtaxchainid,",
						"          itemitemtaxchainname,",
						"          itemitemtaxchainrate,",
						"          itemtaxchainid,",
						"          itemtaxchainamount,",
						"          temtaxchainbaseAmount = itemtaxchainbaseAmount,",
						"          itemtaxchainname,",
						"          itemtaxchainrate,",
						"          beforeOfferPrice,",
						"          discountAmount,",
						"          discountType,",
						"          offerId,",
						"          uniqueId,",
						"          status,",
						"          POD,",
						"          Timestamp",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleItem3",
						"FlattenSaleItem1 filter(equals(Type, 'TRX_Sale')) ~> filter1",
						"FlattenSaleItem3 filter(equals(Type, 'TRX_Sale')) ~> filter2",
						"FlattenSaleItem2 filter(equals(Type, 'TRX_Sale')) ~> filter3",
						"XMLSourceFile sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTLDProductionStatus.businessdate} = TLD.{@businessDate},",
						"          {RecTLDProductionStatus.checkPoint} = TLD.{@checkPoint},",
						"          {RecTLDProductionStatus.Isend} = TLD.{@end},",
						"          {RecTLDProductionStatus.logVersion} = TLD.{@productionStatus},",
						"          {RecTLDProductionStatus.storeId} = TLD.{@storeId},",
						"          {RecTLDProductionStatus.swVersion} = TLD.{@swVersion},",
						"          status = TLD.{@productionStatus}",
						"     )) ~> RecTLDProductionStatus",
						"FlattenRecNode sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecNode.businessDate} = {@businessDate},",
						"          {RecNode.storeId} = {@storeId},",
						"          {RecNode.id} = {@id},",
						"          {RecNode.nodestatus} = {@nodeStatus}",
						"     )) ~> RecNode",
						"FlattenRecEventNode sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecEvent.id} = RecEventid,",
						"          {RecEvent.businessDate} = {@businessDate},",
						"          {RecEvent.storeId} = {@storeId},",
						"          {RecEvent.Event_Time} = {@Time},",
						"          {RecEvent.Type} = {@Type},",
						"          {RecEvent.RegId} = {@RegId}",
						"     )) ~> RecEvent",
						"FlattenRecTRXInitGlobal sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTRX_InitGTotal.id} = id,",
						"          {RecTRX_InitGTotal.businessDate} = {@businessDate},",
						"          {RecTRX_InitGTotal.storeId} = {@storeId},",
						"          {RecTRX_InitGTotal.Event_Time} = {@Time},",
						"          {RecTRX_InitGTotal.Type} = {@Type},",
						"          {RecTRX_InitGTotal.RegId} = {@RegId},",
						"          {RecTRX_InitGTotal.amount} = {@amount}",
						"     )) ~> RecTRXInitGTotal",
						"FlattenTRXSMSState sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTRX_SetSMState.id} = id,",
						"          {RecTRX_SetSMState.businessDate} = {@businessDate},",
						"          {RecTRX_SetSMState.storeId} = {@storeId},",
						"          {RecTRX_SetSMState.Event_Time} = {@Time},",
						"          {RecTRX_SetSMState.Type} = {@Type},",
						"          {RecTRX_SetSMState.RegId} = {@RegId},",
						"          {RecTRX_SetSMState.PODId} = {@PODId},",
						"          {RecTRX_SetSMState.POSState} = POSState,",
						"          {RecTRX_SetSMState.CrewId} = CrewId,",
						"          {RecTRX_SetSMState.CrewName} = CrewName,",
						"          {RecTRX_SetSMState.CrewSecurityLevel} = CrewSecurityLevel,",
						"          {RecTRX_SetSMState.LoginTime} = LoginTime,",
						"          {RecTRX_SetSMState.LogoutTime} = LogoutTime,",
						"          {RecTRX_SetSMState.InitialFloat} = InitialFloat",
						"     )) ~> RecTRXSetSMState",
						"FlattenTRXBaseConfig sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          {Rec_TRX_BaseConfig.POS} = POS,",
						"          {Rec_TRX_BaseConfig.businessDate} = {@businessDate},",
						"          {Rec_TRX_BaseConfig.Event_Time} = {@Time},",
						"          {Rec_TRX_BaseConfig.RegId} = {@RegId},",
						"          {Rec_TRX_BaseConfig.Type} = {@Type},",
						"          {Rec_TRX_BaseConfig.POD} = {@POD},",
						"          {Rec_TRX_BaseConfig.MenuPriceBasis} = MenuPriceBasis,",
						"          {Rec_TRX_BaseConfig.WeekEndBreakfastStartTime} = WeekEndBreakfastStartTime,",
						"          {Rec_TRX_BaseConfig.WeekEndBreakfastStopTime} = WeekEndBreakfastStopTime,",
						"          {Rec_TRX_BaseConfig.WeekDayBreakfastStartTime} = WeekDayBreakfastStartTime,",
						"          {Rec_TRX_BaseConfig.WeekDayBreakfastStopTime} = WeekDayBreakfastStopTime,",
						"          {Rec_TRX_BaseConfig.DecimalPlaces} = DecimalPlaces,",
						"          {Rec_TRX_BaseConfig.CheckRefund} = CheckRefund,",
						"          {Rec_TRX_BaseConfig.GrandTotalFlag} = GrandTotalFlag,",
						"          {Rec_TRX_BaseConfig.StoreId} = StoreId,",
						"          {Rec_TRX_BaseConfig.StoreName} = StoreName,",
						"          {Rec_TRX_BaseConfig.AcceptNegativeQty} = AcceptNegativeQty,",
						"          {Rec_TRX_BaseConfig.AcceptZeroPricePMix} = AcceptZeroPricePMix,",
						"          {Rec_TRX_BaseConfig.FloatPriceTenderId} = FloatPriceTenderId",
						"     )) ~> RecTRXBaseConfig",
						"FlattenTRXBaseConfigposconfig sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTRXBaseConfigposconfig.POS} = POS,",
						"          {RecTRXBaseConfigposconfig.businessDate} = {@businessDate},",
						"          {RecTRXBaseConfigposconfig.storeId} = {@storeId},",
						"          {RecTRXBaseConfigposconfig.Time} = {@Time},",
						"          {RecTRXBaseConfigposconfig.RegId} = {@RegId},",
						"          {RecTRXBaseConfigposconfig.Type} = {@Type},",
						"          {RecTRXBaseConfigposconfig.POD} = {@POD},",
						"          {RecTRXBaseConfigposconfig.CountTCsFullDiscEM} = CountTCsFullDiscEM,",
						"          {RecTRXBaseConfigposconfig.RefundBehaviour} = RefundBehaviour,",
						"          {RecTRXBaseConfigposconfig.OverringBehaviour} = OverringBehaviour",
						"     )) ~> RecTRXBaseConfigposconfig",
						"FlattenRecTRXDayParts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          DaypartsPOS = POS,",
						"          DaypartsbusinessDate = {@businessDate},",
						"          DaypartsstoreId = {@storeId},",
						"          Event_Time = {@Time},",
						"          Regid = {@id},",
						"          EventType = {@Type},",
						"          name = {@name},",
						"          Mondayend,",
						"          Mondaystart,",
						"          Tuesdayend,",
						"          Tuesdaystart,",
						"          Wednesdayend,",
						"          Wednesdaystart,",
						"          Thursdayend,",
						"          Thursdaystart,",
						"          fridayend,",
						"          fridaystart,",
						"          saturdayend,",
						"          saturdaystart,",
						"          sundayend,",
						"          sundaystart,",
						"          pod = POD",
						"     )) ~> RecTRXDayParts",
						"FlattenRecTrxTendertableTenderflag4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          Rec_tendertable_tenderflagTenderFlag = TenderFlag,",
						"          POS,",
						"          {RecTRX_tendertable_tenderflag.businessDate} = {@businessDate},",
						"          {RecTRX_tendertable_tenderflag.storeId} = {@storeId},",
						"          {RecTRX_tendertable_tenderflag.Time} = {@Time},",
						"          {RecTRX_tendertable_tenderflag.RegId} = {@RegId},",
						"          EventType,",
						"          TenderId,",
						"          TenderName,",
						"          TenderCategory",
						"     )) ~> RecTrxTendertableTenderflag",
						"FlattenRecTRXTaxTabletype sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTRXTaxTable.POS} = POS,",
						"          {RecTRXTaxTable.businessDate} = {@businessDate},",
						"          RecTRXTaxTablestoreId = {@storeId},",
						"          RecTRXTaxTableTime = {@Time},",
						"          RecTRXTaxTableRegId = {@RegId},",
						"          RecTRXTaxTableType = {@Type},",
						"          POD = {sale.pod},",
						"          {RecTRXTaxTable.TaxId} = TaxId,",
						"          TaxDescription,",
						"          TaxRate,",
						"          TaxBasis,",
						"          TaxCalcType,",
						"          {RecTRXTaxTable.Rounding} = {@Rounding},",
						"          Precision",
						"     )) ~> RecTRXTaxTabletype",
						"FlattenRecTRXDayOpen sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          RecTRX_DayOpenPOS = POS,",
						"          {main.businessDate} = {@businessDate},",
						"          {RecTRX_DayOpen.storeId} = {@storeId},",
						"          RecTRX_DayOpenEventTime = {@Time},",
						"          RecTRX_DayOpenRegId = {@RegId},",
						"          {RecTRX_DayOpen.Type} = {@Type},",
						"          {RecTRX_DayOpen.Businessdatesub} = {TRX_DayOpen.Businessdate}",
						"     )) ~> RecTRXDayOpen",
						"FlattenTRXGetAuthorization sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          businessDate = {@businessDate},",
						"          {TRXGetAuthorization.storeId} = {@storeId},",
						"          {TRXGetAuthorization.EventTime} = {@Time},",
						"          {TRXGetAuthorization.RegId} = {@RegId},",
						"          {TRXGetAuthorization.Type} = {@Type},",
						"          ManagerID,",
						"          ManagerName,",
						"          SecurityLevel,",
						"          Password,",
						"          IsLogged,",
						"          ExpirationDate",
						"     )) ~> TRXGetAuthorization",
						"FlattenTRXOperLogin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          {TRXOperLogin.POS} = POS,",
						"          businessdate = {@businessDate},",
						"          {TRXOperLogin.storeId} = {@storeId},",
						"          {TRXOperLogin.eventTime} = {@Time},",
						"          TRXOperLoginRegId = {@RegId},",
						"          {TRXOperLogin.eventType} = {@Type},",
						"          CrewID,",
						"          CrewName,",
						"          CrewSecurityLevel,",
						"          POD,",
						"          RemotePOD,",
						"          AutoLogin",
						"     )) ~> TRXOperLogin",
						"FlattenRecEvDrawerClose sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          RecEvDrawerclosePOS = POS,",
						"          businessdate,",
						"          {RecEvDrawerclose.storeId} = {@storeId},",
						"          {RecEvDrawerclose.eventTime} = {@Time},",
						"          RecEvDrawercloseRegId = {@RegId},",
						"          RecEvDrawercloseEventType = {@Type},",
						"          UnauthorizedOpen = {@UnauthorizedOpen},",
						"          TotalOpenTime = {@TotalOpenTime}",
						"     )) ~> RecEvDrawerclosee",
						"FlattenRecRXRegTransfers sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecRXRegTransfers.Businessdate} = Businessdate,",
						"          {RecRXRegTransfers.storeId} = {@storeId},",
						"          {RecRXRegTransfers.RegId} = {@RegId},",
						"          {RecRXRegTransfers.eventTime} = {@Time},",
						"          {RecRXRegTransfers.eventType} = {@Type},",
						"          {RecRXRegTransfers.Amount} = {@Amount},",
						"          {RecRXRegTransfers.FaceValue} = {@FaceValue},",
						"          {RecRXRegTransfers.OperType} = {@OperType},",
						"          {RecRXRegTransfers.TenderID} = {@TenderID},",
						"          {RecRXRegTransfers.TenderName} = {@TenderName},",
						"          {RecRXRegTransfers.TransferType} = {@TransferType}",
						"     )) ~> RecRXRegTransfers",
						"FlattenSalesCustomInfoDetail1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          RECTRXsalebusinessDate = {@businessDate},",
						"          RECTRXsalestoreId = {@storeId},",
						"          RECTRXsaleEventTime = {@Time},",
						"          RECTRXsaleRegId = {@RegId},",
						"          RECTRXsaleEventType = {@Type},",
						"          RECTRXsalePOD = {@POD},",
						"          RECTRXsalestatus = {@status},",
						"          EndsaleTime,",
						"          RECTRXsaleendSaleDate = {@endSaleDate},",
						"          RECTRXsalestartSaleTime = {@startSaleTime},",
						"          RECTRXsalestartSaleDate = {@startSaleDate},",
						"          RECTRXsaleorderSrc = {@orderSrc},",
						"          nonProductTax = {@nonProductTax},",
						"          totalTax = {@totalTax},",
						"          nonProductAmount = {@nonProductAmount},",
						"          totalAmount = {@totalAmount},",
						"          saleType = {@saleType},",
						"          booth = {@booth},",
						"          receiptNumber = {@receiptNumber},",
						"          side = {@side},",
						"          minor = {@minor},",
						"          major = {@major},",
						"          key = {@key},",
						"          kind = {@kind},",
						"          uniqueId = {@uniqueId},",
						"          Timestamp = {@Timestamp},",
						"          foreignOrderId = {@foreignOrderId},",
						"          untilStore = {@untilStore},",
						"          untilTotal = {@untilTotal},",
						"          untilPay = {@untilPay},",
						"          itemsCount = {@itemsCount},",
						"          TaxChainId,",
						"          amount = {@amount},",
						"          name = {@name},",
						"          baseAmount = {@baseAmount},",
						"          rate = {@rate}",
						"     )) ~> RECTRXsale",
						"FlattenSalesCustomInfoDetail2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          SalesCustomInfoDetailbusinessDate = {@businessDate},",
						"          SalesCustomInfoDetailstoreId = {@storeId},",
						"          SalesCustomInfoDetailEventTime = {@Time},",
						"          SalesCustomInfoDetailRegId = {@RegId},",
						"          {SalesCustomInfoDetail.Type} = {@Type},",
						"          {SalesCustomInfoDetail.totalAmount} = {@totalAmount},",
						"          {SalesCustomInfoDetail.receiptNumber} = {@receiptNumber},",
						"          {SalesCustomInfoDetail.minor} = {@minor},",
						"          major = {@major},",
						"          key = {@key},",
						"          kind = {@kind},",
						"          uniqueId = {@uniqueId},",
						"          Timestamp = {@Timestamp},",
						"          foreignOrderId = {@foreignOrderId},",
						"          customInfoname,",
						"          custominfovalue,",
						"          status = {@status}",
						"     )) ~> SalesCustomInfoDetail",
						"FlattenTRXOrderPromotions sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          BusinessDate,",
						"          {TRXOrderPromotions.storeId} = {@storeId},",
						"          {TRXOrderPromotions.PromotionTime} = {@Time},",
						"          RegId = {@RegId},",
						"          TRXOrderPromotionsType = {@Type},",
						"          uniqueId = {@uniqueId},",
						"          promotionId = {@promotionId},",
						"          promotionName = {@promotionName},",
						"          promotionCounter = {@promotionCounter},",
						"          discountType = {@discountType},",
						"          discountAmount = {@discountAmount},",
						"          offerId = {@offerId},",
						"          exclusive = {@exclusive},",
						"          promotionOnTender = {@promotionOnTender},",
						"          countTowardsPromotionLimit = {@countTowardsPromotionLimit},",
						"          returnedValue = {@returnedValue},",
						"          status = {@status}",
						"     )) ~> TRXOrderPromotions",
						"FlattenTRXOrderCustOffers sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          TRXOrderCustOffersBusinessdate = Businessdate,",
						"          Storeid,",
						"          {TRXOrderCustOffers.offerTime} = {@Time},",
						"          RegId = {@RegId},",
						"          TRXOrderCustOffersType = {@Type},",
						"          uniqueId = {@uniqueId},",
						"          offerId = {@offerId},",
						"          customerId = {@customerId},",
						"          offerName = {@offerName},",
						"          override = {@override},",
						"          applied = {@applied},",
						"          promotionId = {@promotionId},",
						"          offerBarcodeType = {@offerBarcodeType},",
						"          status = {@status}",
						"     )) ~> TRXOrderCustOffers",
						"FlattenSalesCustomInfoDetail1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTRXReduction.POS} = POS,",
						"          {RecTRXReduction.businessDate} = {@businessDate},",
						"          RecTRXReductionstoreId = {@storeId},",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          EndsaleTime,",
						"          endSaleDate = {@endSaleDate},",
						"          startSaleTime = {@startSaleTime},",
						"          startSaleDate = {@startSaleDate},",
						"          nonProductAmount = {@nonProductAmount},",
						"          totalAmount = {@totalAmount},",
						"          saleType = {@saleType},",
						"          receiptNumber = {@receiptNumber},",
						"          side = {@side},",
						"          minor = {@minor},",
						"          major = {@major},",
						"          key = {@key},",
						"          kind = {@kind},",
						"          uniqueId = {@uniqueId},",
						"          foreignOrderId = {@foreignOrderId},",
						"          AfterTotal,",
						"          Amount,",
						"          AmountAfterTotal,",
						"          AmountBeforeTotal,",
						"          BeforeTotal,",
						"          Qty,",
						"          status = {@status},",
						"          itemcount = {@itemsCount}",
						"     )) ~> RecTRXReduction",
						"FlattenEVSaleStart2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          EvsalestartPOS = POS,",
						"          EvsalestartbusinessDate = {@businessDate},",
						"          EvsalestartstoreId = {@storeId},",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          type,",
						"          SaleEventtype,",
						"          saleeventtime,",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          DisabledChoices,",
						"          TenderPersisted,",
						"          MultiOrder,",
						"          status = {@status}",
						"     )) ~> EVSaleStart",
						"FlattenEVSaleChoice2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          {Evsalechoice.businessdate} = businessdate,",
						"          {Evsalechoice.storeid} = storeid,",
						"          POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          type,",
						"          SaleEventtime,",
						"          saleeventtype,",
						"          uniqueId = {@uniqueId},",
						"          POD = {@POD},",
						"          ChoiceCode,",
						"          ProductCode,",
						"          Quantity,",
						"          status = {@status}",
						"     )) ~> EVSaleChoice",
						"FlattenEVChangeSizeSelection sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          {Evchangesizeselection.businessdate} = businessdate,",
						"          {Evchangesizeselection.storeid} = storeid,",
						"          POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          SizeSelected,",
						"          ProductCode,",
						"          Quantity,",
						"          status",
						"     )) ~> EVChangeSizeSelection",
						"FlattenEVSetsaleType sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          {Evsetsaletype.businessdate} = businessdate,",
						"          Evsetsaletypestoreid = storeid,",
						"          POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          setsaletype = {setsaletype.type},",
						"          ForceExhibition,",
						"          status",
						"     )) ~> EVSetsaleType",
						"FlattenEVSaleTotal sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          {EvSaleTotal.businessdate} = businessdate,",
						"          {EvSaleTotal.storeid} = storeid,",
						"          POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          Ev_SaleTotal,",
						"          status",
						"     )) ~> EVSaleTotal",
						"FlattenEVAddTender sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          saleventtime,",
						"          saleventType,",
						"          TenderID,",
						"          FaceValue,",
						"          TenderAmount,",
						"          BaseAction,",
						"          Persisted,",
						"          CardProviderID,",
						"          CashlessData,",
						"          CashlessTransactionID,",
						"          PreAuthorization,",
						"          name,",
						"          value,",
						"          status",
						"     )) ~> EVAddTender",
						"FlattenRecTRXTenderTableType2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTrxtendertable.POS} = POS,",
						"          {RecTrxtendertable.businessDate} = businessDate,",
						"          {RecTrxtendertable.storeId} = storeId,",
						"          EventTime,",
						"          RegId,",
						"          Type,",
						"          tenderid = {TenderType.tenderid},",
						"          TenderFiscalIndex,",
						"          TenderName,",
						"          TenderCategory,",
						"          TaxOption,",
						"          DefaultSkimLimit,",
						"          DefaultHaloLimit,",
						"          SubtotalOption,",
						"          CurrencyDecimals,",
						"          tenderchangetype = {tenderchange.type},",
						"          tenderchangeid = {tenderchange.id},",
						"          maxAllowed,",
						"          roundToMinAmount,",
						"          {Creditsales.legacyid} = {creditsales.legacyid},",
						"          {foreigncurrency.legacyid},",
						"          Rounding,",
						"          Precision,",
						"          Orientation,",
						"          ExchangeRate,",
						"          {electronicpayment.legacyid},",
						"          {Giftcupon.legacyid},",
						"          Amount,",
						"          OperatorDefined",
						"     )) ~> RecTRXTenderTableType",
						"FlattenCustomInfo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {custominfo.businessdate} = businessdate,",
						"          {custominfo.storeid} = storeid,",
						"          {custominfo.POS} = POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          value = {info.value},",
						"          name = {info.name},",
						"          status = {@status}",
						"     )) ~> CustomInfo",
						"FlattenRecEVCustom sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RECEVcustominfo.POS} = POS,",
						"          {RECEVcustominfo..businessDate} = businessDate,",
						"          {RECEVcustominfo.storeId} = storeId,",
						"          Time,",
						"          RegId,",
						"          Type,",
						"          code = {Info.code},",
						"          data = {Info.data}",
						"     )) ~> RecEVCustom",
						"FlattenRecTRXSaleOrder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          RecTRXSaleorderPOS = POS,",
						"          Timestamp = {@Timestamp},",
						"          RecTRXSaleorderbusinessDate = {@businessDate},",
						"          RecTRXSalestoreId = {@storeId},",
						"          RecTRXSaleEventTime = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = MainPOD,",
						"          status = {@status},",
						"          endSaleTime = {@endSaleTime},",
						"          endSaleDate = {@endSaleDate},",
						"          startSaleTime = {@startSaleTime},",
						"          startSaleDate = {@startSaleDate},",
						"          orderSrc = {@orderSrc},",
						"          nonProductTax = {@nonProductTax},",
						"          totalTax = {@totalTax},",
						"          nonProductAmount = {@nonProductAmount},",
						"          totalAmount = {@totalAmount},",
						"          saleType = {@saleType},",
						"          booth = {@booth},",
						"          receiptNumber = {@receiptNumber},",
						"          side = {@side},",
						"          minor = {@minor},",
						"          major = {@major},",
						"          key = {@key},",
						"          kind = {@kind},",
						"          uniqueId = {@uniqueId},",
						"          foreignOrderId = {@foreignOrderId},",
						"          untilStore = {@untilStore},",
						"          untilTotal = {@untilTotal},",
						"          untilPay = {@untilPay},",
						"          itemsCount = {@itemsCount},",
						"          taxchainid,",
						"          taxchainamount,",
						"          taxchainname,",
						"          baseAmount = {@baseAmount},",
						"          rate = {@rate}",
						"     )) ~> RecTRXSaleOrder",
						"FlattenEVSaleItem sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          {evsaleitem.businessdate} = businessdate,",
						"          {evsaleitem.storeid} = storeid,",
						"          evsaleitemPOS = POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          saletime,",
						"          saletype,",
						"          ProductCode,",
						"          Quantity,",
						"          UpdatedQuantity,",
						"          status",
						"     )) ~> EVSaleItem",
						"FlattenSaleTenderMain2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          saletenderPOS = POS,",
						"          timestamp,",
						"          saletenderbusinessDate = businessDate,",
						"          saletenderstoreId = storeId,",
						"          saletenderTime = Time,",
						"          RegId,",
						"          type = {Event.type},",
						"          POD,",
						"          saleType,",
						"          status,",
						"          uniqueId,",
						"          baseaction,",
						"          Persisted,",
						"          CardProviderID,",
						"          CashlessData,",
						"          TaxOption,",
						"          SubtotalOption,",
						"          DiscountDescription,",
						"          CashlessTransactionID,",
						"          sourceValue,",
						"          sourceCode,",
						"          tenderBaseAction = Tender.BaseAction,",
						"          facevalue = Tender.FaceValue,",
						"          TenderAmount = Tender.TenderAmount,",
						"          TenderId = Tender.TenderId,",
						"          TenderKind = Tender.TenderKind,",
						"          TenderName = Tender.TenderName,",
						"          TenderQuantity = Tender.TenderQuantity",
						"     )) ~> SaleTenderMain",
						"FlattenRefund sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          Businessdate = TLD,",
						"          storeId = {@storeId},",
						"          POS = {@id},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          Time = {@Time},",
						"          POD = {@POD},",
						"          endSaleTime = {@endSaleTime},",
						"          endSaleDate = {@endSaleDate},",
						"          startSaleTime = {@startSaleTime},",
						"          startSaleDate = {@startSaleDate},",
						"          orderSrc = {@orderSrc},",
						"          nonProductTax = {@nonProductTax},",
						"          {@totalTax},",
						"          {@nonProductAmount},",
						"          {@totalAmount},",
						"          {@saleType},",
						"          {@booth},",
						"          {@receiptNumber},",
						"          {@side},",
						"          {@minor},",
						"          {@major},",
						"          {@key},",
						"          {@kind},",
						"          {@uniqueId},",
						"          {@untilStore},",
						"          {@untilPay},",
						"          {@untilTotal},",
						"          {@itemsCount},",
						"          TAXchainid,",
						"          {@amount},",
						"          {@name},",
						"          {@baseAmount},",
						"          {@rate}",
						"     )) ~> SalesTAXRefund",
						"FlattenSalesCustomInfoRefund sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          Businessdate = TLD,",
						"          {@storeId},",
						"          {@id},",
						"          {@RegId},",
						"          {@Type},",
						"          {@Time},",
						"          {@POD},",
						"          {@endSaleTime},",
						"          {@endSaleDate},",
						"          {@startSaleTime},",
						"          {@startSaleDate},",
						"          {@orderSrc},",
						"          {@nonProductTax},",
						"          {@totalTax},",
						"          {@nonProductAmount},",
						"          {@totalAmount},",
						"          {@saleType},",
						"          {@booth},",
						"          {@receiptNumber},",
						"          {@side},",
						"          {@minor},",
						"          {@major},",
						"          {@key},",
						"          {@kind},",
						"          {@uniqueId},",
						"          {@untilStore},",
						"          {@untilPay},",
						"          {@untilTotal},",
						"          {@itemsCount},",
						"          TAXchainid,",
						"          {@amount},",
						"          {@name},",
						"          {@baseAmount},",
						"          {@rate},",
						"          name = {info.name},",
						"          value = {info.value}",
						"     )) ~> SalesCustomInfoRefund",
						"FlattenSaleTendersRefund sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessdate,",
						"          saleType,",
						"          POD,",
						"          Timestamp,",
						"          {@storeId},",
						"          POS,",
						"          {@RegId},",
						"          {@Time},",
						"          {@Type},",
						"          {@uniqueId},",
						"          TenderId,",
						"          TenderKind,",
						"          TenderName,",
						"          TenderQuantity,",
						"          FaceValue,",
						"          TenderAmount,",
						"          BaseAction,",
						"          Persisted,",
						"          CardProviderID,",
						"          CashlessData,",
						"          CashlessTransactionID,",
						"          TaxOption,",
						"          SubtotalOption,",
						"          DiscountDescription",
						"     )) ~> SaleTendersRefund",
						"FlattenEVSaleStartRefund sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          {@uniqueId},",
						"          TenderPersisted,",
						"          DisabledChoices,",
						"          MultiOrder",
						"     )) ~> EVSaleStartRefund",
						"FlattenEVSaleItemRefund sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          UpdatedQuantity,",
						"          ProductCode,",
						"          Quantity",
						"     )) ~> EVSaleItemRefund",
						"FlattenEVSaleChoiceRefund sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          Quantity,",
						"          ChoiceCode,",
						"          ProductCode",
						"     )) ~> EVSaleChoiceRefund",
						"FlattenEvSetSaleTypeRefund sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          ForceExhibition,",
						"          Type = {set.sale.Type}",
						"     )) ~> EvSetSaleTypeRefund",
						"FlattenEVSaleTotalRefund sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          SaleEventtime,",
						"          saleeventtype,",
						"          Ev_SaleTotal",
						"     )) ~> EVSaleTotalRefund",
						"FlattenEVAddTenderRefund sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          TenderID,",
						"          FaceValue,",
						"          TenderAmount,",
						"          BaseAction,",
						"          Persisted,",
						"          CardProviderID,",
						"          CashlessData,",
						"          CashlessTransactionID,",
						"          PreAuthorization",
						"     )) ~> EVAddTenderRefund",
						"FlattenEVSaleEndRefund sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          SaleEventtime,",
						"          saleeventtype,",
						"          saleendType",
						"     )) ~> EVSaleEndRefund",
						"FlattenEVSaleEnd sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          saleventtime = {SaleEvent.time},",
						"          saleeventtype = {saleevent.type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          {@name},",
						"          {@value},",
						"          {@status},",
						"          SALEENDType",
						"     )) ~> EVSaleEnd",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          itemBDPrice,",
						"          itemBDTax,",
						"          itemBPPrice,",
						"          itemBPTax,",
						"          itemaction,",
						"          itemcategory,",
						"          itemchgAfterTotal,",
						"          itemcode,",
						"          itemdayPart,",
						"          itemdepartment,",
						"          itemdepartmentSubClass,",
						"          itemdescription,",
						"          itemdisplayOrder,",
						"          itemfamilyGroup,",
						"          itemgrillModifier,",
						"          itemgrillQty,",
						"          itemid,",
						"          itemlevel,",
						"          itemqty,",
						"          itemqtyPromo,",
						"          itemsolvedChoice,",
						"          itemtotalPrice,",
						"          itemtotalTax,",
						"          itemtype,",
						"          itemunitPrice,",
						"          itemunitTax,",
						"          itemtaxchainid,",
						"          itemtaxchainamount,",
						"          itemtaxchainbaseAmount,",
						"          itemtaxchainname,",
						"          itemtaxchainrate,",
						"          beforeOfferPrice,",
						"          discountAmount,",
						"          discountType,",
						"          offerId,",
						"          POD,",
						"          status,",
						"          Timestamp,",
						"          uniqueId,",
						"          qtyVoided = itemqtyVoided",
						"     )) ~> SaleItem1",
						"filter3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          itemBDPrice = itemitemBDPrice,",
						"          itemBDTax = itemitemBDTax,",
						"          itemBPPrice = itemitemBPPrice,",
						"          itemBPTax = itemitemBPTax,",
						"          itemaction = itemitemaction,",
						"          itemcategory = itemitemcategory,",
						"          itemchgAfterTotal = itemitemchgAfterTotal,",
						"          itemcode = itemitemcode,",
						"          itemdayPart = itemitemdayPart,",
						"          itemdepartment = itemitemdepartment,",
						"          itemdepartmentClass = itemitemdepartmentClass,",
						"          itemdepartmentSubClass = itemitemdepartmentSubClass,",
						"          itemdescription = itemitemdescription,",
						"          itemdisplayOrder = itemitemdisplayOrder,",
						"          itemfamilyGroup = itemitemfamilyGroup,",
						"          itemgrillModifier = itemitemgrillModifier,",
						"          itemgrillQty = itemitemgrillQty,",
						"          itemid = itemitemid,",
						"          itemlevel = itemitemlevel,",
						"          itemqty = itemitemqty,",
						"          itemqtyPromo = itemitemqtyPromo,",
						"          itemqtyVoided = itemitemqtyVoided,",
						"          itemsolvedChoice = itemitemsolvedChoice,",
						"          itemtotalPrice = itemitemtotalPrice,",
						"          itemtotalTax = itemitemtotalTax,",
						"          itemtype = itemitemtype,",
						"          itemunitPrice = itemitemunitPrice,",
						"          itemunitTax = itemitemunitTax,",
						"          itemtaxchainamount = itemitemtaxchainamount,",
						"          itemtaxchainbaseAmount = itemitemtaxchainbaseAmount,",
						"          itemtaxchainid = itemitemtaxchainid,",
						"          itemtaxchainname = itemitemtaxchainname,",
						"          itemtaxchainrate = itemitemtaxchainrate,",
						"          beforeOfferPrice,",
						"          discountAmount,",
						"          discountType,",
						"          offerId,",
						"          uniqueId,",
						"          status,",
						"          POD,",
						"          Timestamp",
						"     )) ~> SaleItem2",
						"filter2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          itemBDTax = titemBDTax,",
						"          itemBDPrice = titemBDPrice,",
						"          itemBPPrice = titemBPPrice,",
						"          itemBPTax = titemBPTax,",
						"          itemaction = titemaction,",
						"          itemcategory = titemcategory,",
						"          itemchgAfterTotal = titemchgAfterTotal,",
						"          itemcode = titemcode,",
						"          itemdayPart = titemdayPart,",
						"          itemdepartment = titemdepartment,",
						"          titemdepartmentClass,",
						"          itemdepartmentSubClass = titemdepartmentSubClass,",
						"          itemdescription = titemdescription,",
						"          itemdisplayOrder = titemdisplayOrder,",
						"          itemfamilyGroup = titemfamilyGroup,",
						"          itemgrillModifier = titemgrillModifier,",
						"          itemgrillQty = titemgrillQty,",
						"          itemid = titemid,",
						"          itemlevel = titemlevel,",
						"          itemqty = titemqty,",
						"          itemqtyPromo = titemqtyPromo,",
						"          itemqtyVoided = titemqtyVoided,",
						"          itemsolvedChoice = titemsolvedChoice,",
						"          itemtotalPrice = titemtotalPrice,",
						"          itemtotalTax = titemtotalTax,",
						"          itemtype = titemtype,",
						"          itemunitPrice = titemunitPrice,",
						"          itemunitTax = titemunitTax,",
						"          itemtaxchainamount = titemtaxchainamount,",
						"          itemtaxchainid = titemtaxchainid,",
						"          itemtaxchainbaseAmount = titemtaxchainbaseAmount,",
						"          itemtaxchainname = titemtaxchainname,",
						"          itemtaxchainrate = titemtaxchainrate,",
						"          beforeOfferPrice,",
						"          discountAmount,",
						"          discountType,",
						"          offerId,",
						"          uniqueId,",
						"          status,",
						"          POD,",
						"          Timestamp",
						"     )) ~> SaleItem3"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RFS_SALES_STLD_XML')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/update_cashless_data')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RFS_SALES_STLD_XML",
								"type": "DatasetReference"
							},
							"name": "XMLSourceFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTLDProductionStatus"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecNode"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecEvent"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXInitGTotal"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXSetSMState"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXBaseConfig"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXBaseConfigposconfig"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXDayParts"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTrxTendertableTenderflag"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXTaxTabletype"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXDayOpen"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "TRXGetAuthorization"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "TRXOperLogin"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecEvDrawerclosee"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecRXRegTransfers"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RECTRXsale"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SalesCustomInfoDetail"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "TRXOrderPromotions"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "TRXOrderCustOffers"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXReduction"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleStart"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleChoice"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVChangeSizeSelection"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSetsaleType"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleTotal"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVAddTender"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXTenderTableType"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "CustomInfo"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecEVCustom"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "RecTRXSaleOrder"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleItem"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SaleTenderMain"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SalesTAXRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SalesCustomInfoRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SaleTendersRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleStartRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleItemRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleChoiceRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EvSetSaleTypeRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleTotalRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVAddTenderRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleEndRefund"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "EVSaleEnd"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SaleItem1"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SaleItem2"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "SaleItem3"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "refund1final"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "refund2final"
						},
						{
							"dataset": {
								"referenceName": "RFS_DATAWAREHOUSE_AzIR",
								"type": "DatasetReference"
							},
							"name": "refund3check"
						}
					],
					"transformations": [
						{
							"name": "FlattenRecNode"
						},
						{
							"name": "FlattenRecEventNode"
						},
						{
							"name": "FlattenRecTRXInitGlobal"
						},
						{
							"name": "FlattenTRXSMSState"
						},
						{
							"name": "FlattenTRXBaseConfig"
						},
						{
							"name": "FlattenTRXBaseConfigposconfig"
						},
						{
							"name": "FlattenRecTRXDayParts"
						},
						{
							"name": "FlattenRecTrxTendertableTenderflag1"
						},
						{
							"name": "FlattenRecTrxTendertableTenderflag2"
						},
						{
							"name": "FlattenRecTrxTendertableTenderflag3"
						},
						{
							"name": "FlattenRecTrxTendertableTenderflag4"
						},
						{
							"name": "FlattenRecTRXTaxTabletype"
						},
						{
							"name": "FlattenRecTRXDayOpen"
						},
						{
							"name": "FlattenTRXGetAuthorization"
						},
						{
							"name": "FlattenTRXOperLogin"
						},
						{
							"name": "FlattenRecEvDrawerClose"
						},
						{
							"name": "FlattenRecRXRegTransfers"
						},
						{
							"name": "FlattenSalesCustomInfoDetail1"
						},
						{
							"name": "FlattenSalesCustomInfoDetail2"
						},
						{
							"name": "FlattenTRXOrderPromotions"
						},
						{
							"name": "FlattenTRXOrderCustOffers"
						},
						{
							"name": "FlattenSaleTenderMain1"
						},
						{
							"name": "FlattenSaleTenderMain2"
						},
						{
							"name": "FlattenEVSaleStart1"
						},
						{
							"name": "FlattenEVSaleStart2"
						},
						{
							"name": "FlattenEVSaleChoice1"
						},
						{
							"name": "FlattenEVSaleChoice2"
						},
						{
							"name": "FlattenEVChangeSizeSelection"
						},
						{
							"name": "FlattenEVSetsaleType"
						},
						{
							"name": "FlattenEVSaleTotal"
						},
						{
							"name": "FlattenEVAddTender"
						},
						{
							"name": "FlattenRecTRXTenderTableType1"
						},
						{
							"name": "FlattenRecTRXTenderTableType2"
						},
						{
							"name": "FlattenCustomInfo"
						},
						{
							"name": "FlattenRecEVCustom"
						},
						{
							"name": "FlattenRecTRXSaleOrder"
						},
						{
							"name": "FlattenEVSaleItem"
						},
						{
							"name": "FlattenRefund"
						},
						{
							"name": "FlattenSalesCustomInfoRefund"
						},
						{
							"name": "FlattenSaleTendersRefund"
						},
						{
							"name": "FlattenEVRefund"
						},
						{
							"name": "FlattenEVSaleStartRefund"
						},
						{
							"name": "FlattenEVSaleItemRefund"
						},
						{
							"name": "FlattenEVSaleChoiceRefund"
						},
						{
							"name": "FlattenEvSetSaleTypeRefund"
						},
						{
							"name": "FlattenEVSaleTotalRefund"
						},
						{
							"name": "FlattenEVAddTenderRefund"
						},
						{
							"name": "FlattenEVSaleEndRefund"
						},
						{
							"name": "FlattenEVSaleEnd"
						},
						{
							"name": "FlattenSaleItem1"
						},
						{
							"name": "FlattenSaleItem2"
						},
						{
							"name": "FlattenSaleItem3"
						},
						{
							"name": "flatten1"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "flatten3"
						},
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filter3"
						},
						{
							"name": "filter4"
						},
						{
							"name": "filter5"
						},
						{
							"name": "filter6"
						},
						{
							"name": "filter7"
						},
						{
							"name": "filter8"
						},
						{
							"name": "filter9"
						},
						{
							"name": "filter10"
						},
						{
							"name": "filter11"
						},
						{
							"name": "filter12"
						},
						{
							"name": "filter13"
						},
						{
							"name": "filter14"
						},
						{
							"name": "filter15"
						},
						{
							"name": "filter16"
						},
						{
							"name": "filter17"
						},
						{
							"name": "filter18"
						},
						{
							"name": "filter19"
						},
						{
							"name": "filter20"
						},
						{
							"name": "filter21"
						},
						{
							"name": "filter22"
						},
						{
							"name": "filter23"
						},
						{
							"name": "filter24"
						},
						{
							"name": "filter25"
						},
						{
							"name": "filter26"
						},
						{
							"name": "filter27"
						},
						{
							"name": "filter28"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TLD as ({@businessDate} as integer, {@checkPoint} as boolean, {@dataComplete} as boolean, {@end} as boolean, {@hasMoreContent} as boolean, {@logVersion} as string, {@productionStatus} as string, {@storeId} as integer, {@swVersion} as string, Node as ({@id} as string, {@nodeStatus} as string, Event as ({@RegId} as integer, {@Time} as long, {@Type} as string, EV_Custom as (Code as string, Value as string), Ev_CancelSpecialTrx as ({@Type} as string), Ev_Custom as (Info as ({@code} as short, {@data} as string)), Ev_DrawerClose as ({@TotalOpenTime} as integer, {@UnauthorizedOpen} as boolean), Ev_SaleCustom as (Info as ({@name} as string, {@value} as string)), Ev_SetCOD as ({@COD} as string, {@POD} as string, {@WorkingMode} as string), TRX_Authorized_Cash_Drawer_Open as (Amount as double, Reason as string, Time as long, Type as string), TRX_BaseConfig as ({@POD} as string, {@POS} as string, Config as (AcceptNegativeQty as boolean, AcceptZeroPricePMix as boolean, CheckRefund as boolean, DecimalPlaces as short, FloatPriceTenderId as boolean, GrandTotalFlag as short, MenuPriceBasis as boolean, MinCirculatingAmount as double, StoreId as integer, StoreName as string, WeekDayBreakfastStartTime as short, WeekDayBreakfastStopTime as short, WeekEndBreakfastStartTime as short, WeekEndBreakfastStopTime as short), POSConfig as (CountTCsFullDiscEM as boolean, OverringBehaviour as boolean, RefundBehaviour as boolean)), TRX_DayClose as ({@BusinessDate} as integer), TRX_DayOpen as ({@BusinessDate} as integer), TRX_DayParts as ({@name} as string, DayPartFriday as ({@end} as string, {@start} as string), DayPartMonday as ({@end} as string, {@start} as string), DayPartSaturday as ({@end} as string, {@start} as string), DayPartSunday as ({@end} as string, {@start} as string), DayPartThursday as ({@end} as string, {@start} as string), DayPartTuesday as ({@end} as string, {@start} as string), DayPartWednesday as ({@end} as string, {@start} as string)), TRX_GetAuthorization as (Action as string, ExpirationDate as integer, IsLogged as boolean, ManagerID as short, ManagerName as string, Method as string, Password as string, SecurityLevel as short), TRX_InitGTotal as ({@amount} as double), TRX_OperLogin as (AutoLogin as boolean, CrewID as short, CrewName as string, CrewSecurityLevel as short, POD as string, RemotePOD as string), TRX_OperLogout as (AutoLogout as boolean, CrewID as short, CrewName as string), TRX_OrderNotRecalled as (OrderNotRecalled as ({@key} as string, {@major} as short, {@minor} as boolean, {@totalAmount} as double)[]), TRX_Price_Changed as (Time as long), TRX_Refund as ({@POD} as string, Order as ({@Timestamp} as long, {@booth} as boolean, {@endSaleDate} as integer, {@endSaleTime} as integer, {@fpFiscalReceiptNumber} as boolean, {@fpReceiptNumber} as boolean, {@key} as string, {@kind} as string, {@major} as short, {@minor} as boolean, {@nonProductAmount} as double, {@nonProductTax} as double, {@orderSrc} as boolean, {@receiptNumber} as short, {@saleType} as string, {@side} as string, {@startSaleDate} as integer, {@startSaleTime} as integer, {@totalAmount} as double, {@totalChargedTaxAmount} as double, {@totalTax} as double, {@totalTaxableAmount} as double, {@uniqueId} as string, CustomInfo as (Info as ({@name} as string, {@value} as string)[]), EventsDetail as (SaleEvent as ({@Time} as long, {@Type} as string, Ev_AddTender as (BaseAction as string, CardProviderID as string, CashlessData as string, CashlessTransactionID as string, FaceValue as double, Persisted as boolean, PreAuthorization as string, TenderAmount as double, TenderID as boolean), Ev_SaleAutoChoice as string, Ev_SaleChoice as (ChoiceCode as short, ProductCode as short, Quantity as boolean), Ev_SaleCustomInfo as (Info as ({@name} as string, {@value} as string)), Ev_SaleEnd as (Type as string), Ev_SaleGrillEnd as ({@Type} as string), Ev_SaleGrillOper as (ComponentCode as short, Operation as string, Quantity as boolean), Ev_SaleGrillRecipe as (ProductCode as short, Quantity as boolean, VMProductCode as short), Ev_SaleGrillStart as (ProductCode as short, Quantity as boolean, VMProductCode as short), Ev_SaleItem as (ProductCode as short, Quantity as short, UpdatedQuantity as boolean), Ev_SaleItemCancelled as (ForcedCancel as boolean, ProductCode as short, Quantity as boolean), Ev_SaleStart as (DisabledChoices as string, MultiOrder as boolean, TenderPersisted as boolean), Ev_SaleTotal as string, Ev_SetSaleType as (ForceExhibition as boolean, Type as string), TRX_GetAuthorization as (Action as string, ExpirationDate as integer, IsLogged as boolean, ManagerID as short, ManagerName as string, Method as string, Password as string, SecurityLevel as short))[]), Fiscal_Information as ({@TIN} as string, {@ZIP} as string, {@address} as string, {@name} as string), Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as short, {@BPTax} as short, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as integer, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as short, {@grillQty} as short, {@id} as integer, {@level} as short, {@qty} as short, {@qtyPromo} as short, {@qtyVoided} as short, {@solvedChoice} as integer, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as short, {@BPTax} as short, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as integer, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as short, {@grillQty} as short, {@id} as integer, {@isUpcharge} as boolean, {@level} as short, {@qty} as short, {@qtyPromo} as short, {@qtyVoided} as short, {@solvedChoice} as integer, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as short, {@BPTax} as short, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as integer, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as short, {@grillQty} as short, {@id} as integer, {@level} as short, {@qty} as short, {@qtyPromo} as short, {@qtyVoided} as short, {@solvedChoice} as integer, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, TaxChain as ({@BDAmount} as double, {@BDBaseAmount} as double, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short))[], TaxChain as ({@BDAmount} as double, {@BDBaseAmount} as double, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short))[], TaxChain as ({@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short))[], POSTimings as ({@itemsCount} as short, {@untilPay} as long, {@untilStore} as string, {@untilTotal} as long), TaxChain as ({@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short), Tenders as (Tender as (BaseAction as string, CardProviderID as string, CashlessData as string, CashlessTransactionID as string, DiscountDescription as string, FaceValue as double, ForeignCurrencyIndicator as boolean, PaymentChannel as string, Persisted as boolean, SubtotalOption as string, TaxOption as string, TenderAmount as double, TenderId as boolean, TenderKind as boolean, TenderName as string, TenderQuantity as boolean)), taxItem as ({@amount} as double, {@baseAmt} as double, {@desc} as string, {@id} as short, {@rate} as short))), TRX_RegTransfer as ({@Amount} as double, {@FaceValue} as double, {@OperType} as string, {@TenderID} as boolean, {@TenderName} as string, {@TransferType} as string), TRX_Sale as ({@POD} as string, {@RemPOD} as string, {@status} as string, Order as ({@Timestamp} as long, {@booth} as boolean, {@deliveryChannel} as string, {@endSaleDate} as integer, {@endSaleTime} as integer, {@foreignOrderId} as integer, {@fpFiscalReceiptNumber} as boolean, {@fpReceiptNumber} as boolean, {@key} as string, {@kind} as string, {@major} as short, {@minor} as short, {@nonProductAmount} as double, {@nonProductTax} as double, {@orderSrc} as short, {@paymentType} as boolean, {@receiptNumber} as short, {@saleType} as string, {@side} as string, {@startSaleDate} as integer, {@startSaleTime} as integer, {@totalAmount} as double, {@totalChargedTaxAmount} as double, {@totalTax} as double, {@totalTaxableAmount} as double, {@uniqueId} as string, COD as ({@name} as short, {@number} as boolean), CustomInfo as (Info as ({@name} as string, {@value} as string)[]), Customer as ({@greeting} as string, {@id} as string, {@loyaltyCardId} as string, {@loyaltyCardType} as boolean, {@nickname} as string), EventsDetail as (SaleEvent as ({@Time} as long, {@Type} as string, Ev_AddTender as (BaseAction as string, CardProviderID as string, CashlessData as string, CashlessTransactionID as string, FaceValue as double, Persisted as boolean, PreAuthorization as boolean, TenderAmount as double, TenderID as short), Ev_BackFromTotal as string, Ev_BreakValueMeal as (Components as (Product as ({@code} as short, {@quantity} as boolean)[]), ProductCode as short, Quantity as boolean), Ev_ChangeSizeSelection as (ProductCode as short, Quantity as short, SizeSelected as short), Ev_PromoItem as (Amount as double, ProductCode as short, Quantity as short, Type as string), Ev_SaleAutoChoice as string, Ev_SaleChoice as (ChoiceCode as short, ProductCode as short, Quantity as short), Ev_SaleClearChoice as (ChoiceCode as short, Quantity as short), Ev_SaleCustomInfo as (Info as ({@name} as string, {@value} as string)), Ev_SaleEnd as (Type as string), Ev_SaleGrillCancel as string, Ev_SaleGrillEnd as ({@Type} as string), Ev_SaleGrillOper as (ComponentCode as integer, Operation as string, Quantity as short), Ev_SaleGrillQualifier as (ComponentCode as short, Qualifier as boolean), Ev_SaleGrillRecipe as (ProductCode as short, Quantity as short, VMProductCode as short), Ev_SaleGrillStart as (ProductCode as short, Quantity as short, VMProductCode as short), Ev_SaleIncrementItemQty as (ProductCode as short, Quantity as short, SaleIndex as boolean), Ev_SaleItem as (ProductCode as short, Quantity as short, UpdatedQuantity as short), Ev_SaleItemCancelled as (ForcedCancel as boolean, ProductCode as short, Quantity as short), Ev_SaleRecalled as string, Ev_SaleStart as (DisabledChoices as string, MultiOrder as boolean, TenderPersisted as boolean), Ev_SaleStored as string, Ev_SaleTotal as string, Ev_SetSaleType as (ForceExhibition as boolean, Type as string), TRX_GetAuthorization as (Action as string, ExpirationDate as integer, IsLogged as boolean, ManagerID as short, ManagerName as string, Method as string, Password as string, SecurityLevel as short))[]), Fiscal_Information as ({@TIN} as string, {@ZIP} as string, {@address} as string, {@name} as string), Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as double, {@BPTax} as double, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as short, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as boolean, {@grillQty} as boolean, {@id} as short, {@level} as boolean, {@qty} as short, {@qtyPromo} as short, {@qtyVoided} as short, {@solvedChoice} as string, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as double, {@BPTax} as double, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as integer, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as boolean, {@grillQty} as short, {@id} as short, {@isUpcharge} as boolean, {@level} as boolean, {@qty} as short, {@qtyPromo} as short, {@qtyVoided} as short, {@solvedChoice} as integer, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, Item as ({@BDPrice} as double, {@BDTax} as double, {@BPPrice} as double, {@BPTax} as double, {@action} as string, {@category} as string, {@chgAfterTotal} as boolean, {@code} as integer, {@dayPart} as string, {@department} as string, {@departmentClass} as string, {@departmentSubClass} as string, {@description} as string, {@displayOrder} as integer, {@familyGroup} as string, {@grillModifier} as short, {@grillQty} as short, {@id} as short, {@isUpcharge} as boolean, {@level} as short, {@qty} as short, {@qtyPromo} as short, {@qtyVoided} as short, {@solvedChoice} as integer, {@totalPrice} as double, {@totalTax} as double, {@type} as string, {@unitPrice} as double, {@unitTax} as double, Promo as ({@id} as boolean, {@name} as string, {@qty} as short), TaxChain as ({@BDAmount} as string, {@BDBaseAmount} as string, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short))[], Offers as ({@beforeOfferPrice} as double, {@discountAmount} as double, {@discountType} as string, {@offerId} as integer), Promo as ({@id} as boolean, {@name} as string, {@qty} as short), PromotionApplied as ({@discountAmount} as double, {@discountType} as string, {@eligible} as boolean, {@offerId} as integer, {@originalItemPromoQty} as boolean, {@originalPrice} as double, {@originalProductCode} as string, {@promotionCounter} as boolean, {@promotionId} as integer), TaxChain as ({@BDAmount} as double, {@BDBaseAmount} as double, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short))[], Offers as ({@beforeOfferPrice} as double, {@discountAmount} as double, {@discountType} as string, {@offerId} as integer), Promo as ({@id} as boolean, {@name} as string, {@qty} as short), PromotionApplied as ({@discountAmount} as double, {@discountType} as string, {@eligible} as boolean, {@offerId} as integer, {@originalItemPromoQty} as boolean, {@originalPrice} as double, {@originalProductCode} as string, {@promotionCounter} as short, {@promotionId} as integer), TaxChain as ({@BDAmount} as double, {@BDBaseAmount} as double, {@BPAmount} as double, {@BPBaseAmount} as double, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short), discounts as (discount as ({@amount} as double, {@description} as string, {@id} as short, {@reduction} as double, {@type} as string, {@value} as double)))[], Offers as ({@applied} as boolean, {@customerId} as integer, {@customerType} as boolean, {@offerBarcodeType} as string, {@offerId} as integer, {@offerName} as string, {@offerType} as string, {@override} as boolean, {@promotionId} as integer)[], POSTimings as ({@itemsCount} as short, {@untilPay} as long, {@untilStore} as long, {@untilTotal} as long), Promotions as (Promotion as ({@countTowardsPromotionLimit} as boolean, {@discountAmount} as double, {@discountType} as string, {@exclusive} as boolean, {@offerId} as integer, {@promotionCounter} as short, {@promotionId} as integer, {@promotionName} as string, {@promotionOnTender} as boolean, {@returnedValue} as double)[]), Reduction as (AfterTotal as short, Amount as double, AmountAfterTotal as double, AmountBeforeTotal as double, BeforeTotal as short, Qty as short), TaxChain as ({@BDAmount} as double, {@BDBaseAmount} as double, {@BPAmount} as double, {@BPBaseAmount} as double, {@amount} as double, {@baseAmount} as double, {@id} as short, {@name} as string, {@rate} as short), Tenders as (Tender as (BaseAction as string, CardProviderID as string, CashlessData as string, CashlessTransactionID as string, DiscountDescription as string, FaceValue as double, ForeignCurrencyIndicator as boolean, PaymentChannel as string, Persisted as boolean, SourceTenders as (SourceTender as ({@sourceCode} as boolean, {@sourceValue} as double)), SubtotalOption as string, TaxOption as string, TenderAmount as double, TenderId as short, TenderKind as short, TenderName as string, TenderQuantity as short)[]), taxItem as ({@amount} as double, {@baseAmt} as double, {@desc} as string, {@id} as short, {@rate} as short))), TRX_SetPOD as ({@PODId} as string), TRX_SetSMState as ({@PODId} as string, CrewId as short, CrewName as string, CrewSecurityLevel as short, InitialFloat as double, LoginTime as integer, LogoutTime as integer, POSState as string), TRX_Show_Prices as (Time as long), TRX_Signature_Version as (CryptographyAlgorithm as string, PrivateKeyVersion as string), TRX_TaxTable as (TaxType as (Precision as short, Rounding as string, TaxBasis as string, TaxCalcType as string, TaxDescription as string, TaxId as short, TaxRate as short)[]), TRX_TenderTable as (TenderType as (CreditSales as ({@LegacyId} as short), CurrencyDecimals as short, DefaultHaloLimit as short, DefaultSkimLimit as short, ElectronicPayment as ({@LegacyId} as string), ForeignCurrency as ({@ExchangeRate} as double, {@LegacyId} as short, {@Orientation} as string, {@Precision} as boolean, {@Rounding} as string), GiftCoupon as ({@Amount} as short, {@LegacyId} as string, {@OperatorDefined} as boolean), OtherPayment as ({@LegacyId} as string), SubtotalOption as string, TaxOption as string, TenderCategory as string, TenderChange as ({@id} as boolean, {@maxAllowed} as double, {@roundToMinAmount} as string, {@type} as string), TenderFiscalIndex as short, TenderFlags as (TenderFlag as string[]), TenderId as short, TenderName as string)[]), TRX_UnaDrawerOpening as string, TRX_UpdateCustomCounter as ({@counterName} as string, {@counterValue} as double, {@operation} as string, {@operationValue} as double))[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     validationMode: 'none',",
						"     namespaces: true,",
						"     dateFormats: ['dd-MM-yyyy'],",
						"     timestampFormats: ['MM/dd/yyyy HH:mm:ss'],",
						"     preferredIntegralType: 'short',",
						"     preferredFractionalType: 'double') ~> XMLSourceFile",
						"XMLSourceFile foldDown(unroll(TLD.Node),",
						"     mapColumn(",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@checkPoint} = TLD.{@checkPoint},",
						"          {@dataComplete} = TLD.{@dataComplete},",
						"          {@end} = TLD.{@end},",
						"          {@hasMoreContent} = TLD.{@hasMoreContent},",
						"          {@logVersion} = TLD.{@logVersion},",
						"          {@productionStatus} = TLD.{@productionStatus},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@swVersion} = TLD.{@swVersion},",
						"          {@id} = TLD.Node.{@id},",
						"          {@nodeStatus} = TLD.Node.{@nodeStatus},",
						"          Event = TLD.Node.Event",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecNode",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          RecEventid = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@RegId} = TLD.Node.Event.{@RegId}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecEventNode",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          id = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@amount} = TLD.Node.Event.TRX_InitGTotal.{@amount}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXInitGlobal",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          id = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@PODId} = TLD.Node.Event.TRX_SetSMState.{@PODId},",
						"          POSState = TLD.Node.Event.TRX_SetSMState.POSState,",
						"          CrewId = TLD.Node.Event.TRX_SetSMState.CrewId,",
						"          CrewName = TLD.Node.Event.TRX_SetSMState.CrewName,",
						"          CrewSecurityLevel = TLD.Node.Event.TRX_SetSMState.CrewSecurityLevel,",
						"          LoginTime = TLD.Node.Event.TRX_SetSMState.LoginTime,",
						"          LogoutTime = TLD.Node.Event.TRX_SetSMState.LogoutTime,",
						"          InitialFloat = TLD.Node.Event.TRX_SetSMState.InitialFloat",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXSMSState",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@POD} = TLD.Node.Event.TRX_BaseConfig.{@POD},",
						"          MenuPriceBasis = TLD.Node.Event.TRX_BaseConfig.Config.MenuPriceBasis,",
						"          WeekEndBreakfastStartTime = TLD.Node.Event.TRX_BaseConfig.Config.WeekEndBreakfastStartTime,",
						"          WeekEndBreakfastStopTime = TLD.Node.Event.TRX_BaseConfig.Config.WeekEndBreakfastStopTime,",
						"          WeekDayBreakfastStartTime = TLD.Node.Event.TRX_BaseConfig.Config.WeekDayBreakfastStartTime,",
						"          WeekDayBreakfastStopTime = TLD.Node.Event.TRX_BaseConfig.Config.WeekDayBreakfastStopTime,",
						"          DecimalPlaces = TLD.Node.Event.TRX_BaseConfig.Config.DecimalPlaces,",
						"          CheckRefund = TLD.Node.Event.TRX_BaseConfig.Config.CheckRefund,",
						"          GrandTotalFlag = TLD.Node.Event.TRX_BaseConfig.Config.GrandTotalFlag,",
						"          StoreId = TLD.Node.Event.TRX_BaseConfig.Config.StoreId,",
						"          StoreName = TLD.Node.Event.TRX_BaseConfig.Config.StoreName,",
						"          AcceptNegativeQty = TLD.Node.Event.TRX_BaseConfig.Config.AcceptNegativeQty,",
						"          AcceptZeroPricePMix = TLD.Node.Event.TRX_BaseConfig.Config.AcceptZeroPricePMix,",
						"          FloatPriceTenderId = TLD.Node.Event.TRX_BaseConfig.Config.FloatPriceTenderId",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXBaseConfig",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@POD} = TLD.Node.Event.TRX_BaseConfig.{@POD},",
						"          CountTCsFullDiscEM = TLD.Node.Event.TRX_BaseConfig.POSConfig.CountTCsFullDiscEM,",
						"          RefundBehaviour = TLD.Node.Event.TRX_BaseConfig.POSConfig.RefundBehaviour,",
						"          OverringBehaviour = TLD.Node.Event.TRX_BaseConfig.POSConfig.OverringBehaviour",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXBaseConfigposconfig",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@id} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@name} = TLD.Node.Event.TRX_DayParts.{@name},",
						"          Mondayend = TLD.Node.Event.TRX_DayParts.DayPartMonday.{@end},",
						"          Mondaystart = TLD.Node.Event.TRX_DayParts.DayPartMonday.{@start},",
						"          Tuesdayend = TLD.Node.Event.TRX_DayParts.DayPartTuesday.{@end},",
						"          Tuesdaystart = TLD.Node.Event.TRX_DayParts.DayPartTuesday.{@start},",
						"          Wednesdayend = TLD.Node.Event.TRX_DayParts.DayPartWednesday.{@end},",
						"          Wednesdaystart = TLD.Node.Event.TRX_DayParts.DayPartWednesday.{@start},",
						"          Thursdayend = TLD.Node.Event.TRX_DayParts.DayPartThursday.{@end},",
						"          Thursdaystart = TLD.Node.Event.TRX_DayParts.DayPartThursday.{@start},",
						"          fridayend = TLD.Node.Event.TRX_DayParts.DayPartFriday.{@end},",
						"          fridaystart = TLD.Node.Event.TRX_DayParts.DayPartFriday.{@start},",
						"          saturdayend = TLD.Node.Event.TRX_DayParts.DayPartSaturday.{@end},",
						"          saturdaystart = TLD.Node.Event.TRX_DayParts.DayPartSaturday.{@start},",
						"          sundayend = TLD.Node.Event.TRX_DayParts.DayPartSunday.{@end},",
						"          sundaystart = TLD.Node.Event.TRX_DayParts.DayPartSunday.{@start},",
						"          POD = TLD.Node.Event.TRX_BaseConfig.{@POD}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXDayParts",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          TenderType = TLD.Node.Event.TRX_TenderTable.TenderType",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTrxTendertableTenderflag1",
						"FlattenRecTrxTendertableTenderflag1 foldDown(unroll(TenderType),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          EventType = {@Type},",
						"          TenderId = TenderType.TenderId,",
						"          TenderName = TenderType.TenderName,",
						"          TenderCategory = TenderType.TenderCategory,",
						"          TenderFlag = TenderType.TenderFlags.TenderFlag,",
						"          TenderType",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTrxTendertableTenderflag2",
						"FlattenRecTrxTendertableTenderflag2 foldDown(unroll(TenderFlag),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          EventType,",
						"          TenderId,",
						"          TenderName,",
						"          TenderCategory,",
						"          TenderFlag = TenderType.TenderFlags.TenderFlag",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTrxTendertableTenderflag3",
						"FlattenRecTrxTendertableTenderflag3 foldDown(unroll(TenderFlag),",
						"     mapColumn(",
						"          TenderFlag,",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          EventType,",
						"          TenderId,",
						"          TenderName,",
						"          TenderCategory",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTrxTendertableTenderflag4",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event.TRX_TaxTable.TaxType),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          TaxId = TLD.Node.Event.TRX_TaxTable.TaxType.TaxId,",
						"          TaxDescription = TLD.Node.Event.TRX_TaxTable.TaxType.TaxDescription,",
						"          TaxRate = TLD.Node.Event.TRX_TaxTable.TaxType.TaxRate,",
						"          TaxBasis = TLD.Node.Event.TRX_TaxTable.TaxType.TaxBasis,",
						"          TaxCalcType = TLD.Node.Event.TRX_TaxTable.TaxType.TaxCalcType,",
						"          {@Rounding} = TLD.Node.Event.TRX_TaxTable.TaxType.Rounding,",
						"          Precision = TLD.Node.Event.TRX_TaxTable.TaxType.Precision,",
						"          {sale.pod} = TLD.Node.Event.TRX_Sale.{@POD}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXTaxTabletype",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {TRX_DayOpen.Businessdate} = TLD.Node.Event.TRX_DayOpen.{@BusinessDate}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXDayOpen",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          ManagerID = TLD.Node.Event.TRX_GetAuthorization.ManagerID,",
						"          ManagerName = TLD.Node.Event.TRX_GetAuthorization.ManagerName,",
						"          SecurityLevel = TLD.Node.Event.TRX_GetAuthorization.SecurityLevel,",
						"          Password = TLD.Node.Event.TRX_GetAuthorization.Password,",
						"          IsLogged = TLD.Node.Event.TRX_GetAuthorization.IsLogged,",
						"          ExpirationDate = TLD.Node.Event.TRX_GetAuthorization.ExpirationDate",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXGetAuthorization",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          CrewID = TLD.Node.Event.TRX_OperLogin.CrewID,",
						"          CrewName = TLD.Node.Event.TRX_OperLogin.CrewName,",
						"          CrewSecurityLevel = TLD.Node.Event.TRX_OperLogin.CrewSecurityLevel,",
						"          POD = TLD.Node.Event.TRX_OperLogin.POD,",
						"          RemotePOD = TLD.Node.Event.TRX_OperLogin.RemotePOD,",
						"          AutoLogin = TLD.Node.Event.TRX_OperLogin.AutoLogin",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXOperLogin",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          businessdate = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@UnauthorizedOpen} = TLD.Node.Event.Ev_DrawerClose.{@UnauthorizedOpen},",
						"          {@TotalOpenTime} = TLD.Node.Event.Ev_DrawerClose.{@TotalOpenTime}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecEvDrawerClose",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          Businessdate = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@Amount} = TLD.Node.Event.TRX_RegTransfer.{@Amount},",
						"          {@FaceValue} = TLD.Node.Event.TRX_RegTransfer.{@FaceValue},",
						"          {@OperType} = TLD.Node.Event.TRX_RegTransfer.{@OperType},",
						"          {@TenderID} = TLD.Node.Event.TRX_RegTransfer.{@TenderID},",
						"          {@TenderName} = TLD.Node.Event.TRX_RegTransfer.{@TenderName},",
						"          {@TransferType} = TLD.Node.Event.TRX_RegTransfer.{@TransferType}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecRXRegTransfers",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@POD} = TLD.Node.Event.TRX_Sale.{@POD},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          EndsaleTime = TLD.Node.Event.TRX_Sale.Order.{@endSaleTime},",
						"          {@endSaleDate} = TLD.Node.Event.TRX_Sale.Order.{@endSaleDate},",
						"          {@startSaleTime} = TLD.Node.Event.TRX_Sale.Order.{@startSaleTime},",
						"          {@startSaleDate} = TLD.Node.Event.TRX_Sale.Order.{@startSaleDate},",
						"          {@orderSrc} = TLD.Node.Event.TRX_Sale.Order.{@orderSrc},",
						"          {@nonProductTax} = TLD.Node.Event.TRX_Sale.Order.{@nonProductTax},",
						"          {@totalTax} = TLD.Node.Event.TRX_Sale.Order.{@totalTax},",
						"          {@nonProductAmount} = TLD.Node.Event.TRX_Sale.Order.{@nonProductAmount},",
						"          {@totalAmount} = TLD.Node.Event.TRX_Sale.Order.{@totalAmount},",
						"          {@saleType} = TLD.Node.Event.TRX_Sale.Order.{@saleType},",
						"          {@booth} = TLD.Node.Event.TRX_Sale.Order.{@booth},",
						"          {@receiptNumber} = TLD.Node.Event.TRX_Sale.Order.{@receiptNumber},",
						"          {@side} = TLD.Node.Event.TRX_Sale.Order.{@side},",
						"          {@minor} = TLD.Node.Event.TRX_Sale.Order.{@minor},",
						"          {@major} = TLD.Node.Event.TRX_Sale.Order.{@major},",
						"          {@key} = TLD.Node.Event.TRX_Sale.Order.{@key},",
						"          {@kind} = TLD.Node.Event.TRX_Sale.Order.{@kind},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@Timestamp} = TLD.Node.Event.TRX_Sale.Order.{@Timestamp},",
						"          {@foreignOrderId} = TLD.Node.Event.TRX_Sale.Order.{@foreignOrderId},",
						"          {@untilStore} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilStore},",
						"          {@untilTotal} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilTotal},",
						"          {@untilPay} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilPay},",
						"          {@itemsCount} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@itemsCount},",
						"          TaxChainId = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@id},",
						"          {@amount} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@amount},",
						"          {@name} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@name},",
						"          {@baseAmount} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@baseAmount},",
						"          {@rate} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@rate},",
						"          Info = TLD.Node.Event.TRX_Refund.Order.CustomInfo.Info,",
						"          AfterTotal = TLD.Node.Event.TRX_Sale.Order.Reduction.AfterTotal,",
						"          Amount = TLD.Node.Event.TRX_Sale.Order.Reduction.Amount,",
						"          AmountAfterTotal = TLD.Node.Event.TRX_Sale.Order.Reduction.AmountAfterTotal,",
						"          AmountBeforeTotal = TLD.Node.Event.TRX_Sale.Order.Reduction.AmountBeforeTotal,",
						"          BeforeTotal = TLD.Node.Event.TRX_Sale.Order.Reduction.BeforeTotal,",
						"          Qty = TLD.Node.Event.TRX_Sale.Order.Reduction.Qty",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSalesCustomInfoDetail1",
						"FlattenSalesCustomInfoDetail1 foldDown(unroll(Info),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@status},",
						"          EndsaleTime,",
						"          {@endSaleDate},",
						"          {@startSaleTime},",
						"          {@startSaleDate},",
						"          {@orderSrc},",
						"          {@nonProductTax},",
						"          {@totalTax},",
						"          {@nonProductAmount},",
						"          {@totalAmount},",
						"          {@saleType},",
						"          {@booth},",
						"          {@receiptNumber},",
						"          {@side},",
						"          {@minor},",
						"          {@major},",
						"          {@key},",
						"          {@kind},",
						"          {@uniqueId},",
						"          {@Timestamp},",
						"          {@foreignOrderId},",
						"          {@untilStore},",
						"          {@untilTotal},",
						"          {@untilPay},",
						"          {@itemsCount},",
						"          TaxChainId,",
						"          {@amount},",
						"          {@name},",
						"          {@baseAmount},",
						"          {@rate},",
						"          customInfoname = Info.{@name},",
						"          custominfovalue = Info.{@value}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSalesCustomInfoDetail2",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion),",
						"     mapColumn(",
						"          BusinessDate = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@promotionId} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@promotionId},",
						"          {@promotionName} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@promotionName},",
						"          {@promotionCounter} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@promotionCounter},",
						"          {@discountType} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@discountType},",
						"          {@discountAmount} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@discountAmount},",
						"          {@offerId} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@offerId},",
						"          {@exclusive} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@exclusive},",
						"          {@promotionOnTender} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@promotionOnTender},",
						"          {@countTowardsPromotionLimit} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@countTowardsPromotionLimit},",
						"          {@returnedValue} = TLD.Node.Event.TRX_Sale.Order.Promotions.Promotion.{@returnedValue}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXOrderPromotions",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event.TRX_Sale.Order.Offers),",
						"     mapColumn(",
						"          Businessdate = TLD.{@businessDate},",
						"          Storeid = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@offerId} = TLD.Node.Event.TRX_Sale.Order.Offers.{@offerId},",
						"          {@customerId} = TLD.Node.Event.TRX_Sale.Order.Offers.{@customerId},",
						"          {@offerName} = TLD.Node.Event.TRX_Sale.Order.Offers.{@offerName},",
						"          {@override} = TLD.Node.Event.TRX_Sale.Order.Offers.{@override},",
						"          {@applied} = TLD.Node.Event.TRX_Sale.Order.Offers.{@applied},",
						"          {@promotionId} = TLD.Node.Event.TRX_Sale.Order.Offers.{@promotionId},",
						"          {@offerBarcodeType} = TLD.Node.Event.TRX_Sale.Order.Offers.{@offerBarcodeType}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTRXOrderCustOffers",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@Timestamp} = TLD.Node.Event.TRX_Sale.Order.{@Timestamp},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {Event.type} = TLD.Node.Event.{@Type},",
						"          {@POD} = TLD.Node.Event.TRX_Sale.{@POD},",
						"          {@saleType} = TLD.Node.Event.TRX_Sale.Order.{@saleType},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          Tender = TLD.Node.Event.TRX_Sale.Order.Tenders.Tender",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleTenderMain1",
						"FlattenSaleTenderMain1 foldDown(unroll(Tender),",
						"     mapColumn(",
						"          POS,",
						"          timestamp = {@Timestamp},",
						"          businessDate = {@businessDate},",
						"          storeId = {@storeId},",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          {Event.type},",
						"          POD = {@POD},",
						"          saleType = {@saleType},",
						"          status = {@status},",
						"          uniqueId = {@uniqueId},",
						"          baseaction = Tender.BaseAction,",
						"          Persisted = Tender.Persisted,",
						"          CardProviderID = Tender.CardProviderID,",
						"          CashlessData = Tender.CashlessData,",
						"          TaxOption = Tender.TaxOption,",
						"          SubtotalOption = Tender.SubtotalOption,",
						"          DiscountDescription = Tender.DiscountDescription,",
						"          CashlessTransactionID = Tender.CashlessTransactionID,",
						"          sourceValue = Tender.SourceTenders.SourceTender.{@sourceValue},",
						"          sourceCode = Tender.SourceTenders.SourceTender.{@sourceCode},",
						"          Tender",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleTenderMain2",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          SaleEvent = TLD.Node.Event.TRX_Sale.Order.EventsDetail.SaleEvent,",
						"          {@POD} = TLD.Node.Event.TRX_Sale.{@POD},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleStart1",
						"FlattenEVSaleStart1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          type = {@Type},",
						"          SaleEventtype = SaleEvent.{@Type},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          {@POD},",
						"          {@uniqueId},",
						"          DisabledChoices = SaleEvent.Ev_SaleStart.DisabledChoices,",
						"          TenderPersisted = SaleEvent.Ev_SaleStart.TenderPersisted,",
						"          MultiOrder = SaleEvent.Ev_SaleStart.MultiOrder,",
						"          {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleStart2",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          businessdate = TLD.{@businessDate},",
						"          storeid = TLD.{@storeId},",
						"          POS = TLD.Node.{@id},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          SaleEvent = TLD.Node.Event.TRX_Sale.Order.EventsDetail.SaleEvent,",
						"          {@POD} = TLD.Node.Event.TRX_Sale.{@POD},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@name} = TLD.Node.Event.Ev_SaleCustom.Info.{@name},",
						"          {@value} = TLD.Node.Event.Ev_SaleCustom.Info.{@value},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          RemPOD = TLD.Node.Event.TRX_Sale.{@RemPOD},",
						"          CrewID = TLD.Node.Event.TRX_OperLogin.CrewID,",
						"          ReceiptNumber = TLD.Node.Event.TRX_Sale.Order.{@receiptNumber}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleChoice1",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          type = {@Type},",
						"          SaleEventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          {@uniqueId},",
						"          {@POD},",
						"          ChoiceCode = SaleEvent.Ev_SaleChoice.ChoiceCode,",
						"          ProductCode = SaleEvent.Ev_SaleChoice.ProductCode,",
						"          Quantity = SaleEvent.Ev_SaleChoice.Quantity,",
						"          {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleChoice2",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          SizeSelected = SaleEvent.Ev_ChangeSizeSelection.SizeSelected,",
						"          ProductCode = SaleEvent.Ev_ChangeSizeSelection.ProductCode,",
						"          Quantity = SaleEvent.Ev_ChangeSizeSelection.Quantity,",
						"          status = {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVChangeSizeSelection",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          {setsaletype.type} = SaleEvent.Ev_SetSaleType.Type,",
						"          ForceExhibition = SaleEvent.Ev_SetSaleType.ForceExhibition,",
						"          status = {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSetsaleType",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          Ev_SaleTotal = SaleEvent.Ev_SaleTotal,",
						"          status = {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleTotal",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleventtime = SaleEvent.{@Time},",
						"          saleventType = SaleEvent.{@Type},",
						"          TenderID = SaleEvent.Ev_AddTender.TenderID,",
						"          FaceValue = SaleEvent.Ev_AddTender.FaceValue,",
						"          TenderAmount = SaleEvent.Ev_AddTender.TenderAmount,",
						"          BaseAction = SaleEvent.Ev_AddTender.BaseAction,",
						"          Persisted = SaleEvent.Ev_AddTender.Persisted,",
						"          CardProviderID = SaleEvent.Ev_AddTender.CardProviderID,",
						"          CashlessData = SaleEvent.Ev_AddTender.CashlessData,",
						"          CashlessTransactionID = SaleEvent.Ev_AddTender.CashlessTransactionID,",
						"          PreAuthorization = SaleEvent.Ev_AddTender.PreAuthorization,",
						"          name = {@name},",
						"          value = {@value},",
						"          status = {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVAddTender",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          TenderType = TLD.Node.Event.TRX_TenderTable.TenderType",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXTenderTableType1",
						"FlattenRecTRXTenderTableType1 foldDown(unroll(TenderType),",
						"     mapColumn(",
						"          POS,",
						"          businessDate = {@businessDate},",
						"          storeId = {@storeId},",
						"          EventTime = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          {TenderType.tenderid} = TenderType.TenderId,",
						"          TenderFiscalIndex = TenderType.TenderFiscalIndex,",
						"          TenderName = TenderType.TenderName,",
						"          TenderCategory = TenderType.TenderCategory,",
						"          TaxOption = TenderType.TaxOption,",
						"          DefaultSkimLimit = TenderType.DefaultSkimLimit,",
						"          DefaultHaloLimit = TenderType.DefaultHaloLimit,",
						"          SubtotalOption = TenderType.SubtotalOption,",
						"          CurrencyDecimals = TenderType.CurrencyDecimals,",
						"          {tenderchange.type} = TenderType.TenderChange.{@type},",
						"          {tenderchange.id} = TenderType.TenderChange.{@id},",
						"          maxAllowed = TenderType.TenderChange.{@maxAllowed},",
						"          roundToMinAmount = TenderType.TenderChange.{@roundToMinAmount},",
						"          {creditsales.legacyid} = TenderType.CreditSales.{@LegacyId},",
						"          {foreigncurrency.legacyid} = TenderType.ForeignCurrency.{@LegacyId},",
						"          Rounding = TenderType.ForeignCurrency.{@Rounding},",
						"          Precision = TenderType.ForeignCurrency.{@Precision},",
						"          Orientation = TenderType.ForeignCurrency.{@Orientation},",
						"          ExchangeRate = TenderType.ForeignCurrency.{@ExchangeRate},",
						"          {electronicpayment.legacyid} = TenderType.ElectronicPayment.{@LegacyId},",
						"          {Giftcupon.legacyid} = TenderType.GiftCoupon.{@LegacyId},",
						"          Amount = TenderType.GiftCoupon.{@Amount},",
						"          OperatorDefined = TenderType.GiftCoupon.{@OperatorDefined}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXTenderTableType2",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          {info.value} = SaleEvent.Ev_SaleCustomInfo.Info.{@value},",
						"          {info.name} = SaleEvent.Ev_SaleCustomInfo.Info.{@name},",
						"          {@status},",
						"          RemPOD,",
						"          CrewID,",
						"          ReceiptNumber",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenCustomInfo",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          businessDate = TLD.{@businessDate},",
						"          storeId = TLD.{@storeId},",
						"          Time = TLD.Node.Event.{@Time},",
						"          RegId = TLD.Node.Event.{@RegId},",
						"          Type = TLD.Node.Event.{@Type},",
						"          {Info.code} = TLD.Node.Event.Ev_Custom.Info.{@code},",
						"          {Info.data} = TLD.Node.Event.Ev_Custom.Info.{@data}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecEVCustom",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@Timestamp} = TLD.Node.Event.TRX_Sale.Order.{@Timestamp},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          MainPOD = TLD.Node.Event.TRX_Sale.{@POD},",
						"          {@status} = TLD.Node.Event.TRX_Sale.{@status},",
						"          {@endSaleTime} = TLD.Node.Event.TRX_Sale.Order.{@endSaleTime},",
						"          {@endSaleDate} = TLD.Node.Event.TRX_Sale.Order.{@endSaleDate},",
						"          {@startSaleTime} = TLD.Node.Event.TRX_Sale.Order.{@startSaleTime},",
						"          {@startSaleDate} = TLD.Node.Event.TRX_Sale.Order.{@startSaleDate},",
						"          {@orderSrc} = TLD.Node.Event.TRX_Sale.Order.{@orderSrc},",
						"          {@nonProductTax} = TLD.Node.Event.TRX_Sale.Order.{@nonProductTax},",
						"          {@totalTax} = TLD.Node.Event.TRX_Sale.Order.{@totalTax},",
						"          {@nonProductAmount} = TLD.Node.Event.TRX_Sale.Order.{@nonProductAmount},",
						"          {@totalAmount} = TLD.Node.Event.TRX_Sale.Order.{@totalAmount},",
						"          {@saleType} = TLD.Node.Event.TRX_Sale.Order.{@saleType},",
						"          {@booth} = TLD.Node.Event.TRX_Sale.Order.{@booth},",
						"          {@receiptNumber} = TLD.Node.Event.TRX_Sale.Order.{@receiptNumber},",
						"          {@side} = TLD.Node.Event.TRX_Sale.Order.{@side},",
						"          {@minor} = TLD.Node.Event.TRX_Sale.Order.{@minor},",
						"          {@major} = TLD.Node.Event.TRX_Sale.Order.{@major},",
						"          {@key} = TLD.Node.Event.TRX_Sale.Order.{@key},",
						"          {@kind} = TLD.Node.Event.TRX_Sale.Order.{@kind},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Sale.Order.{@uniqueId},",
						"          {@foreignOrderId} = TLD.Node.Event.TRX_Sale.Order.{@foreignOrderId},",
						"          {@untilStore} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilStore},",
						"          {@untilTotal} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilTotal},",
						"          {@untilPay} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@untilPay},",
						"          {@itemsCount} = TLD.Node.Event.TRX_Sale.Order.POSTimings.{@itemsCount},",
						"          taxchainid = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@id},",
						"          taxchainamount = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@amount},",
						"          taxchainname = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@name},",
						"          {@baseAmount} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@baseAmount},",
						"          {@rate} = TLD.Node.Event.TRX_Sale.Order.TaxChain.{@rate}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRecTRXSaleOrder",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saletime = SaleEvent.{@Time},",
						"          saletype = SaleEvent.{@Type},",
						"          ProductCode = SaleEvent.Ev_SaleItem.ProductCode,",
						"          Quantity = SaleEvent.Ev_SaleItem.Quantity,",
						"          UpdatedQuantity = SaleEvent.Ev_SaleItem.UpdatedQuantity,",
						"          status = {@status}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleItem",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          TLD = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@id} = TLD.Node.{@id},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@POD} = TLD.Node.Event.TRX_Refund.{@POD},",
						"          {@endSaleTime} = TLD.Node.Event.TRX_Refund.Order.{@endSaleTime},",
						"          {@endSaleDate} = TLD.Node.Event.TRX_Refund.Order.{@endSaleDate},",
						"          {@startSaleTime} = TLD.Node.Event.TRX_Refund.Order.{@startSaleTime},",
						"          {@startSaleDate} = TLD.Node.Event.TRX_Refund.Order.{@startSaleDate},",
						"          {@orderSrc} = TLD.Node.Event.TRX_Refund.Order.{@orderSrc},",
						"          {@nonProductTax} = TLD.Node.Event.TRX_Refund.Order.{@nonProductTax},",
						"          {@totalTax} = TLD.Node.Event.TRX_Refund.Order.{@totalTax},",
						"          {@nonProductAmount} = TLD.Node.Event.TRX_Refund.Order.{@nonProductAmount},",
						"          {@totalAmount} = TLD.Node.Event.TRX_Refund.Order.{@totalAmount},",
						"          {@saleType} = TLD.Node.Event.TRX_Refund.Order.{@saleType},",
						"          {@booth} = TLD.Node.Event.TRX_Refund.Order.{@booth},",
						"          {@receiptNumber} = TLD.Node.Event.TRX_Refund.Order.{@receiptNumber},",
						"          {@side} = TLD.Node.Event.TRX_Refund.Order.{@side},",
						"          {@minor} = TLD.Node.Event.TRX_Refund.Order.{@minor},",
						"          {@major} = TLD.Node.Event.TRX_Refund.Order.{@major},",
						"          {@key} = TLD.Node.Event.TRX_Refund.Order.{@key},",
						"          {@kind} = TLD.Node.Event.TRX_Refund.Order.{@kind},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Refund.Order.{@uniqueId},",
						"          {@untilStore} = TLD.Node.Event.TRX_Refund.Order.POSTimings.{@untilStore},",
						"          {@untilPay} = TLD.Node.Event.TRX_Refund.Order.POSTimings.{@untilPay},",
						"          {@untilTotal} = TLD.Node.Event.TRX_Refund.Order.POSTimings.{@untilTotal},",
						"          {@itemsCount} = TLD.Node.Event.TRX_Refund.Order.POSTimings.{@itemsCount},",
						"          TAXchainid = TLD.Node.Event.TRX_Refund.Order.TaxChain.{@id},",
						"          {@amount} = TLD.Node.Event.TRX_Refund.Order.TaxChain.{@amount},",
						"          {@name} = TLD.Node.Event.TRX_Refund.Order.TaxChain.{@name},",
						"          {@baseAmount} = TLD.Node.Event.TRX_Refund.Order.TaxChain.{@baseAmount},",
						"          {@rate} = TLD.Node.Event.TRX_Refund.Order.TaxChain.{@rate},",
						"          Info = TLD.Node.Event.TRX_Refund.Order.CustomInfo.Info,",
						"          SaleEvent = TLD.Node.Event.TRX_Refund.Order.EventsDetail.SaleEvent",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRefund",
						"FlattenRefund foldDown(unroll(Info),",
						"     mapColumn(",
						"          TLD,",
						"          {@storeId},",
						"          {@id},",
						"          {@RegId},",
						"          {@Type},",
						"          {@Time},",
						"          {@POD},",
						"          {@endSaleTime},",
						"          {@endSaleDate},",
						"          {@startSaleTime},",
						"          {@startSaleDate},",
						"          {@orderSrc},",
						"          {@nonProductTax},",
						"          {@totalTax},",
						"          {@nonProductAmount},",
						"          {@totalAmount},",
						"          {@saleType},",
						"          {@booth},",
						"          {@receiptNumber},",
						"          {@side},",
						"          {@minor},",
						"          {@major},",
						"          {@key},",
						"          {@kind},",
						"          {@uniqueId},",
						"          {@untilStore},",
						"          {@untilPay},",
						"          {@untilTotal},",
						"          {@itemsCount},",
						"          TAXchainid,",
						"          {@amount},",
						"          {@name},",
						"          {@baseAmount},",
						"          {@rate},",
						"          {info.name} = Info.{@name},",
						"          {info.value} = Info.{@value}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSalesCustomInfoRefund",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          businessdate = TLD.{@businessDate},",
						"          POD = TLD.Node.Event.TRX_Refund.{@POD},",
						"          Timestamp = TLD.Node.Event.TRX_Refund.Order.{@Timestamp},",
						"          {@storeId} = TLD.{@storeId},",
						"          POS = TLD.Node.{@id},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Refund.Order.{@uniqueId},",
						"          TenderId = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TenderId,",
						"          TenderKind = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TenderKind,",
						"          TenderName = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TenderName,",
						"          TenderQuantity = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TenderQuantity,",
						"          FaceValue = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.FaceValue,",
						"          TenderAmount = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TenderAmount,",
						"          BaseAction = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.BaseAction,",
						"          Persisted = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.Persisted,",
						"          CardProviderID = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.CardProviderID,",
						"          CashlessData = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.CashlessData,",
						"          CashlessTransactionID = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.CashlessTransactionID,",
						"          TaxOption = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.TaxOption,",
						"          SubtotalOption = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.SubtotalOption,",
						"          DiscountDescription = TLD.Node.Event.TRX_Refund.Order.Tenders.Tender.DiscountDescription,",
						"          saleType = TLD.Node.Event.TRX_Refund.Order.{@saleType}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleTendersRefund",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event),",
						"     mapColumn(",
						"          POS = TLD.Node.{@id},",
						"          {@businessDate} = TLD.{@businessDate},",
						"          {@storeId} = TLD.{@storeId},",
						"          {@Time} = TLD.Node.Event.{@Time},",
						"          {@RegId} = TLD.Node.Event.{@RegId},",
						"          {@Type} = TLD.Node.Event.{@Type},",
						"          {@POD} = TLD.Node.Event.TRX_Refund.{@POD},",
						"          {@uniqueId} = TLD.Node.Event.TRX_Refund.Order.{@uniqueId},",
						"          SaleEvent = TLD.Node.Event.TRX_Refund.Order.EventsDetail.SaleEvent",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          DisabledChoices = SaleEvent.Ev_SaleStart.DisabledChoices,",
						"          MultiOrder = SaleEvent.Ev_SaleStart.MultiOrder,",
						"          TenderPersisted = SaleEvent.Ev_SaleStart.TenderPersisted",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleStartRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          ProductCode = SaleEvent.Ev_SaleItem.ProductCode,",
						"          Quantity = SaleEvent.Ev_SaleItem.Quantity,",
						"          UpdatedQuantity = SaleEvent.Ev_SaleItem.UpdatedQuantity",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleItemRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          ChoiceCode = SaleEvent.Ev_SaleChoice.ChoiceCode,",
						"          ProductCode = SaleEvent.Ev_SaleChoice.ProductCode,",
						"          Quantity = SaleEvent.Ev_SaleChoice.Quantity",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleChoiceRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          ForceExhibition = SaleEvent.Ev_SetSaleType.ForceExhibition,",
						"          {set.sale.Type} = SaleEvent.Ev_SetSaleType.Type",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEvSetSaleTypeRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          SaleEventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          Ev_SaleTotal = SaleEvent.Ev_SaleTotal",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleTotalRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          TenderID = SaleEvent.Ev_AddTender.TenderID,",
						"          FaceValue = SaleEvent.Ev_AddTender.FaceValue,",
						"          TenderAmount = SaleEvent.Ev_AddTender.TenderAmount,",
						"          BaseAction = SaleEvent.Ev_AddTender.BaseAction,",
						"          Persisted = SaleEvent.Ev_AddTender.Persisted,",
						"          CardProviderID = SaleEvent.Ev_AddTender.CardProviderID,",
						"          CashlessData = SaleEvent.Ev_AddTender.CashlessData,",
						"          CashlessTransactionID = SaleEvent.Ev_AddTender.CashlessTransactionID,",
						"          PreAuthorization = SaleEvent.Ev_AddTender.PreAuthorization",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVAddTenderRefund",
						"FlattenEVRefund foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          SaleEventtime = SaleEvent.{@Time},",
						"          saleeventtype = SaleEvent.{@Type},",
						"          saleendType = SaleEvent.Ev_SaleEnd.Type",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleEndRefund",
						"FlattenEVSaleChoice1 foldDown(unroll(SaleEvent),",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {SaleEvent.time} = SaleEvent.{@Time},",
						"          {saleevent.type} = SaleEvent.{@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          {@name},",
						"          {@value},",
						"          {@status},",
						"          SALEENDType = SaleEvent.Ev_SaleEnd.Type",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEVSaleEnd",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event.TRX_Sale.Order.Item),",
						"     mapColumn(",
						"          businessDate = TLD.{@businessDate},",
						"          storeId = TLD.{@storeId},",
						"          pos = TLD.Node.{@id},",
						"          RegId = TLD.Node.Event.{@RegId},",
						"          Time = TLD.Node.Event.{@Time},",
						"          Type = TLD.Node.Event.{@Type},",
						"          itemBDPrice = TLD.Node.Event.TRX_Sale.Order.Item.{@BDPrice},",
						"          itemBDTax = TLD.Node.Event.TRX_Sale.Order.Item.{@BDTax},",
						"          itemBPPrice = TLD.Node.Event.TRX_Sale.Order.Item.{@BPPrice},",
						"          itemBPTax = TLD.Node.Event.TRX_Sale.Order.Item.{@BPTax},",
						"          itemaction = TLD.Node.Event.TRX_Sale.Order.Item.{@action},",
						"          itemcategory = TLD.Node.Event.TRX_Sale.Order.Item.{@category},",
						"          itemchgAfterTotal = TLD.Node.Event.TRX_Sale.Order.Item.{@chgAfterTotal},",
						"          itemcode = TLD.Node.Event.TRX_Sale.Order.Item.{@code},",
						"          itemdayPart = TLD.Node.Event.TRX_Sale.Order.Item.{@dayPart},",
						"          itemdepartment = TLD.Node.Event.TRX_Sale.Order.Item.{@department},",
						"          itemdepartmentClass = TLD.Node.Event.TRX_Sale.Order.Item.{@departmentClass},",
						"          itemdepartmentSubClass = TLD.Node.Event.TRX_Sale.Order.Item.{@departmentSubClass},",
						"          itemdescription = TLD.Node.Event.TRX_Sale.Order.Item.{@description},",
						"          itemdisplayOrder = TLD.Node.Event.TRX_Sale.Order.Item.{@displayOrder},",
						"          itemfamilyGroup = TLD.Node.Event.TRX_Sale.Order.Item.{@familyGroup},",
						"          itemgrillModifier = TLD.Node.Event.TRX_Sale.Order.Item.{@grillModifier},",
						"          itemgrillQty = TLD.Node.Event.TRX_Sale.Order.Item.{@grillQty},",
						"          itemid = TLD.Node.Event.TRX_Sale.Order.Item.{@id},",
						"          itemlevel = TLD.Node.Event.TRX_Sale.Order.Item.{@level},",
						"          itemqty = TLD.Node.Event.TRX_Sale.Order.Item.{@qty},",
						"          itemqtyPromo = TLD.Node.Event.TRX_Sale.Order.Item.{@qtyPromo},",
						"          itemqtyVoided = TLD.Node.Event.TRX_Sale.Order.Item.{@qtyVoided},",
						"          itemsolvedChoice = TLD.Node.Event.TRX_Sale.Order.Item.{@solvedChoice},",
						"          itemtotalPrice = TLD.Node.Event.TRX_Sale.Order.Item.{@totalPrice},",
						"          itemtotalTax = TLD.Node.Event.TRX_Sale.Order.Item.{@totalTax},",
						"          itemtype = TLD.Node.Event.TRX_Sale.Order.Item.{@type},",
						"          itemunitPrice = TLD.Node.Event.TRX_Sale.Order.Item.{@unitPrice},",
						"          itemunitTax = TLD.Node.Event.TRX_Sale.Order.Item.{@unitTax},",
						"          Itemitem = TLD.Node.Event.TRX_Sale.Order.Item.Item,",
						"          itemtaxchainid = TLD.Node.Event.TRX_Sale.Order.Item.TaxChain.{@id},",
						"          itemtaxchainamount = TLD.Node.Event.TRX_Sale.Order.Item.TaxChain.{@amount},",
						"          itemtaxchainbaseAmount = TLD.Node.Event.TRX_Sale.Order.Item.TaxChain.{@baseAmount},",
						"          itemtaxchainname = TLD.Node.Event.TRX_Sale.Order.Item.TaxChain.{@name},",
						"          itemtaxchainrate = TLD.Node.Event.TRX_Sale.Order.Item.TaxChain.{@rate},",
						"          beforeOfferPrice = TLD.Node.Event.TRX_Sale.Order.Item.Offers.{@beforeOfferPrice},",
						"          discountAmount = TLD.Node.Event.TRX_Sale.Order.Item.Offers.{@discountAmount},",
						"          discountType = TLD.Node.Event.TRX_Sale.Order.Item.Offers.{@discountType},",
						"          offerId = TLD.Node.Event.TRX_Sale.Order.Item.Offers.{@offerId},",
						"          POD = TLD.Node.Event.TRX_Sale.{@POD},",
						"          status = TLD.Node.Event.TRX_Sale.{@status},",
						"          Timestamp = TLD.Node.Event.TRX_Sale.Order.{@Timestamp},",
						"          uniqueId = TLD.Node.Event.TRX_Sale.Order.{@uniqueId}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleItem1",
						"FlattenSaleItem1 foldDown(unroll(Itemitem),",
						"     mapColumn(",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          itemBDPrice,",
						"          itemBDTax,",
						"          itemBPPrice,",
						"          itemBPTax,",
						"          itemaction,",
						"          itemcategory,",
						"          itemchgAfterTotal,",
						"          itemcode,",
						"          itemdayPart,",
						"          itemdepartment,",
						"          itemdepartmentClass,",
						"          itemdepartmentSubClass,",
						"          itemdescription,",
						"          itemdisplayOrder,",
						"          itemfamilyGroup,",
						"          itemgrillModifier,",
						"          itemgrillQty,",
						"          itemid,",
						"          itemlevel,",
						"          itemqty,",
						"          itemqtyPromo,",
						"          itemqtyVoided,",
						"          itemsolvedChoice,",
						"          itemtotalPrice,",
						"          itemtotalTax,",
						"          itemtype,",
						"          itemunitPrice,",
						"          itemunitTax,",
						"          itemitemBDPrice = Itemitem.{@BDPrice},",
						"          itemitemBDTax = Itemitem.{@BDTax},",
						"          itemitemBPPrice = Itemitem.{@BPPrice},",
						"          itemitemBPTax = Itemitem.{@BPTax},",
						"          itemitemaction = Itemitem.{@action},",
						"          itemitemcategory = Itemitem.{@category},",
						"          itemitemchgAfterTotal = Itemitem.{@chgAfterTotal},",
						"          itemitemcode = Itemitem.{@code},",
						"          itemitemdayPart = Itemitem.{@dayPart},",
						"          itemitemdepartment = Itemitem.{@department},",
						"          itemitemdepartmentClass = Itemitem.{@departmentClass},",
						"          itemitemdepartmentSubClass = Itemitem.{@departmentSubClass},",
						"          itemitemdescription = Itemitem.{@description},",
						"          itemitemdisplayOrder = Itemitem.{@displayOrder},",
						"          itemitemfamilyGroup = Itemitem.{@familyGroup},",
						"          itemitemgrillModifier = Itemitem.{@grillModifier},",
						"          itemitemgrillQty = Itemitem.{@grillQty},",
						"          itemitemid = Itemitem.{@id},",
						"          itemitemisUpcharge = Itemitem.{@isUpcharge},",
						"          itemitemlevel = Itemitem.{@level},",
						"          itemitemqty = Itemitem.{@qty},",
						"          itemitemqtyPromo = Itemitem.{@qtyPromo},",
						"          itemitemqtyVoided = Itemitem.{@qtyVoided},",
						"          itemitemsolvedChoice = Itemitem.{@solvedChoice},",
						"          itemitemtotalPrice = Itemitem.{@totalPrice},",
						"          itemitemtotalTax = Itemitem.{@totalTax},",
						"          itemitemtype = Itemitem.{@type},",
						"          itemitemunitPrice = Itemitem.{@unitPrice},",
						"          itemitemunitTax = Itemitem.{@unitTax},",
						"          tItem = Itemitem.Item,",
						"          itemitemtaxchainamount = Itemitem.TaxChain.{@amount},",
						"          itemitemtaxchainbaseAmount = Itemitem.TaxChain.{@baseAmount},",
						"          itemitemtaxchainid = Itemitem.TaxChain.{@id},",
						"          itemitemtaxchainname = Itemitem.TaxChain.{@name},",
						"          itemitemtaxchainrate = Itemitem.TaxChain.{@rate},",
						"          itemtaxchainid,",
						"          itemtaxchainamount,",
						"          itemtaxchainbaseAmount,",
						"          itemtaxchainname,",
						"          itemtaxchainrate,",
						"          beforeOfferPrice,",
						"          discountAmount,",
						"          discountType,",
						"          offerId,",
						"          status,",
						"          POD,",
						"          Timestamp,",
						"          uniqueId",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleItem2",
						"FlattenSaleItem2 foldDown(unroll(tItem),",
						"     mapColumn(",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          itemBDPrice,",
						"          itemBDTax,",
						"          itemBPPrice,",
						"          itemBPTax,",
						"          itemaction,",
						"          itemcategory,",
						"          itemchgAfterTotal,",
						"          itemcode,",
						"          itemdayPart,",
						"          itemdepartment,",
						"          itemdepartmentClass,",
						"          itemdepartmentSubClass,",
						"          itemdescription,",
						"          itemdisplayOrder,",
						"          itemfamilyGroup,",
						"          itemgrillModifier,",
						"          itemgrillQty,",
						"          itemid,",
						"          itemlevel,",
						"          itemqty,",
						"          itemqtyPromo,",
						"          itemqtyVoided,",
						"          itemsolvedChoice,",
						"          itemtotalPrice,",
						"          itemtotalTax,",
						"          itemtype,",
						"          itemunitPrice,",
						"          itemunitTax,",
						"          itemitemBDPrice,",
						"          itemitemBDTax,",
						"          itemitemBPPrice,",
						"          itemitemBPTax,",
						"          itemitemaction,",
						"          itemitemcategory,",
						"          itemitemchgAfterTotal,",
						"          itemitemcode,",
						"          itemitemdayPart,",
						"          itemitemdepartment,",
						"          itemitemdepartmentClass,",
						"          itemitemdepartmentSubClass,",
						"          itemitemdescription,",
						"          itemitemdisplayOrder,",
						"          itemitemfamilyGroup,",
						"          itemitemgrillModifier,",
						"          itemitemgrillQty,",
						"          itemitemid,",
						"          itemitemisUpcharge,",
						"          itemitemlevel,",
						"          itemitemqty,",
						"          itemitemqtyPromo,",
						"          itemitemsolvedChoice,",
						"          itemitemtotalPrice,",
						"          itemitemtotalTax,",
						"          itemitemtype,",
						"          itemitemunitPrice,",
						"          itemitemunitTax,",
						"          titemBDPrice = tItem.{@BDPrice},",
						"          titemBDTax = tItem.{@BDTax},",
						"          titemBPPrice = tItem.{@BPPrice},",
						"          titemBPTax = tItem.{@BPTax},",
						"          titemaction = tItem.{@action},",
						"          titemcategory = tItem.{@category},",
						"          titemchgAfterTotal = tItem.{@chgAfterTotal},",
						"          titemcode = tItem.{@code},",
						"          titemdayPart = tItem.{@dayPart},",
						"          titemdepartment = tItem.{@department},",
						"          titemdepartmentClass = tItem.{@departmentClass},",
						"          titemdepartmentSubClass = tItem.{@departmentSubClass},",
						"          titemdescription = tItem.{@description},",
						"          titemdisplayOrder = tItem.{@displayOrder},",
						"          titemfamilyGroup = tItem.{@familyGroup},",
						"          titemgrillModifier = tItem.{@grillModifier},",
						"          titemgrillQty = tItem.{@grillQty},",
						"          titemid = tItem.{@id},",
						"          titemisUpcharge = tItem.{@isUpcharge},",
						"          titemlevel = tItem.{@level},",
						"          titemqty = tItem.{@qty},",
						"          titemqtyPromo = tItem.{@qtyPromo},",
						"          titemqtyVoided = tItem.{@qtyVoided},",
						"          titemsolvedChoice = tItem.{@solvedChoice},",
						"          titemtotalPrice = tItem.{@totalPrice},",
						"          titemtotalTax = tItem.{@totalTax},",
						"          titemtype = tItem.{@type},",
						"          titemunitPrice = tItem.{@unitPrice},",
						"          titemunitTax = tItem.{@unitTax},",
						"          titemtaxchainamount = tItem.TaxChain.{@amount},",
						"          titemtaxchainbaseAmount = tItem.TaxChain.{@baseAmount},",
						"          titemtaxchainid = tItem.TaxChain.{@id},",
						"          titemtaxchainname = tItem.TaxChain.{@name},",
						"          titemtaxchainrate = tItem.TaxChain.{@rate},",
						"          itemitemtaxchainamount,",
						"          itemitemtaxchainbaseAmount,",
						"          itemitemtaxchainid,",
						"          itemitemtaxchainname,",
						"          itemitemtaxchainrate,",
						"          itemtaxchainid,",
						"          itemtaxchainamount,",
						"          temtaxchainbaseAmount = itemtaxchainbaseAmount,",
						"          itemtaxchainname,",
						"          itemtaxchainrate,",
						"          beforeOfferPrice,",
						"          discountAmount,",
						"          discountType,",
						"          offerId,",
						"          uniqueId,",
						"          status,",
						"          POD,",
						"          Timestamp",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenSaleItem3",
						"XMLSourceFile foldDown(unroll(TLD.Node.Event.TRX_Refund.Order.Item, TLD.Node.Event.TRX_Refund.Order.Item),",
						"     mapColumn(",
						"          itemBDPrice = TLD.Node.Event.TRX_Refund.Order.Item.{@BDPrice},",
						"          storeId = TLD.{@storeId},",
						"          businessDate = TLD.{@businessDate},",
						"          pos = TLD.Node.{@id},",
						"          POD = TLD.Node.Event.TRX_Refund.{@POD},",
						"          RegId = TLD.Node.Event.{@RegId},",
						"          Time = TLD.Node.Event.{@Time},",
						"          Type = TLD.Node.Event.{@Type},",
						"          uniqueId = TLD.Node.Event.TRX_Refund.Order.{@uniqueId},",
						"          itemBDTax = TLD.Node.Event.TRX_Refund.Order.Item.{@BDTax},",
						"          itemBPPrice = TLD.Node.Event.TRX_Refund.Order.Item.{@BPPrice},",
						"          itemBPTax = TLD.Node.Event.TRX_Refund.Order.Item.{@BPTax},",
						"          itemaction = TLD.Node.Event.TRX_Refund.Order.Item.{@action},",
						"          itemcategory = TLD.Node.Event.TRX_Refund.Order.Item.{@category},",
						"          itemchgAfterTotal = TLD.Node.Event.TRX_Refund.Order.Item.{@chgAfterTotal},",
						"          itemcode = TLD.Node.Event.TRX_Refund.Order.Item.{@code},",
						"          itemdayPart = TLD.Node.Event.TRX_Refund.Order.Item.{@dayPart},",
						"          itemdepartment = TLD.Node.Event.TRX_Refund.Order.Item.{@department},",
						"          itemdepartmentClass = TLD.Node.Event.TRX_Refund.Order.Item.{@departmentClass},",
						"          itemdepartmentSubClass = TLD.Node.Event.TRX_Refund.Order.Item.{@departmentSubClass},",
						"          itemdescription = TLD.Node.Event.TRX_Refund.Order.Item.{@description},",
						"          itemdisplayOrder = TLD.Node.Event.TRX_Refund.Order.Item.{@displayOrder},",
						"          itemfamilyGroup = TLD.Node.Event.TRX_Refund.Order.Item.{@familyGroup},",
						"          itemgrillModifier = TLD.Node.Event.TRX_Refund.Order.Item.{@grillModifier},",
						"          itemgrillQty = TLD.Node.Event.TRX_Refund.Order.Item.{@grillQty},",
						"          itemid = TLD.Node.Event.TRX_Refund.Order.Item.{@id},",
						"          itemlevel = TLD.Node.Event.TRX_Refund.Order.Item.{@level},",
						"          itemqty = TLD.Node.Event.TRX_Refund.Order.Item.{@qty},",
						"          itemqtyPromo = TLD.Node.Event.TRX_Refund.Order.Item.{@qtyPromo},",
						"          itemsolvedChoice = TLD.Node.Event.TRX_Refund.Order.Item.{@solvedChoice},",
						"          itemtotalPrice = TLD.Node.Event.TRX_Refund.Order.Item.{@totalPrice},",
						"          itemtotalTax = TLD.Node.Event.TRX_Refund.Order.Item.{@totalTax},",
						"          itemtype = TLD.Node.Event.TRX_Refund.Order.Item.{@type},",
						"          itemunitPrice = TLD.Node.Event.TRX_Refund.Order.Item.{@unitPrice},",
						"          itemunitTax = TLD.Node.Event.TRX_Refund.Order.Item.{@unitTax},",
						"          Itemitem = TLD.Node.Event.TRX_Refund.Order.Item.Item,",
						"          taxchainid = TLD.Node.Event.TRX_Refund.Order.Item.TaxChain.{@id},",
						"          taxchainamount = TLD.Node.Event.TRX_Refund.Order.Item.TaxChain.{@amount},",
						"          taxchainname = TLD.Node.Event.TRX_Refund.Order.Item.TaxChain.{@name},",
						"          taxchainbaseAmount = TLD.Node.Event.TRX_Refund.Order.Item.TaxChain.{@baseAmount},",
						"          taxchainrate = TLD.Node.Event.TRX_Refund.Order.Item.TaxChain.{@rate},",
						"          itemqtyVoided = TLD.Node.Event.TRX_Refund.Order.Item.{@qtyVoided}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 foldDown(unroll(Itemitem),",
						"     mapColumn(",
						"          itemBDPrice = Itemitem.{@BDPrice},",
						"          itemBDTax = Itemitem.{@BDTax},",
						"          itemBPPrice = Itemitem.{@BPPrice},",
						"          itemBPTax = Itemitem.{@BPTax},",
						"          itemaction = Itemitem.{@action},",
						"          itemcategory = Itemitem.{@category},",
						"          itemchgAfterTotal = Itemitem.{@chgAfterTotal},",
						"          itemcode = Itemitem.{@code},",
						"          itemdayPart = Itemitem.{@dayPart},",
						"          itemdepartment = Itemitem.{@department},",
						"          itemdepartmentClass = Itemitem.{@departmentClass},",
						"          itemdepartmentSubClass = Itemitem.{@departmentSubClass},",
						"          itemdescription = Itemitem.{@description},",
						"          itemdisplayOrder = Itemitem.{@displayOrder},",
						"          itemfamilyGroup = Itemitem.{@familyGroup},",
						"          itemgrillModifier = Itemitem.{@grillModifier},",
						"          itemgrillQty = Itemitem.{@grillQty},",
						"          itemid = Itemitem.{@id},",
						"          itemisUpcharge = Itemitem.{@isUpcharge},",
						"          itemlevel = Itemitem.{@level},",
						"          itemqty = Itemitem.{@qty},",
						"          itemqtyPromo = Itemitem.{@qtyPromo},",
						"          itemsolvedChoice = Itemitem.{@solvedChoice},",
						"          itemtotalPrice = Itemitem.{@totalPrice},",
						"          itemtotalTax = Itemitem.{@totalTax},",
						"          itemtype = Itemitem.{@type},",
						"          itemunitPrice = Itemitem.{@unitPrice},",
						"          itemunitTax = Itemitem.{@unitTax},",
						"          tItem = Itemitem.Item,",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          POD,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          uniqueId,",
						"          itemtaxchainid = Itemitem.TaxChain.{@id},",
						"          itemtaxchainamount = Itemitem.TaxChain.{@amount},",
						"          itemtaxchainname = Itemitem.TaxChain.{@name},",
						"          itemtaxchainbaseAmount = Itemitem.TaxChain.{@baseAmount},",
						"          itemtaxchainrate = Itemitem.TaxChain.{@rate},",
						"          itemqtyVoidedd = Itemitem.{@qtyVoided}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten2 foldDown(unroll(tItem),",
						"     mapColumn(",
						"          itemBDPrice = tItem.{@BDPrice},",
						"          itemBDTax = tItem.{@BDTax},",
						"          itemBPPrice = tItem.{@BPPrice},",
						"          itemBPTax = tItem.{@BPTax},",
						"          itemaction = tItem.{@action},",
						"          itemcategory = tItem.{@category},",
						"          itemchgAfterTotal = tItem.{@chgAfterTotal},",
						"          itemcode = tItem.{@code},",
						"          itemdayPart = tItem.{@dayPart},",
						"          itemdepartment = tItem.{@department},",
						"          itemdepartmentClass = tItem.{@departmentClass},",
						"          itemdepartmentSubClass = tItem.{@departmentSubClass},",
						"          itemdescription = tItem.{@description},",
						"          itemdisplayOrder = tItem.{@displayOrder},",
						"          itemfamilyGroup = tItem.{@familyGroup},",
						"          itemgrillModifier = tItem.{@grillModifier},",
						"          itemgrillQty = tItem.{@grillQty},",
						"          itemid = tItem.{@id},",
						"          itemlevel = tItem.{@level},",
						"          itemqty = tItem.{@qty},",
						"          itemqtyPromo = tItem.{@qtyPromo},",
						"          itemsolvedChoice = tItem.{@solvedChoice},",
						"          itemtotalPrice = tItem.{@totalPrice},",
						"          itemtotalTax = tItem.{@totalTax},",
						"          itemtype = tItem.{@type},",
						"          itemunitPrice = tItem.{@unitPrice},",
						"          itemunitTax = tItem.{@unitTax},",
						"          itemtaxchainid = tItem.TaxChain.{@id},",
						"          itemtaxchainamount = tItem.TaxChain.{@amount},",
						"          itemtaxchainname = tItem.TaxChain.{@name},",
						"          itemtaxchainbaseAmount = tItem.TaxChain.{@baseAmount},",
						"          itemtaxchainrate = tItem.TaxChain.{@rate},",
						"          storeId,",
						"          businessDate,",
						"          pos,",
						"          POD,",
						"          uniqueId,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          qtyVoidedd = tItem.{@qtyVoided}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"FlattenSaleItem1 filter(equals(Type, 'TRX_Sale')) ~> filter1",
						"FlattenSaleItem3 filter(equals(Type, 'TRX_Sale')) ~> filter2",
						"FlattenSaleItem2 filter(equals(Type, 'TRX_Sale')) ~> filter3",
						"flatten1 filter(equals(Type, 'TRX_Refund')) ~> filter4",
						"flatten3 filter(equals(Type, 'TRX_Refund')) ~> filter5",
						"flatten2 filter(equals(Type, 'TRX_Refund')) ~> filter6",
						"FlattenEVSaleEndRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter7",
						"FlattenEVAddTenderRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter8",
						"FlattenEVSaleTotalRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter9",
						"FlattenEvSetSaleTypeRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter10",
						"FlattenEVSaleChoiceRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter11",
						"FlattenEVSaleItemRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter12",
						"FlattenEVSaleStartRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter13",
						"FlattenSaleTendersRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter14",
						"FlattenSalesCustomInfoRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter15",
						"FlattenRefund filter(equals({@Type}, 'TRX_Refund')) ~> filter16",
						"FlattenRecTRXSaleOrder filter(equals({@Type}, 'TRX_Sale')) ~> filter17",
						"FlattenEVSaleEnd filter(equals({@Type}, 'TRX_Sale')) ~> filter18",
						"FlattenEVSaleItem filter(equals({@Type}, 'TRX_Sale')) ~> filter19",
						"FlattenEVAddTender filter(equals({@Type}, 'TRX_Sale')) ~> filter20",
						"FlattenEVSaleTotal filter(equals({@Type}, 'TRX_Sale')) ~> filter21",
						"FlattenEVSetsaleType filter(equals({@Type}, 'TRX_Sale')) ~> filter22",
						"FlattenEVChangeSizeSelection filter(equals({@Type}, 'TRX_Sale')) ~> filter23",
						"FlattenEVSaleChoice2 filter(equals(type, 'TRX_Sale')) ~> filter24",
						"FlattenEVSaleStart2 filter(equals(type, 'TRX_Sale')) ~> filter25",
						"FlattenSalesCustomInfoDetail1 filter(equals({@Type}, 'TRX_Sale')) ~> filter26",
						"FlattenSalesCustomInfoDetail2 filter(equals({@Type}, 'TRX_Sale')) ~> filter27",
						"FlattenSalesCustomInfoDetail1 filter(equals({@Type}, 'TRX_Sale')) ~> filter28",
						"XMLSourceFile sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTLDProductionStatus.businessdate} = TLD.{@businessDate},",
						"          {RecTLDProductionStatus.checkPoint} = TLD.{@checkPoint},",
						"          {RecTLDProductionStatus.Isend} = TLD.{@end},",
						"          {RecTLDProductionStatus.logVersion} = TLD.{@productionStatus},",
						"          {RecTLDProductionStatus.storeId} = TLD.{@storeId},",
						"          {RecTLDProductionStatus.swVersion} = TLD.{@swVersion},",
						"          status = TLD.{@productionStatus}",
						"     )) ~> RecTLDProductionStatus",
						"FlattenRecNode sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecNode.businessDate} = {@businessDate},",
						"          {RecNode.storeId} = {@storeId},",
						"          {RecNode.id} = {@id},",
						"          {RecNode.nodestatus} = {@nodeStatus}",
						"     )) ~> RecNode",
						"FlattenRecEventNode sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecEvent.id} = RecEventid,",
						"          {RecEvent.businessDate} = {@businessDate},",
						"          {RecEvent.storeId} = {@storeId},",
						"          {RecEvent.Event_Time} = {@Time},",
						"          {RecEvent.Type} = {@Type},",
						"          {RecEvent.RegId} = {@RegId}",
						"     )) ~> RecEvent",
						"FlattenRecTRXInitGlobal sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTRX_InitGTotal.id} = id,",
						"          {RecTRX_InitGTotal.businessDate} = {@businessDate},",
						"          {RecTRX_InitGTotal.storeId} = {@storeId},",
						"          {RecTRX_InitGTotal.Event_Time} = {@Time},",
						"          {RecTRX_InitGTotal.Type} = {@Type},",
						"          {RecTRX_InitGTotal.RegId} = {@RegId},",
						"          {RecTRX_InitGTotal.amount} = {@amount}",
						"     )) ~> RecTRXInitGTotal",
						"FlattenTRXSMSState sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTRX_SetSMState.id} = id,",
						"          {RecTRX_SetSMState.businessDate} = {@businessDate},",
						"          {RecTRX_SetSMState.storeId} = {@storeId},",
						"          {RecTRX_SetSMState.Event_Time} = {@Time},",
						"          {RecTRX_SetSMState.Type} = {@Type},",
						"          {RecTRX_SetSMState.RegId} = {@RegId},",
						"          {RecTRX_SetSMState.PODId} = {@PODId},",
						"          {RecTRX_SetSMState.POSState} = POSState,",
						"          {RecTRX_SetSMState.CrewId} = CrewId,",
						"          {RecTRX_SetSMState.CrewName} = CrewName,",
						"          {RecTRX_SetSMState.CrewSecurityLevel} = CrewSecurityLevel,",
						"          {RecTRX_SetSMState.LoginTime} = LoginTime,",
						"          {RecTRX_SetSMState.LogoutTime} = LogoutTime,",
						"          {RecTRX_SetSMState.InitialFloat} = InitialFloat",
						"     )) ~> RecTRXSetSMState",
						"FlattenTRXBaseConfig sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {Rec_TRX_BaseConfig.POS} = POS,",
						"          {Rec_TRX_BaseConfig.businessDate} = {@businessDate},",
						"          {Rec_TRX_BaseConfig.Event_Time} = {@Time},",
						"          {Rec_TRX_BaseConfig.RegId} = {@RegId},",
						"          {Rec_TRX_BaseConfig.Type} = {@Type},",
						"          {Rec_TRX_BaseConfig.POD} = {@POD},",
						"          {Rec_TRX_BaseConfig.MenuPriceBasis} = MenuPriceBasis,",
						"          {Rec_TRX_BaseConfig.WeekEndBreakfastStartTime} = WeekEndBreakfastStartTime,",
						"          {Rec_TRX_BaseConfig.WeekEndBreakfastStopTime} = WeekEndBreakfastStopTime,",
						"          {Rec_TRX_BaseConfig.WeekDayBreakfastStartTime} = WeekDayBreakfastStartTime,",
						"          {Rec_TRX_BaseConfig.WeekDayBreakfastStopTime} = WeekDayBreakfastStopTime,",
						"          {Rec_TRX_BaseConfig.DecimalPlaces} = DecimalPlaces,",
						"          {Rec_TRX_BaseConfig.CheckRefund} = CheckRefund,",
						"          {Rec_TRX_BaseConfig.GrandTotalFlag} = GrandTotalFlag,",
						"          {Rec_TRX_BaseConfig.StoreId} = StoreId,",
						"          {Rec_TRX_BaseConfig.StoreName} = StoreName,",
						"          {Rec_TRX_BaseConfig.AcceptNegativeQty} = AcceptNegativeQty,",
						"          {Rec_TRX_BaseConfig.AcceptZeroPricePMix} = AcceptZeroPricePMix,",
						"          {Rec_TRX_BaseConfig.FloatPriceTenderId} = FloatPriceTenderId",
						"     )) ~> RecTRXBaseConfig",
						"FlattenTRXBaseConfigposconfig sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTRXBaseConfigposconfig.POS} = POS,",
						"          {RecTRXBaseConfigposconfig.businessDate} = {@businessDate},",
						"          {RecTRXBaseConfigposconfig.storeId} = {@storeId},",
						"          {RecTRXBaseConfigposconfig.Time} = {@Time},",
						"          {RecTRXBaseConfigposconfig.RegId} = {@RegId},",
						"          {RecTRXBaseConfigposconfig.Type} = {@Type},",
						"          {RecTRXBaseConfigposconfig.POD} = {@POD},",
						"          {RecTRXBaseConfigposconfig.CountTCsFullDiscEM} = CountTCsFullDiscEM,",
						"          {RecTRXBaseConfigposconfig.RefundBehaviour} = RefundBehaviour,",
						"          {RecTRXBaseConfigposconfig.OverringBehaviour} = OverringBehaviour",
						"     )) ~> RecTRXBaseConfigposconfig",
						"FlattenRecTRXDayParts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          DaypartsPOS = POS,",
						"          DaypartsbusinessDate = {@businessDate},",
						"          DaypartsstoreId = {@storeId},",
						"          Event_Time = {@Time},",
						"          Regid = {@id},",
						"          EventType = {@Type},",
						"          name = {@name},",
						"          Mondayend,",
						"          Mondaystart,",
						"          Tuesdayend,",
						"          Tuesdaystart,",
						"          Wednesdayend,",
						"          Wednesdaystart,",
						"          Thursdayend,",
						"          Thursdaystart,",
						"          fridayend,",
						"          fridaystart,",
						"          saturdayend,",
						"          saturdaystart,",
						"          sundayend,",
						"          sundaystart,",
						"          pod = POD",
						"     )) ~> RecTRXDayParts",
						"FlattenRecTrxTendertableTenderflag4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          Rec_tendertable_tenderflagTenderFlag = TenderFlag,",
						"          POS,",
						"          {RecTRX_tendertable_tenderflag.businessDate} = {@businessDate},",
						"          {RecTRX_tendertable_tenderflag.storeId} = {@storeId},",
						"          {RecTRX_tendertable_tenderflag.Time} = {@Time},",
						"          {RecTRX_tendertable_tenderflag.RegId} = {@RegId},",
						"          EventType,",
						"          TenderId,",
						"          TenderName,",
						"          TenderCategory",
						"     )) ~> RecTrxTendertableTenderflag",
						"FlattenRecTRXTaxTabletype sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTRXTaxTable.POS} = POS,",
						"          {RecTRXTaxTable.businessDate} = {@businessDate},",
						"          RecTRXTaxTablestoreId = {@storeId},",
						"          RecTRXTaxTableTime = {@Time},",
						"          RecTRXTaxTableRegId = {@RegId},",
						"          RecTRXTaxTableType = {@Type},",
						"          POD = {sale.pod},",
						"          {RecTRXTaxTable.TaxId} = TaxId,",
						"          TaxDescription,",
						"          TaxRate,",
						"          TaxBasis,",
						"          TaxCalcType,",
						"          {RecTRXTaxTable.Rounding} = {@Rounding},",
						"          Precision",
						"     )) ~> RecTRXTaxTabletype",
						"FlattenRecTRXDayOpen sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          RecTRX_DayOpenPOS = POS,",
						"          {main.businessDate} = {@businessDate},",
						"          {RecTRX_DayOpen.storeId} = {@storeId},",
						"          RecTRX_DayOpenEventTime = {@Time},",
						"          RecTRX_DayOpenRegId = {@RegId},",
						"          {RecTRX_DayOpen.Type} = {@Type},",
						"          {RecTRX_DayOpen.Businessdatesub} = {TRX_DayOpen.Businessdate}",
						"     )) ~> RecTRXDayOpen",
						"FlattenTRXGetAuthorization sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          businessDate = {@businessDate},",
						"          {TRXGetAuthorization.storeId} = {@storeId},",
						"          {TRXGetAuthorization.EventTime} = {@Time},",
						"          {TRXGetAuthorization.RegId} = {@RegId},",
						"          {TRXGetAuthorization.Type} = {@Type},",
						"          ManagerID,",
						"          ManagerName,",
						"          SecurityLevel,",
						"          Password,",
						"          IsLogged,",
						"          ExpirationDate",
						"     )) ~> TRXGetAuthorization",
						"FlattenTRXOperLogin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {TRXOperLogin.POS} = POS,",
						"          businessdate = {@businessDate},",
						"          {TRXOperLogin.storeId} = {@storeId},",
						"          {TRXOperLogin.eventTime} = {@Time},",
						"          TRXOperLoginRegId = {@RegId},",
						"          {TRXOperLogin.eventType} = {@Type},",
						"          CrewID,",
						"          CrewName,",
						"          CrewSecurityLevel,",
						"          POD,",
						"          RemotePOD,",
						"          AutoLogin",
						"     )) ~> TRXOperLogin",
						"FlattenRecEvDrawerClose sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          RecEvDrawerclosePOS = POS,",
						"          businessdate,",
						"          {RecEvDrawerclose.storeId} = {@storeId},",
						"          {RecEvDrawerclose.eventTime} = {@Time},",
						"          RecEvDrawercloseRegId = {@RegId},",
						"          RecEvDrawercloseEventType = {@Type},",
						"          UnauthorizedOpen = {@UnauthorizedOpen},",
						"          TotalOpenTime = {@TotalOpenTime}",
						"     )) ~> RecEvDrawerclosee",
						"FlattenRecRXRegTransfers sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecRXRegTransfers.Businessdate} = Businessdate,",
						"          {RecRXRegTransfers.storeId} = {@storeId},",
						"          {RecRXRegTransfers.RegId} = {@RegId},",
						"          {RecRXRegTransfers.eventTime} = {@Time},",
						"          {RecRXRegTransfers.eventType} = {@Type},",
						"          {RecRXRegTransfers.Amount} = {@Amount},",
						"          {RecRXRegTransfers.FaceValue} = {@FaceValue},",
						"          {RecRXRegTransfers.OperType} = {@OperType},",
						"          {RecRXRegTransfers.TenderID} = {@TenderID},",
						"          {RecRXRegTransfers.TenderName} = {@TenderName},",
						"          {RecRXRegTransfers.TransferType} = {@TransferType}",
						"     )) ~> RecRXRegTransfers",
						"filter26 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          RECTRXsalebusinessDate = {@businessDate},",
						"          RECTRXsalestoreId = {@storeId},",
						"          RECTRXsaleEventTime = {@Time},",
						"          RECTRXsaleRegId = {@RegId},",
						"          RECTRXsaleEventType = {@Type},",
						"          RECTRXsalePOD = {@POD},",
						"          RECTRXsalestatus = {@status},",
						"          EndsaleTime,",
						"          RECTRXsaleendSaleDate = {@endSaleDate},",
						"          RECTRXsalestartSaleTime = {@startSaleTime},",
						"          RECTRXsalestartSaleDate = {@startSaleDate},",
						"          RECTRXsaleorderSrc = {@orderSrc},",
						"          nonProductTax = {@nonProductTax},",
						"          totalTax = {@totalTax},",
						"          nonProductAmount = {@nonProductAmount},",
						"          totalAmount = {@totalAmount},",
						"          saleType = {@saleType},",
						"          booth = {@booth},",
						"          receiptNumber = {@receiptNumber},",
						"          side = {@side},",
						"          minor = {@minor},",
						"          major = {@major},",
						"          key = {@key},",
						"          kind = {@kind},",
						"          uniqueId = {@uniqueId},",
						"          Timestamp = {@Timestamp},",
						"          foreignOrderId = {@foreignOrderId},",
						"          untilStore = {@untilStore},",
						"          untilTotal = {@untilTotal},",
						"          untilPay = {@untilPay},",
						"          itemsCount = {@itemsCount},",
						"          TaxChainId,",
						"          amount = {@amount},",
						"          name = {@name},",
						"          baseAmount = {@baseAmount},",
						"          rate = {@rate}",
						"     )) ~> RECTRXsale",
						"filter27 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          SalesCustomInfoDetailbusinessDate = {@businessDate},",
						"          SalesCustomInfoDetailstoreId = {@storeId},",
						"          SalesCustomInfoDetailEventTime = {@Time},",
						"          SalesCustomInfoDetailRegId = {@RegId},",
						"          {SalesCustomInfoDetail.Type} = {@Type},",
						"          {SalesCustomInfoDetail.totalAmount} = {@totalAmount},",
						"          {SalesCustomInfoDetail.receiptNumber} = {@receiptNumber},",
						"          {SalesCustomInfoDetail.minor} = {@minor},",
						"          major = {@major},",
						"          key = {@key},",
						"          kind = {@kind},",
						"          uniqueId = {@uniqueId},",
						"          Timestamp = {@Timestamp},",
						"          foreignOrderId = {@foreignOrderId},",
						"          customInfoname,",
						"          custominfovalue,",
						"          status = {@status}",
						"     )) ~> SalesCustomInfoDetail",
						"FlattenTRXOrderPromotions sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          BusinessDate,",
						"          {TRXOrderPromotions.storeId} = {@storeId},",
						"          {TRXOrderPromotions.PromotionTime} = {@Time},",
						"          RegId = {@RegId},",
						"          TRXOrderPromotionsType = {@Type},",
						"          uniqueId = {@uniqueId},",
						"          promotionId = {@promotionId},",
						"          promotionName = {@promotionName},",
						"          promotionCounter = {@promotionCounter},",
						"          discountType = {@discountType},",
						"          discountAmount = {@discountAmount},",
						"          offerId = {@offerId},",
						"          exclusive = {@exclusive},",
						"          promotionOnTender = {@promotionOnTender},",
						"          countTowardsPromotionLimit = {@countTowardsPromotionLimit},",
						"          returnedValue = {@returnedValue},",
						"          status = {@status}",
						"     )) ~> TRXOrderPromotions",
						"FlattenTRXOrderCustOffers sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          TRXOrderCustOffersBusinessdate = Businessdate,",
						"          Storeid,",
						"          {TRXOrderCustOffers.offerTime} = {@Time},",
						"          RegId = {@RegId},",
						"          TRXOrderCustOffersType = {@Type},",
						"          uniqueId = {@uniqueId},",
						"          offerId = {@offerId},",
						"          customerId = {@customerId},",
						"          offerName = {@offerName},",
						"          override = {@override},",
						"          applied = {@applied},",
						"          promotionId = {@promotionId},",
						"          offerBarcodeType = {@offerBarcodeType},",
						"          status = {@status}",
						"     )) ~> TRXOrderCustOffers",
						"filter28 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTRXReduction.POS} = POS,",
						"          {RecTRXReduction.businessDate} = {@businessDate},",
						"          RecTRXReductionstoreId = {@storeId},",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          EndsaleTime,",
						"          endSaleDate = {@endSaleDate},",
						"          startSaleTime = {@startSaleTime},",
						"          startSaleDate = {@startSaleDate},",
						"          nonProductAmount = {@nonProductAmount},",
						"          totalAmount = {@totalAmount},",
						"          saleType = {@saleType},",
						"          receiptNumber = {@receiptNumber},",
						"          side = {@side},",
						"          minor = {@minor},",
						"          major = {@major},",
						"          key = {@key},",
						"          kind = {@kind},",
						"          uniqueId = {@uniqueId},",
						"          foreignOrderId = {@foreignOrderId},",
						"          AfterTotal,",
						"          Amount,",
						"          AmountAfterTotal,",
						"          AmountBeforeTotal,",
						"          BeforeTotal,",
						"          Qty,",
						"          status = {@status},",
						"          itemcount = {@itemsCount}",
						"     )) ~> RecTRXReduction",
						"filter25 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          EvsalestartPOS = POS,",
						"          EvsalestartbusinessDate = {@businessDate},",
						"          EvsalestartstoreId = {@storeId},",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          type,",
						"          SaleEventtype,",
						"          saleeventtime,",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          DisabledChoices,",
						"          TenderPersisted,",
						"          MultiOrder,",
						"          status = {@status}",
						"     )) ~> EVSaleStart",
						"filter24 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {Evsalechoice.businessdate} = businessdate,",
						"          {Evsalechoice.storeid} = storeid,",
						"          POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          type,",
						"          SaleEventtime,",
						"          saleeventtype,",
						"          uniqueId = {@uniqueId},",
						"          POD = {@POD},",
						"          ChoiceCode,",
						"          ProductCode,",
						"          Quantity,",
						"          status = {@status}",
						"     )) ~> EVSaleChoice",
						"filter23 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {Evchangesizeselection.businessdate} = businessdate,",
						"          {Evchangesizeselection.storeid} = storeid,",
						"          POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          SizeSelected,",
						"          ProductCode,",
						"          Quantity,",
						"          status",
						"     )) ~> EVChangeSizeSelection",
						"filter22 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {Evsetsaletype.businessdate} = businessdate,",
						"          Evsetsaletypestoreid = storeid,",
						"          POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          setsaletype = {setsaletype.type},",
						"          ForceExhibition,",
						"          status",
						"     )) ~> EVSetsaleType",
						"filter21 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {EvSaleTotal.businessdate} = businessdate,",
						"          {EvSaleTotal.storeid} = storeid,",
						"          POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          Ev_SaleTotal,",
						"          status",
						"     )) ~> EVSaleTotal",
						"filter20 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          saleventtime,",
						"          saleventType,",
						"          TenderID,",
						"          FaceValue,",
						"          TenderAmount,",
						"          BaseAction,",
						"          Persisted,",
						"          CardProviderID,",
						"          CashlessData,",
						"          CashlessTransactionID,",
						"          PreAuthorization,",
						"          name,",
						"          value,",
						"          status",
						"     )) ~> EVAddTender",
						"FlattenRecTRXTenderTableType2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RecTrxtendertable.POS} = POS,",
						"          {RecTrxtendertable.businessDate} = businessDate,",
						"          {RecTrxtendertable.storeId} = storeId,",
						"          EventTime,",
						"          RegId,",
						"          Type,",
						"          tenderid = {TenderType.tenderid},",
						"          TenderFiscalIndex,",
						"          TenderName,",
						"          TenderCategory,",
						"          TaxOption,",
						"          DefaultSkimLimit,",
						"          DefaultHaloLimit,",
						"          SubtotalOption,",
						"          CurrencyDecimals,",
						"          tenderchangetype = {tenderchange.type},",
						"          tenderchangeid = {tenderchange.id},",
						"          maxAllowed,",
						"          roundToMinAmount,",
						"          {Creditsales.legacyid} = {creditsales.legacyid},",
						"          {foreigncurrency.legacyid},",
						"          Rounding,",
						"          Precision,",
						"          Orientation,",
						"          ExchangeRate,",
						"          {electronicpayment.legacyid},",
						"          {Giftcupon.legacyid},",
						"          Amount,",
						"          OperatorDefined",
						"     )) ~> RecTRXTenderTableType",
						"FlattenCustomInfo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {custominfo.businessdate} = businessdate,",
						"          {custominfo.storeid} = storeid,",
						"          {custominfo.POS} = POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          value = {info.value},",
						"          name = {info.name},",
						"          status = {@status},",
						"          RemPOD,",
						"          CrewID,",
						"          ReceiptNumber",
						"     )) ~> CustomInfo",
						"FlattenRecEVCustom sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {RECEVcustominfo.POS} = POS,",
						"          {RECEVcustominfo..businessDate} = businessDate,",
						"          {RECEVcustominfo.storeId} = storeId,",
						"          Time,",
						"          RegId,",
						"          Type,",
						"          code = {Info.code},",
						"          data = {Info.data}",
						"     )) ~> RecEVCustom",
						"filter17 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          RecTRXSaleorderPOS = POS,",
						"          Timestamp = {@Timestamp},",
						"          RecTRXSaleorderbusinessDate = {@businessDate},",
						"          RecTRXSalestoreId = {@storeId},",
						"          RecTRXSaleEventTime = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = MainPOD,",
						"          status = {@status},",
						"          endSaleTime = {@endSaleTime},",
						"          endSaleDate = {@endSaleDate},",
						"          startSaleTime = {@startSaleTime},",
						"          startSaleDate = {@startSaleDate},",
						"          orderSrc = {@orderSrc},",
						"          nonProductTax = {@nonProductTax},",
						"          totalTax = {@totalTax},",
						"          nonProductAmount = {@nonProductAmount},",
						"          totalAmount = {@totalAmount},",
						"          saleType = {@saleType},",
						"          booth = {@booth},",
						"          receiptNumber = {@receiptNumber},",
						"          side = {@side},",
						"          minor = {@minor},",
						"          major = {@major},",
						"          key = {@key},",
						"          kind = {@kind},",
						"          uniqueId = {@uniqueId},",
						"          foreignOrderId = {@foreignOrderId},",
						"          untilStore = {@untilStore},",
						"          untilTotal = {@untilTotal},",
						"          untilPay = {@untilPay},",
						"          itemsCount = {@itemsCount},",
						"          taxchainid,",
						"          taxchainamount,",
						"          taxchainname,",
						"          baseAmount = {@baseAmount},",
						"          rate = {@rate}",
						"     )) ~> RecTRXSaleOrder",
						"filter19 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          {evsaleitem.businessdate} = businessdate,",
						"          {evsaleitem.storeid} = storeid,",
						"          evsaleitemPOS = POS,",
						"          Time = {@Time},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          POD = {@POD},",
						"          uniqueId = {@uniqueId},",
						"          saletime,",
						"          saletype,",
						"          ProductCode,",
						"          Quantity,",
						"          UpdatedQuantity,",
						"          status",
						"     )) ~> EVSaleItem",
						"FlattenSaleTenderMain2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          saletenderPOS = POS,",
						"          timestamp,",
						"          saletenderbusinessDate = businessDate,",
						"          saletenderstoreId = storeId,",
						"          saletenderTime = Time,",
						"          RegId,",
						"          type = {Event.type},",
						"          POD,",
						"          saleType,",
						"          status,",
						"          uniqueId,",
						"          baseaction,",
						"          Persisted,",
						"          CardProviderID,",
						"          CashlessData,",
						"          TaxOption,",
						"          SubtotalOption,",
						"          DiscountDescription,",
						"          CashlessTransactionID,",
						"          sourceValue,",
						"          sourceCode,",
						"          tenderBaseAction = Tender.BaseAction,",
						"          facevalue = Tender.FaceValue,",
						"          TenderAmount = Tender.TenderAmount,",
						"          TenderId = Tender.TenderId,",
						"          TenderKind = Tender.TenderKind,",
						"          TenderName = Tender.TenderName,",
						"          TenderQuantity = Tender.TenderQuantity",
						"     )) ~> SaleTenderMain",
						"filter16 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          Businessdate = TLD,",
						"          storeId = {@storeId},",
						"          POS = {@id},",
						"          RegId = {@RegId},",
						"          Type = {@Type},",
						"          Time = {@Time},",
						"          POD = {@POD},",
						"          endSaleTime = {@endSaleTime},",
						"          endSaleDate = {@endSaleDate},",
						"          startSaleTime = {@startSaleTime},",
						"          startSaleDate = {@startSaleDate},",
						"          orderSrc = {@orderSrc},",
						"          nonProductTax = {@nonProductTax},",
						"          {@totalTax},",
						"          {@nonProductAmount},",
						"          {@totalAmount},",
						"          {@saleType},",
						"          {@booth},",
						"          {@receiptNumber},",
						"          {@side},",
						"          {@minor},",
						"          {@major},",
						"          {@key},",
						"          {@kind},",
						"          {@uniqueId},",
						"          {@untilStore},",
						"          {@untilPay},",
						"          {@untilTotal},",
						"          {@itemsCount},",
						"          TAXchainid,",
						"          {@amount},",
						"          {@name},",
						"          {@baseAmount},",
						"          {@rate}",
						"     )) ~> SalesTAXRefund",
						"filter15 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          Businessdate = TLD,",
						"          {@storeId},",
						"          {@id},",
						"          {@RegId},",
						"          {@Type},",
						"          {@Time},",
						"          {@POD},",
						"          {@endSaleTime},",
						"          {@endSaleDate},",
						"          {@startSaleTime},",
						"          {@startSaleDate},",
						"          {@orderSrc},",
						"          {@nonProductTax},",
						"          {@totalTax},",
						"          {@nonProductAmount},",
						"          {@totalAmount},",
						"          {@saleType},",
						"          {@booth},",
						"          {@receiptNumber},",
						"          {@side},",
						"          {@minor},",
						"          {@major},",
						"          {@key},",
						"          {@kind},",
						"          {@uniqueId},",
						"          {@untilStore},",
						"          {@untilPay},",
						"          {@untilTotal},",
						"          {@itemsCount},",
						"          TAXchainid,",
						"          {@amount},",
						"          {@name},",
						"          {@baseAmount},",
						"          {@rate},",
						"          name = {info.name},",
						"          value = {info.value}",
						"     )) ~> SalesCustomInfoRefund",
						"filter14 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessdate,",
						"          saleType,",
						"          POD,",
						"          Timestamp,",
						"          {@storeId},",
						"          POS,",
						"          {@RegId},",
						"          {@Time},",
						"          {@Type},",
						"          {@uniqueId},",
						"          TenderId,",
						"          TenderKind,",
						"          TenderName,",
						"          TenderQuantity,",
						"          FaceValue,",
						"          TenderAmount,",
						"          BaseAction,",
						"          Persisted,",
						"          CardProviderID,",
						"          CashlessData,",
						"          CashlessTransactionID,",
						"          TaxOption,",
						"          SubtotalOption,",
						"          DiscountDescription",
						"     )) ~> SaleTendersRefund",
						"filter13 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          {@uniqueId},",
						"          TenderPersisted,",
						"          DisabledChoices,",
						"          MultiOrder",
						"     )) ~> EVSaleStartRefund",
						"filter12 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          UpdatedQuantity,",
						"          ProductCode,",
						"          Quantity",
						"     )) ~> EVSaleItemRefund",
						"filter11 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          Quantity,",
						"          ChoiceCode,",
						"          ProductCode",
						"     )) ~> EVSaleChoiceRefund",
						"filter10 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          ForceExhibition,",
						"          Type = {set.sale.Type}",
						"     )) ~> EvSetSaleTypeRefund",
						"filter9 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          SaleEventtime,",
						"          saleeventtype,",
						"          Ev_SaleTotal",
						"     )) ~> EVSaleTotalRefund",
						"filter8 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          saleeventtime,",
						"          saleeventtype,",
						"          TenderID,",
						"          FaceValue,",
						"          TenderAmount,",
						"          BaseAction,",
						"          Persisted,",
						"          CardProviderID,",
						"          CashlessData,",
						"          CashlessTransactionID,",
						"          PreAuthorization",
						"     )) ~> EVAddTenderRefund",
						"filter7 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          POS,",
						"          {@businessDate},",
						"          {@storeId},",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          SaleEventtime,",
						"          saleeventtype,",
						"          saleendType",
						"     )) ~> EVSaleEndRefund",
						"filter18 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessdate,",
						"          storeid,",
						"          POS,",
						"          {@Time},",
						"          {@RegId},",
						"          {@Type},",
						"          saleventtime = {SaleEvent.time},",
						"          saleeventtype = {saleevent.type},",
						"          {@POD},",
						"          {@uniqueId},",
						"          {@name},",
						"          {@value},",
						"          {@status},",
						"          SALEENDType",
						"     )) ~> EVSaleEnd",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          itemBDPrice,",
						"          itemBDTax,",
						"          itemBPPrice,",
						"          itemBPTax,",
						"          itemaction,",
						"          itemcategory,",
						"          itemchgAfterTotal,",
						"          itemcode,",
						"          itemdayPart,",
						"          itemdepartment,",
						"          itemdepartmentSubClass,",
						"          itemdescription,",
						"          itemdisplayOrder,",
						"          itemfamilyGroup,",
						"          itemgrillModifier,",
						"          itemgrillQty,",
						"          itemid,",
						"          itemlevel,",
						"          itemqty,",
						"          itemqtyPromo,",
						"          itemsolvedChoice,",
						"          itemtotalPrice,",
						"          itemtotalTax,",
						"          itemtype,",
						"          itemunitPrice,",
						"          itemunitTax,",
						"          itemtaxchainid,",
						"          itemtaxchainamount,",
						"          itemtaxchainbaseAmount,",
						"          itemtaxchainname,",
						"          itemtaxchainrate,",
						"          beforeOfferPrice,",
						"          discountAmount,",
						"          discountType,",
						"          offerId,",
						"          POD,",
						"          status,",
						"          Timestamp,",
						"          uniqueId,",
						"          qtyVoided = itemqtyVoided",
						"     )) ~> SaleItem1",
						"filter3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          itemBDPrice = itemitemBDPrice,",
						"          itemBDTax = itemitemBDTax,",
						"          itemBPPrice = itemitemBPPrice,",
						"          itemBPTax = itemitemBPTax,",
						"          itemaction = itemitemaction,",
						"          itemcategory = itemitemcategory,",
						"          itemchgAfterTotal = itemitemchgAfterTotal,",
						"          itemcode = itemitemcode,",
						"          itemdayPart = itemitemdayPart,",
						"          itemdepartment = itemitemdepartment,",
						"          itemdepartmentClass = itemitemdepartmentClass,",
						"          itemdepartmentSubClass = itemitemdepartmentSubClass,",
						"          itemdescription = itemitemdescription,",
						"          itemdisplayOrder = itemitemdisplayOrder,",
						"          itemfamilyGroup = itemitemfamilyGroup,",
						"          itemgrillModifier = itemitemgrillModifier,",
						"          itemgrillQty = itemitemgrillQty,",
						"          itemid = itemitemid,",
						"          itemlevel = itemitemlevel,",
						"          itemqty = itemitemqty,",
						"          itemqtyPromo = itemitemqtyPromo,",
						"          itemqtyVoided = itemitemqtyVoided,",
						"          itemsolvedChoice = itemitemsolvedChoice,",
						"          itemtotalPrice = itemitemtotalPrice,",
						"          itemtotalTax = itemitemtotalTax,",
						"          itemtype = itemitemtype,",
						"          itemunitPrice = itemitemunitPrice,",
						"          itemunitTax = itemitemunitTax,",
						"          itemtaxchainamount = itemitemtaxchainamount,",
						"          itemtaxchainbaseAmount = itemitemtaxchainbaseAmount,",
						"          itemtaxchainid = itemitemtaxchainid,",
						"          itemtaxchainname = itemitemtaxchainname,",
						"          itemtaxchainrate = itemitemtaxchainrate,",
						"          beforeOfferPrice,",
						"          discountAmount,",
						"          discountType,",
						"          offerId,",
						"          uniqueId,",
						"          status,",
						"          POD,",
						"          Timestamp",
						"     )) ~> SaleItem2",
						"filter2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          itemBDTax = titemBDTax,",
						"          itemBDPrice = titemBDPrice,",
						"          itemBPPrice = titemBPPrice,",
						"          itemBPTax = titemBPTax,",
						"          itemaction = titemaction,",
						"          itemcategory = titemcategory,",
						"          itemchgAfterTotal = titemchgAfterTotal,",
						"          itemcode = titemcode,",
						"          itemdayPart = titemdayPart,",
						"          itemdepartment = titemdepartment,",
						"          titemdepartmentClass,",
						"          itemdepartmentSubClass = titemdepartmentSubClass,",
						"          itemdescription = titemdescription,",
						"          itemdisplayOrder = titemdisplayOrder,",
						"          itemfamilyGroup = titemfamilyGroup,",
						"          itemgrillModifier = titemgrillModifier,",
						"          itemgrillQty = titemgrillQty,",
						"          itemid = titemid,",
						"          itemlevel = titemlevel,",
						"          itemqty = titemqty,",
						"          itemqtyPromo = titemqtyPromo,",
						"          itemqtyVoided = titemqtyVoided,",
						"          itemsolvedChoice = titemsolvedChoice,",
						"          itemtotalPrice = titemtotalPrice,",
						"          itemtotalTax = titemtotalTax,",
						"          itemtype = titemtype,",
						"          itemunitPrice = titemunitPrice,",
						"          itemunitTax = titemunitTax,",
						"          itemtaxchainamount = titemtaxchainamount,",
						"          itemtaxchainid = titemtaxchainid,",
						"          itemtaxchainbaseAmount = titemtaxchainbaseAmount,",
						"          itemtaxchainname = titemtaxchainname,",
						"          itemtaxchainrate = titemtaxchainrate,",
						"          beforeOfferPrice,",
						"          discountAmount,",
						"          discountType,",
						"          offerId,",
						"          uniqueId,",
						"          status,",
						"          POD,",
						"          Timestamp",
						"     )) ~> SaleItem3",
						"filter4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          itemBDPrice,",
						"          storeId,",
						"          businessDate,",
						"          pos,",
						"          POD,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          uniqueId,",
						"          itemBDTax,",
						"          itemBPPrice,",
						"          itemBPTax,",
						"          itemaction,",
						"          itemcategory,",
						"          itemchgAfterTotal,",
						"          itemcode,",
						"          itemdayPart,",
						"          itemdepartment,",
						"          itemdepartmentClass,",
						"          itemdepartmentSubClass,",
						"          itemdescription,",
						"          itemdisplayOrder,",
						"          itemfamilyGroup,",
						"          itemgrillModifier,",
						"          itemgrillQty,",
						"          itemid,",
						"          itemlevel,",
						"          itemqty,",
						"          itemqtyPromo,",
						"          itemsolvedChoice,",
						"          itemtotalPrice,",
						"          itemtotalTax,",
						"          itemtype,",
						"          itemunitPrice,",
						"          itemunitTax,",
						"          taxchainid,",
						"          taxchainamount,",
						"          taxchainname,",
						"          taxchainbaseAmount,",
						"          taxchainrate,",
						"          itemqtyVoided",
						"     )) ~> refund1final",
						"filter6 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          itemBDPrice,",
						"          itemBDTax,",
						"          itemBPPrice,",
						"          itemBPTax,",
						"          itemaction,",
						"          itemcategory,",
						"          itemchgAfterTotal,",
						"          itemcode,",
						"          itemdayPart,",
						"          itemdepartment,",
						"          itemdepartmentClass,",
						"          itemdepartmentSubClass,",
						"          itemdescription,",
						"          itemdisplayOrder,",
						"          itemfamilyGroup,",
						"          itemgrillModifier,",
						"          itemgrillQty,",
						"          itemid,",
						"          itemisUpcharge,",
						"          itemlevel,",
						"          itemqty,",
						"          itemqtyPromo,",
						"          itemsolvedChoice,",
						"          itemtotalPrice,",
						"          itemtotalTax,",
						"          itemtype,",
						"          itemunitPrice,",
						"          itemunitTax,",
						"          businessDate,",
						"          storeId,",
						"          pos,",
						"          POD,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          uniqueId,",
						"          itemtaxchainid,",
						"          itemtaxchainamount,",
						"          itemtaxchainname,",
						"          itemtaxchainbaseAmount,",
						"          itemtaxchainrate,",
						"          itemqtyVoided = itemqtyVoidedd",
						"     )) ~> refund2final",
						"filter5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     mapColumn(",
						"          itemBDPrice,",
						"          itemBDTax,",
						"          itemBPPrice,",
						"          itemBPTax,",
						"          itemaction,",
						"          itemcategory,",
						"          itemchgAfterTotal,",
						"          itemcode,",
						"          itemdayPart,",
						"          itemdepartment,",
						"          itemdepartmentClass,",
						"          itemdepartmentSubClass,",
						"          itemdescription,",
						"          itemdisplayOrder,",
						"          itemfamilyGroup,",
						"          itemgrillModifier,",
						"          itemgrillQty,",
						"          itemid,",
						"          itemlevel,",
						"          itemqty,",
						"          itemqtyPromo,",
						"          itemsolvedChoice,",
						"          itemtotalPrice,",
						"          itemtotalTax,",
						"          itemtype,",
						"          itemunitPrice,",
						"          itemunitTax,",
						"          itemtaxchainid,",
						"          itemtaxchainamount,",
						"          itemtaxchainname,",
						"          itemtaxchainbaseAmount,",
						"          itemtaxchainrate,",
						"          storeId,",
						"          businessDate,",
						"          pos,",
						"          POD,",
						"          uniqueId,",
						"          RegId,",
						"          Time,",
						"          Type,",
						"          qtyVoided = qtyVoidedd",
						"     )) ~> refund3check"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RFS_SALES_STLD_XML')]"
			]
		}
	]
}